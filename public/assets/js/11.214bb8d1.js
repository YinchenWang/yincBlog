(window.webpackJsonp=window.webpackJsonp||[]).push([[11],{416:function(s,n,a){"use strict";a.r(n);var e=a(2),t=Object(e.a)({},(function(){var s=this,n=s._self._c;return n("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[n("h1",{attrs:{id:"day01-数组part01"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#day01-数组part01"}},[s._v("#")]),s._v(" day01 数组part01")]),s._v(" "),n("h3",{attrs:{id:"二分法查找-leetcode-704"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#二分法查找-leetcode-704"}},[s._v("#")]),s._v(" 二分法查找 leetcode 704")]),s._v(" "),n("p",[s._v("给定一个 n 个元素有序的（升序）整型数组 nums 和一个目标值 target  ，写一个函数搜索 nums 中的 target，如果目标值存在返回下标，否则返回 -1。")]),s._v(" "),n("p",[s._v("来源：力扣（LeetCode）\n链接：https://leetcode.cn/problems/binary-search\n著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。")]),s._v(" "),n("p",[n("strong",[s._v("二分法查找时主要应当注意的问题的查找区间的不同，使用不同的区间则处理方法不同。此处应当格外注意！！！")])]),s._v(" "),n("h4",{attrs:{id:"左闭右闭区间"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#左闭右闭区间"}},[s._v("#")]),s._v(" 左闭右闭区间")]),s._v(" "),n("div",{staticClass:"language-c++ line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("class Solution {\npublic:\n    int search(vector<int>& nums, int target) {\n        int left = 0;\n        int right = nums.size() - 1;\n        while (left <= right)\n        {\n            int middle = left + ((right - left) / 2);\n            if (nums[middle] > target)\n            {\n                right = middle - 1;\n            }\n            else if (nums[middle] < target)\n            {\n                left = middle + 1;\n            }\n            else\n                return middle;\n        }\n        return -1;\n    }\n};\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br"),n("span",{staticClass:"line-number"},[s._v("13")]),n("br"),n("span",{staticClass:"line-number"},[s._v("14")]),n("br"),n("span",{staticClass:"line-number"},[s._v("15")]),n("br"),n("span",{staticClass:"line-number"},[s._v("16")]),n("br"),n("span",{staticClass:"line-number"},[s._v("17")]),n("br"),n("span",{staticClass:"line-number"},[s._v("18")]),n("br"),n("span",{staticClass:"line-number"},[s._v("19")]),n("br"),n("span",{staticClass:"line-number"},[s._v("20")]),n("br"),n("span",{staticClass:"line-number"},[s._v("21")]),n("br"),n("span",{staticClass:"line-number"},[s._v("22")]),n("br")])]),n("h4",{attrs:{id:"左闭右开区间"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#左闭右开区间"}},[s._v("#")]),s._v(" 左闭右开区间")]),s._v(" "),n("div",{staticClass:"language-c++ line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("class Solution {\npublic:\n    int search(vector<int>& nums, int target) {\n        int left = 0;\n        int right = nums.size();\n        while (left < right)\n        {\n            int middle = left + ((right - left) / 2);\n            if (nums[middle] > target)\n            {\n                right = middle;\n            }\n            else if (nums[middle] < target)\n            {\n                left = middle + 1;\n            }\n            else\n                return middle;\n        }\n        return -1;\n    }\n};\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br"),n("span",{staticClass:"line-number"},[s._v("13")]),n("br"),n("span",{staticClass:"line-number"},[s._v("14")]),n("br"),n("span",{staticClass:"line-number"},[s._v("15")]),n("br"),n("span",{staticClass:"line-number"},[s._v("16")]),n("br"),n("span",{staticClass:"line-number"},[s._v("17")]),n("br"),n("span",{staticClass:"line-number"},[s._v("18")]),n("br"),n("span",{staticClass:"line-number"},[s._v("19")]),n("br"),n("span",{staticClass:"line-number"},[s._v("20")]),n("br"),n("span",{staticClass:"line-number"},[s._v("21")]),n("br"),n("span",{staticClass:"line-number"},[s._v("22")]),n("br")])]),n("h3",{attrs:{id:"移除元素-leetcode-27"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#移除元素-leetcode-27"}},[s._v("#")]),s._v(" 移除元素 leetcode 27")]),s._v(" "),n("h4",{attrs:{id:"题目"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#题目"}},[s._v("#")]),s._v(" 题目：")]),s._v(" "),n("p",[s._v("给你一个数组 nums 和一个值 val，你需要 原地 移除所有数值等于 val 的元素，并返回移除后数组的新长度。")]),s._v(" "),n("p",[s._v("不要使用额外的数组空间，你必须仅使用 O(1) 额外空间并 原地 修改输入数组。")]),s._v(" "),n("p",[s._v("元素的顺序可以改变。你不需要考虑数组中超出新长度后面的元素。")]),s._v(" "),n("p",[s._v("来源：力扣（LeetCode）\n链接：https://leetcode.cn/problems/remove-element\n著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。")]),s._v(" "),n("h4",{attrs:{id:"暴力法"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#暴力法"}},[s._v("#")]),s._v(" 暴力法")]),s._v(" "),n("p",[s._v("使用双重循环，每当遇见一个匹配的值便将数组后的所有数往前移动一位，虽然可解，但是内存消耗很大。")]),s._v(" "),n("div",{staticClass:"language-c++ line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("class Solution {\npublic:\n    int removeElement(vector<int>& nums, int val) {\n        int size = nums.size();\n        for(int i=0; i<size; i++)\n        {\n            if(nums[i] == val)\n            {\n                for(int j=i+1; j<size; j++)\n                {\n                    nums[j-1] = nums[j];\n                }\n                i--;\n                size -= 1;\n            }\n        }\n        return size;\n    }\n};\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br"),n("span",{staticClass:"line-number"},[s._v("13")]),n("br"),n("span",{staticClass:"line-number"},[s._v("14")]),n("br"),n("span",{staticClass:"line-number"},[s._v("15")]),n("br"),n("span",{staticClass:"line-number"},[s._v("16")]),n("br"),n("span",{staticClass:"line-number"},[s._v("17")]),n("br"),n("span",{staticClass:"line-number"},[s._v("18")]),n("br"),n("span",{staticClass:"line-number"},[s._v("19")]),n("br")])]),n("h4",{attrs:{id:"双指针法-快慢指针"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#双指针法-快慢指针"}},[s._v("#")]),s._v(" 双指针法（快慢指针）")]),s._v(" "),n("p",[s._v("fast指针寻找新的不包含目标值的数组，slow指针指向更新新数组的下标。每当fast找到一个新的数之后，讲slow指向该数")]),s._v(" "),n("div",{staticClass:"language-C++ line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("class Solution {\npublic:\n    int removeElement(vector<int>& nums, int val) {\n        int slowIndex = 0;\n        for( int fastIndex=0; fastIndex<nums.size(); fastIndex++)\n        {\n            if(val != nums[fastIndex]) //找到新数\n            {\n                nums[slowIndex++] = nums[fastIndex];//slow++，更新新数组下标\n            }\n        }\n        return slowIndex;\n    }\n};\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br"),n("span",{staticClass:"line-number"},[s._v("13")]),n("br"),n("span",{staticClass:"line-number"},[s._v("14")]),n("br")])]),n("h4",{attrs:{id:"双指针法-相向双指针法"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#双指针法-相向双指针法"}},[s._v("#")]),s._v(" 双指针法（相向双指针法）")]),s._v(" "),n("p",[s._v("left从左到右找等于val 的值，right从右往左找不等于val的值，找到一队之后用rught指向的值覆盖left的值，继续寻找下一队，直至left==right。")]),s._v(" "),n("div",{staticClass:"language-c++ line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("class Solution {\npublic:\n    int removeElement(vector<int>& nums, int val) {\n        int leftIndex = 0;\n        int rightIndex = nums.size() - 1;\n        while (leftIndex <= rightIndex) {\n            // 找左边等于val的元素,当找到时left指向这个数\n            while (leftIndex <= rightIndex && nums[leftIndex] != val){\n                ++leftIndex;\n            }\n            // 找右边不等于val的元素，找到时right指向这个数\n            while (leftIndex <= rightIndex && nums[rightIndex] == val) {\n                -- rightIndex;\n            }\n            // 将右边不等于val的元素覆盖左边等于val的元素，继续寻找下一对匹配的\n            if (leftIndex < rightIndex) {\n                nums[leftIndex++] = nums[rightIndex--];\n            }\n        }\n        return leftIndex;   // leftIndex一定指向了最终数组末尾的下一个元素\n    }\n};\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br"),n("span",{staticClass:"line-number"},[s._v("13")]),n("br"),n("span",{staticClass:"line-number"},[s._v("14")]),n("br"),n("span",{staticClass:"line-number"},[s._v("15")]),n("br"),n("span",{staticClass:"line-number"},[s._v("16")]),n("br"),n("span",{staticClass:"line-number"},[s._v("17")]),n("br"),n("span",{staticClass:"line-number"},[s._v("18")]),n("br"),n("span",{staticClass:"line-number"},[s._v("19")]),n("br"),n("span",{staticClass:"line-number"},[s._v("20")]),n("br"),n("span",{staticClass:"line-number"},[s._v("21")]),n("br"),n("span",{staticClass:"line-number"},[s._v("22")]),n("br")])])])}),[],!1,null,null,null);n.default=t.exports}}]);