(window.webpackJsonp=window.webpackJsonp||[]).push([[12],{418:function(s,n,t){"use strict";t.r(n);var a=t(2),e=Object(a.a)({},(function(){var s=this,n=s._self._c;return n("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[n("h1",{attrs:{id:"day02-数组-part02"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#day02-数组-part02"}},[s._v("#")]),s._v(" day02 数组 part02")]),s._v(" "),n("h3",{attrs:{id:"有序数组的平方-leetcode-977"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#有序数组的平方-leetcode-977"}},[s._v("#")]),s._v(" 有序数组的平方 leetcode 977")]),s._v(" "),n("p",[s._v("给你一个按 "),n("strong",[s._v("非递减顺序")]),s._v(" 排序的整数数组 "),n("code",[s._v("nums")]),s._v("，返回 "),n("strong",[s._v("每个数字的平方")]),s._v(" 组成的新数组，要求也按 "),n("strong",[s._v("非递减顺序")]),s._v(" 排序。")]),s._v(" "),n("p",[n("strong",[s._v("可以暴力求解，平方后再排序。消耗大。使用双指针法，从两头往中间平方，将平方后的数放入新数组的末尾，即可平方的同时完成排序")])]),s._v(" "),n("h4",{attrs:{id:"前后双指针法"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#前后双指针法"}},[s._v("#")]),s._v(" 前后双指针法")]),s._v(" "),n("div",{staticClass:"language-c++ line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("class Solution {\npublic:\n    vector<int> sortedSquares(vector<int>& nums) {\n        int left = 0;\n        int right = nums.size() - 1;\n        int k = right;\n        vector<int> res(nums.size(), 0);\n        while (left <= right)\n        {\n            if(nums[left] * nums[left] <= nums[right] * nums[right])\n            {\n                res[k--] = nums[right] * nums[right];\n                right--;\n            } \n            else\n            {\n                res[k--] = nums[left] * nums[left];\n                left++;\n            }\n        }\n        return res;\n    }\n};\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br"),n("span",{staticClass:"line-number"},[s._v("13")]),n("br"),n("span",{staticClass:"line-number"},[s._v("14")]),n("br"),n("span",{staticClass:"line-number"},[s._v("15")]),n("br"),n("span",{staticClass:"line-number"},[s._v("16")]),n("br"),n("span",{staticClass:"line-number"},[s._v("17")]),n("br"),n("span",{staticClass:"line-number"},[s._v("18")]),n("br"),n("span",{staticClass:"line-number"},[s._v("19")]),n("br"),n("span",{staticClass:"line-number"},[s._v("20")]),n("br"),n("span",{staticClass:"line-number"},[s._v("21")]),n("br"),n("span",{staticClass:"line-number"},[s._v("22")]),n("br"),n("span",{staticClass:"line-number"},[s._v("23")]),n("br")])]),n("h3",{attrs:{id:"长度最小的子数组-leetcode-209"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#长度最小的子数组-leetcode-209"}},[s._v("#")]),s._v(" 长度最小的子数组 leetcode 209")]),s._v(" "),n("p",[s._v("题目：给定一个含有 n 个正整数的数组和一个正整数 target 。")]),s._v(" "),n("p",[s._v("找出该数组中满足其和 ≥ target 的长度最小的 连续子数组 [numsl, numsl+1, ..., numsr-1, numsr] ，并返回其长度。如果不存在符合条件的子数组，返回 0 。")]),s._v(" "),n("p",[s._v("来源：力扣（LeetCode）\n链接：https://leetcode.cn/problems/minimum-size-subarray-sum\n著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。")]),s._v(" "),n("p",[s._v("使用暴力法需要两个for循环，复杂度O（n^2）")]),s._v(" "),n("h4",{attrs:{id:"滑动窗口法"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#滑动窗口法"}},[s._v("#")]),s._v(" 滑动窗口法")]),s._v(" "),n("p",[s._v("通过不断的调整子序列起始位置和终止位置来变换序列长度，同时查找满足条件的序列。")]),s._v(" "),n("p",[s._v("要注意for中使用的是while， 如果target=100而数组为[1，1，1，1，100]，使用if则无法满足条件。")]),s._v(" "),n("div",{staticClass:"language-c++ line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("class Solution {\npublic:\n    int minSubArrayLen(int target, vector<int>& nums) {\n        int res = INT32_MAX;\n        int i = 0; //滑动窗口起始位置\n        int sum = 0; //滑动窗口和\n        int subLength = 0; // 滑动窗口长度；\n        for( int j=0; j<nums.size(); j++)\n        {\n            sum += nums[j]; //计算窗口内的数之和，\n            while( sum >= target) //当窗口内数的和 >  target时，处理窗口的起始位置与最小长度\n            {\n                subLength = j - i + 1; //获取长度， 窗口终止位置 - 起始位置 + 1。\n                res = res < subLength ? res : subLength; //获取最小值\n                sum -= nums[i++]; //向右移动i，寻找更短的子序列。 注意i++的作用。\n            }\n        }\n        // 如果result没有被赋值的话，就返回0，说明没有符合条件的子序列\n        return res == INT32_MAX ? 0 : res;\n    }\n};\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br"),n("span",{staticClass:"line-number"},[s._v("13")]),n("br"),n("span",{staticClass:"line-number"},[s._v("14")]),n("br"),n("span",{staticClass:"line-number"},[s._v("15")]),n("br"),n("span",{staticClass:"line-number"},[s._v("16")]),n("br"),n("span",{staticClass:"line-number"},[s._v("17")]),n("br"),n("span",{staticClass:"line-number"},[s._v("18")]),n("br"),n("span",{staticClass:"line-number"},[s._v("19")]),n("br"),n("span",{staticClass:"line-number"},[s._v("20")]),n("br"),n("span",{staticClass:"line-number"},[s._v("21")]),n("br")])]),n("h3",{attrs:{id:"螺旋矩阵ii-leetcode-59"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#螺旋矩阵ii-leetcode-59"}},[s._v("#")]),s._v(" 螺旋矩阵II leetcode 59")]),s._v(" "),n("p",[s._v("题目：给你一个正整数 "),n("code",[s._v("n")]),s._v(" ，生成一个包含 "),n("code",[s._v("1")]),s._v(" 到 "),n("code",[s._v("n2")]),s._v(" 所有元素，且元素按顺时针顺序螺旋排列的 "),n("code",[s._v("n x n")]),s._v(" 正方形矩阵 "),n("code",[s._v("matrix")]),s._v(" 。")]),s._v(" "),n("p",[s._v("思路：本题需要注意的是模拟循环时区间边界的处理情况。只用全部左闭右开的区间即可。")]),s._v(" "),n("p",[n("strong",[s._v("示例 1：")]),s._v(" n = 3")]),s._v(" "),n("p",[n("img",{attrs:{src:"https://assets.leetcode.com/uploads/2020/11/13/spiraln.jpg",alt:"img"}})]),s._v(" "),n("div",{staticClass:"language-c++ line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("class Solution {\npublic:\n    vector<vector<int>> generateMatrix(int n) {\n        vector<vector<int>> res(n, vector<int>(n, 0)); \t\t//定义一个二维数组\n        int startX = 0; //定义行\n        int startY = 0; //定义列\n        int loop = n / 2;   //循环次数\n        int mid = n / 2;    //矩阵中心\n        int count = 1;      //值\n        int offset = 1;     //偏移量，控制循环右区间（左闭右开）\n        int i, j = 0;       //当前行列的值\n\n        while(loop--){\n            i = startX;\n            j = startY;\n\n            for(j = startY; j < n - offset; j++)        //上行从左到右\n            {\n                res[startX][j] = count++;\n            }\n            for(i = startX; i < n - offset; i++)        //右列从上到下\n            {\n                res[i][j] = count++;\n            }\n            for( ; j > startY; j--)                     //下行从右往左\n            {\n                res[i][j] = count++;\n            }\n            for( ; i > startX; i--)                     //左列从下往上\n            {\n                res[i][j] = count++;\n            }\n            startX++;           //增加一行\n            startY++;           //增加一列\n            offset += 1;        //偏移量\n        }\n\n        if (n % 2)              //若n为奇数，单独设置中心点的值；\n        {\n            res[mid][mid] = count;\n        }\n        return res;\n    }\n};\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br"),n("span",{staticClass:"line-number"},[s._v("13")]),n("br"),n("span",{staticClass:"line-number"},[s._v("14")]),n("br"),n("span",{staticClass:"line-number"},[s._v("15")]),n("br"),n("span",{staticClass:"line-number"},[s._v("16")]),n("br"),n("span",{staticClass:"line-number"},[s._v("17")]),n("br"),n("span",{staticClass:"line-number"},[s._v("18")]),n("br"),n("span",{staticClass:"line-number"},[s._v("19")]),n("br"),n("span",{staticClass:"line-number"},[s._v("20")]),n("br"),n("span",{staticClass:"line-number"},[s._v("21")]),n("br"),n("span",{staticClass:"line-number"},[s._v("22")]),n("br"),n("span",{staticClass:"line-number"},[s._v("23")]),n("br"),n("span",{staticClass:"line-number"},[s._v("24")]),n("br"),n("span",{staticClass:"line-number"},[s._v("25")]),n("br"),n("span",{staticClass:"line-number"},[s._v("26")]),n("br"),n("span",{staticClass:"line-number"},[s._v("27")]),n("br"),n("span",{staticClass:"line-number"},[s._v("28")]),n("br"),n("span",{staticClass:"line-number"},[s._v("29")]),n("br"),n("span",{staticClass:"line-number"},[s._v("30")]),n("br"),n("span",{staticClass:"line-number"},[s._v("31")]),n("br"),n("span",{staticClass:"line-number"},[s._v("32")]),n("br"),n("span",{staticClass:"line-number"},[s._v("33")]),n("br"),n("span",{staticClass:"line-number"},[s._v("34")]),n("br"),n("span",{staticClass:"line-number"},[s._v("35")]),n("br"),n("span",{staticClass:"line-number"},[s._v("36")]),n("br"),n("span",{staticClass:"line-number"},[s._v("37")]),n("br"),n("span",{staticClass:"line-number"},[s._v("38")]),n("br"),n("span",{staticClass:"line-number"},[s._v("39")]),n("br"),n("span",{staticClass:"line-number"},[s._v("40")]),n("br"),n("span",{staticClass:"line-number"},[s._v("41")]),n("br"),n("span",{staticClass:"line-number"},[s._v("42")]),n("br"),n("span",{staticClass:"line-number"},[s._v("43")]),n("br"),n("span",{staticClass:"line-number"},[s._v("44")]),n("br")])])])}),[],!1,null,null,null);n.default=e.exports}}]);