(window.webpackJsonp=window.webpackJsonp||[]).push([[14],{425:function(n,s,e){"use strict";e.r(s);var a=e(2),t=Object(a.a)({},(function(){var n=this,s=n._self._c;return s("ContentSlotsDistributor",{attrs:{"slot-key":n.$parent.slotKey}},[s("h1",{attrs:{id:"day04-链表part02"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#day04-链表part02"}},[n._v("#")]),n._v(" Day04 链表part02")]),n._v(" "),s("h3",{attrs:{id:"两两交换链表中的节点-leetcode-24"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#两两交换链表中的节点-leetcode-24"}},[n._v("#")]),n._v(" 两两交换链表中的节点 leetcode 24")]),n._v(" "),s("p",[n._v("题目：给你一个链表，两两交换其中相邻的节点，并返回交换后链表的头节点。你必须在不修改节点内部的值的情况下完成本题（即，只能进行节点交换）。")]),n._v(" "),s("p",[n._v("示例 1：")]),n._v(" "),s("p",[n._v("输入：head = [1,2,3,4]\n输出：[2,1,4,3]")]),n._v(" "),s("p",[n._v("来源：力扣（LeetCode）\n链接：https://leetcode.cn/problems/swap-nodes-in-pairs\n著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。")]),n._v(" "),s("h4",{attrs:{id:"虚拟头节点法"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#虚拟头节点法"}},[n._v("#")]),n._v(" 虚拟头节点法")]),n._v(" "),s("p",[n._v("使用虚拟头节点避免讨论头节点。 cur指向要交换的两个节点的前一个节点，交换两个节点之后将cur向右移动两位即可。")]),n._v(" "),s("div",{staticClass:"language-c++ line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[n._v("/**\n * Definition for singly-linked list.\n * struct ListNode {\n *     int val;\n *     ListNode *next;\n *     ListNode() : val(0), next(nullptr) {}\n *     ListNode(int x) : val(x), next(nullptr) {}\n *     ListNode(int x, ListNode *next) : val(x), next(next) {}\n * };\n */\nclass Solution {\npublic:\n    ListNode* swapPairs(ListNode* head) {\n        ListNode* dummyHead = new ListNode(0);\n        dummyHead -> next = head;\n        ListNode* cur = dummyHead;\n\n        while (cur->next != nullptr && cur -> next -> next != nullptr)\n        {\n            ListNode* tmp = cur -> next;\n            ListNode* tmp1 = cur -> next -> next -> next;\n\n            cur->next = cur->next->next;    // 步骤一\n            cur->next->next = tmp;          // 步骤二\n            cur->next->next->next = tmp1;   // 步骤三\n\n            cur = cur->next->next;\n        }\n        return dummyHead -> next;\n    }\n};\n")])]),n._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[n._v("1")]),s("br"),s("span",{staticClass:"line-number"},[n._v("2")]),s("br"),s("span",{staticClass:"line-number"},[n._v("3")]),s("br"),s("span",{staticClass:"line-number"},[n._v("4")]),s("br"),s("span",{staticClass:"line-number"},[n._v("5")]),s("br"),s("span",{staticClass:"line-number"},[n._v("6")]),s("br"),s("span",{staticClass:"line-number"},[n._v("7")]),s("br"),s("span",{staticClass:"line-number"},[n._v("8")]),s("br"),s("span",{staticClass:"line-number"},[n._v("9")]),s("br"),s("span",{staticClass:"line-number"},[n._v("10")]),s("br"),s("span",{staticClass:"line-number"},[n._v("11")]),s("br"),s("span",{staticClass:"line-number"},[n._v("12")]),s("br"),s("span",{staticClass:"line-number"},[n._v("13")]),s("br"),s("span",{staticClass:"line-number"},[n._v("14")]),s("br"),s("span",{staticClass:"line-number"},[n._v("15")]),s("br"),s("span",{staticClass:"line-number"},[n._v("16")]),s("br"),s("span",{staticClass:"line-number"},[n._v("17")]),s("br"),s("span",{staticClass:"line-number"},[n._v("18")]),s("br"),s("span",{staticClass:"line-number"},[n._v("19")]),s("br"),s("span",{staticClass:"line-number"},[n._v("20")]),s("br"),s("span",{staticClass:"line-number"},[n._v("21")]),s("br"),s("span",{staticClass:"line-number"},[n._v("22")]),s("br"),s("span",{staticClass:"line-number"},[n._v("23")]),s("br"),s("span",{staticClass:"line-number"},[n._v("24")]),s("br"),s("span",{staticClass:"line-number"},[n._v("25")]),s("br"),s("span",{staticClass:"line-number"},[n._v("26")]),s("br"),s("span",{staticClass:"line-number"},[n._v("27")]),s("br"),s("span",{staticClass:"line-number"},[n._v("28")]),s("br"),s("span",{staticClass:"line-number"},[n._v("29")]),s("br"),s("span",{staticClass:"line-number"},[n._v("30")]),s("br"),s("span",{staticClass:"line-number"},[n._v("31")]),s("br")])]),s("h3",{attrs:{id:"删除链表的倒数第n个节点-leetcode-19"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#删除链表的倒数第n个节点-leetcode-19"}},[n._v("#")]),n._v(" 删除链表的倒数第n个节点 leetcode 19")]),n._v(" "),s("p",[n._v("题目：给你一个链表，删除链表的倒数第 n 个结点，并且返回链表的头结点。")]),n._v(" "),s("p",[n._v("示例 1：")]),n._v(" "),s("p",[n._v("输入：head = [1,2,3,4,5], n = 2\n输出：[1,2,3,5]")]),n._v(" "),s("p",[n._v("来源：力扣（LeetCode）\n链接：https://leetcode.cn/problems/remove-nth-node-from-end-of-list\n著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。")]),n._v(" "),s("p",[n._v("使用快慢双指针，快指针先走n+1.然后快慢指针同时向后遍历到快指针指向链表尾部。此时慢指针指向的就是需要删除的节点的前一个节点。")]),n._v(" "),s("div",{staticClass:"language-c++ line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[n._v("/**\n * Definition for singly-linked list.\n * struct ListNode {\n *     int val;\n *     ListNode *next;\n *     ListNode() : val(0), next(nullptr) {}\n *     ListNode(int x) : val(x), next(nullptr) {}\n *     ListNode(int x, ListNode *next) : val(x), next(next) {}\n * };\n */\nclass Solution {\npublic:\n    ListNode* removeNthFromEnd(ListNode* head, int n) {\n        ListNode* dummyHead = new ListNode(0);\n        dummyHead -> next = head;\n        ListNode* fast = dummyHead;\n        ListNode* slow = dummyHead;\n\n        while (n-- && fast != nullptr)      //fast先走n步\n        {\n            fast = fast -> next;\n        }\n        fast = fast -> next; // 这一步是为了fast与solw同时移动时，slow能停在要删除节点的上一个节点。\n\n        while (fast != nullptr)     //同时移动\n        {\n            fast = fast -> next;\n            slow = slow -> next;\n        }\n        slow -> next = slow -> next -> next;\n        return dummyHead -> next;\n    }\n};\n")])]),n._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[n._v("1")]),s("br"),s("span",{staticClass:"line-number"},[n._v("2")]),s("br"),s("span",{staticClass:"line-number"},[n._v("3")]),s("br"),s("span",{staticClass:"line-number"},[n._v("4")]),s("br"),s("span",{staticClass:"line-number"},[n._v("5")]),s("br"),s("span",{staticClass:"line-number"},[n._v("6")]),s("br"),s("span",{staticClass:"line-number"},[n._v("7")]),s("br"),s("span",{staticClass:"line-number"},[n._v("8")]),s("br"),s("span",{staticClass:"line-number"},[n._v("9")]),s("br"),s("span",{staticClass:"line-number"},[n._v("10")]),s("br"),s("span",{staticClass:"line-number"},[n._v("11")]),s("br"),s("span",{staticClass:"line-number"},[n._v("12")]),s("br"),s("span",{staticClass:"line-number"},[n._v("13")]),s("br"),s("span",{staticClass:"line-number"},[n._v("14")]),s("br"),s("span",{staticClass:"line-number"},[n._v("15")]),s("br"),s("span",{staticClass:"line-number"},[n._v("16")]),s("br"),s("span",{staticClass:"line-number"},[n._v("17")]),s("br"),s("span",{staticClass:"line-number"},[n._v("18")]),s("br"),s("span",{staticClass:"line-number"},[n._v("19")]),s("br"),s("span",{staticClass:"line-number"},[n._v("20")]),s("br"),s("span",{staticClass:"line-number"},[n._v("21")]),s("br"),s("span",{staticClass:"line-number"},[n._v("22")]),s("br"),s("span",{staticClass:"line-number"},[n._v("23")]),s("br"),s("span",{staticClass:"line-number"},[n._v("24")]),s("br"),s("span",{staticClass:"line-number"},[n._v("25")]),s("br"),s("span",{staticClass:"line-number"},[n._v("26")]),s("br"),s("span",{staticClass:"line-number"},[n._v("27")]),s("br"),s("span",{staticClass:"line-number"},[n._v("28")]),s("br"),s("span",{staticClass:"line-number"},[n._v("29")]),s("br"),s("span",{staticClass:"line-number"},[n._v("30")]),s("br"),s("span",{staticClass:"line-number"},[n._v("31")]),s("br"),s("span",{staticClass:"line-number"},[n._v("32")]),s("br"),s("span",{staticClass:"line-number"},[n._v("33")]),s("br")])]),s("h3",{attrs:{id:"链表相交-leetcode-面试题-02-07"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#链表相交-leetcode-面试题-02-07"}},[n._v("#")]),n._v(" 链表相交 leetcode 面试题 02.07")]),n._v(" "),s("p",[n._v("题目：给你两个单链表的头节点 headA 和 headB ，请你找出并返回两个单链表相交的起始节点。如果两个链表没有交点，返回 null 。")]),n._v(" "),s("p",[n._v("图示两个链表在节点 c1 开始相交：")]),n._v(" "),s("p",[n._v("题目数据 保证 整个链式结构中不存在环。")]),n._v(" "),s("p",[n._v("注意，函数返回结果后，链表必须 保持其原始结构 。")]),n._v(" "),s("p",[n._v("来源：力扣（LeetCode）\n链接：https://leetcode.cn/problems/intersection-of-two-linked-lists-lcci\n著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。")]),n._v(" "),s("p",[n._v("首先计算两条链表的长度，分别为A，B。 先将长的链表遍历A-B个节点，然后逐一对比两个指针是否相同，如果相同则找到相交点，否则继续向后遍历。")]),n._v(" "),s("div",{staticClass:"language-c++ line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[n._v("/**\n * Definition for singly-linked list.\n * struct ListNode {\n *     int val;\n *     ListNode *next;\n *     ListNode(int x) : val(x), next(NULL) {}\n * };\n */\nclass Solution {\npublic:\n    ListNode *getIntersectionNode(ListNode *headA, ListNode *headB) {\n        ListNode* curA = headA;\n        ListNode* curB = headB;\n        int lenA = 0;\n        int lenB = 0;\n        while(curA != NULL)\n        {\n            lenA++;\n            curA = curA -> next;\n        }\n\n        while(curB != NULL)\n        {\n            lenB++;\n            curB = curB -> next;\n        }\n\n        curA = headA;\n        curB = headB;\n\n        if (lenB > lenA) {\t//比较链表长度，设置curA永远为最长的链表。\n            swap (lenA, lenB);\n            swap (curA, curB);\n        }\n        // 求长度差\n        int gap = lenA - lenB;\n        // 让curA和curB在同一起点上（末尾位置对齐）\n        while (gap--) {\n            curA = curA->next;\n        }\n\n        while(curA != NULL && curB != NULL)\n        {\n            if(curA == curB)\n            {\n                return curA;\n            }\n            else\n            {\n                curA = curA -> next;\n                curB = curB -> next;\n            }\n        }\n        return NULL;\n    }\n};\n")])]),n._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[n._v("1")]),s("br"),s("span",{staticClass:"line-number"},[n._v("2")]),s("br"),s("span",{staticClass:"line-number"},[n._v("3")]),s("br"),s("span",{staticClass:"line-number"},[n._v("4")]),s("br"),s("span",{staticClass:"line-number"},[n._v("5")]),s("br"),s("span",{staticClass:"line-number"},[n._v("6")]),s("br"),s("span",{staticClass:"line-number"},[n._v("7")]),s("br"),s("span",{staticClass:"line-number"},[n._v("8")]),s("br"),s("span",{staticClass:"line-number"},[n._v("9")]),s("br"),s("span",{staticClass:"line-number"},[n._v("10")]),s("br"),s("span",{staticClass:"line-number"},[n._v("11")]),s("br"),s("span",{staticClass:"line-number"},[n._v("12")]),s("br"),s("span",{staticClass:"line-number"},[n._v("13")]),s("br"),s("span",{staticClass:"line-number"},[n._v("14")]),s("br"),s("span",{staticClass:"line-number"},[n._v("15")]),s("br"),s("span",{staticClass:"line-number"},[n._v("16")]),s("br"),s("span",{staticClass:"line-number"},[n._v("17")]),s("br"),s("span",{staticClass:"line-number"},[n._v("18")]),s("br"),s("span",{staticClass:"line-number"},[n._v("19")]),s("br"),s("span",{staticClass:"line-number"},[n._v("20")]),s("br"),s("span",{staticClass:"line-number"},[n._v("21")]),s("br"),s("span",{staticClass:"line-number"},[n._v("22")]),s("br"),s("span",{staticClass:"line-number"},[n._v("23")]),s("br"),s("span",{staticClass:"line-number"},[n._v("24")]),s("br"),s("span",{staticClass:"line-number"},[n._v("25")]),s("br"),s("span",{staticClass:"line-number"},[n._v("26")]),s("br"),s("span",{staticClass:"line-number"},[n._v("27")]),s("br"),s("span",{staticClass:"line-number"},[n._v("28")]),s("br"),s("span",{staticClass:"line-number"},[n._v("29")]),s("br"),s("span",{staticClass:"line-number"},[n._v("30")]),s("br"),s("span",{staticClass:"line-number"},[n._v("31")]),s("br"),s("span",{staticClass:"line-number"},[n._v("32")]),s("br"),s("span",{staticClass:"line-number"},[n._v("33")]),s("br"),s("span",{staticClass:"line-number"},[n._v("34")]),s("br"),s("span",{staticClass:"line-number"},[n._v("35")]),s("br"),s("span",{staticClass:"line-number"},[n._v("36")]),s("br"),s("span",{staticClass:"line-number"},[n._v("37")]),s("br"),s("span",{staticClass:"line-number"},[n._v("38")]),s("br"),s("span",{staticClass:"line-number"},[n._v("39")]),s("br"),s("span",{staticClass:"line-number"},[n._v("40")]),s("br"),s("span",{staticClass:"line-number"},[n._v("41")]),s("br"),s("span",{staticClass:"line-number"},[n._v("42")]),s("br"),s("span",{staticClass:"line-number"},[n._v("43")]),s("br"),s("span",{staticClass:"line-number"},[n._v("44")]),s("br"),s("span",{staticClass:"line-number"},[n._v("45")]),s("br"),s("span",{staticClass:"line-number"},[n._v("46")]),s("br"),s("span",{staticClass:"line-number"},[n._v("47")]),s("br"),s("span",{staticClass:"line-number"},[n._v("48")]),s("br"),s("span",{staticClass:"line-number"},[n._v("49")]),s("br"),s("span",{staticClass:"line-number"},[n._v("50")]),s("br"),s("span",{staticClass:"line-number"},[n._v("51")]),s("br"),s("span",{staticClass:"line-number"},[n._v("52")]),s("br"),s("span",{staticClass:"line-number"},[n._v("53")]),s("br"),s("span",{staticClass:"line-number"},[n._v("54")]),s("br"),s("span",{staticClass:"line-number"},[n._v("55")]),s("br"),s("span",{staticClass:"line-number"},[n._v("56")]),s("br")])]),s("h3",{attrs:{id:"环形链表ii-leetcode-142"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#环形链表ii-leetcode-142"}},[n._v("#")]),n._v(" 环形链表II leetcode 142")]),n._v(" "),s("p",[n._v("题目：给定一个链表的头节点  head ，返回链表开始入环的第一个节点。 如果链表无环，则返回 null。")]),n._v(" "),s("p",[n._v("如果链表中有某个节点，可以通过连续跟踪 next 指针再次到达，则链表中存在环。 为了表示给定链表中的环，评测系统内部使用整数 pos 来表示链表尾连接到链表中的位置（索引从 0 开始）。如果 pos 是 -1，则在该链表中没有环。注意：pos 不作为参数进行传递，仅仅是为了标识链表的实际情况。")]),n._v(" "),s("p",[n._v("不允许修改 链表。")]),n._v(" "),s("p",[n._v("示例 1：")]),n._v(" "),s("p",[n._v("输入：head = [3,2,0,-4], pos = 1\n输出：返回索引为 1 的链表节点\n解释：链表中有一个环，其尾部连接到第二个节点。")]),n._v(" "),s("p",[n._v("来源：力扣（LeetCode）\n链接：https://leetcode.cn/problems/linked-list-cycle-ii\n著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。")]),n._v(" "),s("p",[n._v("思路：")]),n._v(" "),s("p",[n._v("首先需要判断链表是否存在环！通过设置快慢指针，slow每次走一步，fast每次走两步，如果他们相遇则代表存在环。")]),n._v(" "),s("p",[n._v("确定存在环之后，判断其环入口。设置head到环入口长度为 x，环入口到fast与slow相遇到节点为 y，相遇点到环入口长度为 z。 可得：\n$$\n(x + y) * 2 = x + y + n (y + z)\n$$\n其中，n为fast在环中转的圈数。化简之后可得：\n$$\nx = (n-1)(y+z)+ z\n$$\n所以，链表中 环入口节点🟰 环中fast与slow相遇节点出发的指针与从head出发的指针相遇的节点。")]),n._v(" "),s("div",{staticClass:"language-C++ line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[n._v("/**\n * Definition for singly-linked list.\n * struct ListNode {\n *     int val;\n *     ListNode *next;\n *     ListNode(int x) : val(x), next(NULL) {}\n * };\n */\nclass Solution {\npublic:\n    ListNode *detectCycle(ListNode *head) {\n        ListNode* fast = head;\n        ListNode* slow = head;\n        while(fast != NULL && fast -> next != NULL)\t//排除无环\n        {\n            fast = fast -> next -> next; //快慢指针找出相遇点\n            slow = slow -> next;\n\n            if(slow == fast) //相遇后分别从head与相遇点出发，index相遇点为环入口\n            {\n                ListNode* index1 = head;\n                ListNode* index2 = slow;\n                while(index1 != index2)\n                {\n                    index1 = index1 -> next;\n                    index2 = index2 -> next;\n                }\n                return index1;\n            }\n        }\n        return NULL;\n    }\n};\n")])]),n._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[n._v("1")]),s("br"),s("span",{staticClass:"line-number"},[n._v("2")]),s("br"),s("span",{staticClass:"line-number"},[n._v("3")]),s("br"),s("span",{staticClass:"line-number"},[n._v("4")]),s("br"),s("span",{staticClass:"line-number"},[n._v("5")]),s("br"),s("span",{staticClass:"line-number"},[n._v("6")]),s("br"),s("span",{staticClass:"line-number"},[n._v("7")]),s("br"),s("span",{staticClass:"line-number"},[n._v("8")]),s("br"),s("span",{staticClass:"line-number"},[n._v("9")]),s("br"),s("span",{staticClass:"line-number"},[n._v("10")]),s("br"),s("span",{staticClass:"line-number"},[n._v("11")]),s("br"),s("span",{staticClass:"line-number"},[n._v("12")]),s("br"),s("span",{staticClass:"line-number"},[n._v("13")]),s("br"),s("span",{staticClass:"line-number"},[n._v("14")]),s("br"),s("span",{staticClass:"line-number"},[n._v("15")]),s("br"),s("span",{staticClass:"line-number"},[n._v("16")]),s("br"),s("span",{staticClass:"line-number"},[n._v("17")]),s("br"),s("span",{staticClass:"line-number"},[n._v("18")]),s("br"),s("span",{staticClass:"line-number"},[n._v("19")]),s("br"),s("span",{staticClass:"line-number"},[n._v("20")]),s("br"),s("span",{staticClass:"line-number"},[n._v("21")]),s("br"),s("span",{staticClass:"line-number"},[n._v("22")]),s("br"),s("span",{staticClass:"line-number"},[n._v("23")]),s("br"),s("span",{staticClass:"line-number"},[n._v("24")]),s("br"),s("span",{staticClass:"line-number"},[n._v("25")]),s("br"),s("span",{staticClass:"line-number"},[n._v("26")]),s("br"),s("span",{staticClass:"line-number"},[n._v("27")]),s("br"),s("span",{staticClass:"line-number"},[n._v("28")]),s("br"),s("span",{staticClass:"line-number"},[n._v("29")]),s("br"),s("span",{staticClass:"line-number"},[n._v("30")]),s("br"),s("span",{staticClass:"line-number"},[n._v("31")]),s("br"),s("span",{staticClass:"line-number"},[n._v("32")]),s("br"),s("span",{staticClass:"line-number"},[n._v("33")]),s("br")])])])}),[],!1,null,null,null);s.default=t.exports}}]);