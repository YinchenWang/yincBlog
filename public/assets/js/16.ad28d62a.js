(window.webpackJsonp=window.webpackJsonp||[]).push([[16],{423:function(n,s,a){"use strict";a.r(s);var t=a(2),e=Object(t.a)({},(function(){var n=this,s=n._self._c;return s("ContentSlotsDistributor",{attrs:{"slot-key":n.$parent.slotKey}},[s("h1",{attrs:{id:"day07-哈希表part02"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#day07-哈希表part02"}},[n._v("#")]),n._v(" day07 哈希表part02")]),n._v(" "),s("h3",{attrs:{id:"四数相加ii-leetcode-452"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#四数相加ii-leetcode-452"}},[n._v("#")]),n._v(" 四数相加II leetcode 452")]),n._v(" "),s("p",[n._v("题目：给你四个整数数组 nums1、nums2、nums3 和 nums4 ，数组长度都是 n ，请你计算有多少个元组 (i, j, k, l) 能满足：")]),n._v(" "),s("p",[n._v("0 <= i, j, k, l < n\nnums1[i] + nums2[j] + nums3[k] + nums4[l] == 0")]),n._v(" "),s("p",[n._v("示例 1：")]),n._v(" "),s("p",[n._v("输入：nums1 = [1,2], nums2 = [-2,-1], nums3 = [-1,2], nums4 = [0,2]\n输出：2\n解释：\n两个元组如下：")]),n._v(" "),s("ol",[s("li",[n._v("(0, 0, 0, 1) -> nums1[0] + nums2[0] + nums3[0] + nums4[1] = 1 + (-2) + (-1) + 2 = 0")]),n._v(" "),s("li",[n._v("(1, 1, 0, 0) -> nums1[1] + nums2[1] + nums3[0] + nums4[0] = 2 + (-1) + (-1) + 0 = 0")])]),n._v(" "),s("p",[n._v("来源：力扣（LeetCode）\n链接：https://leetcode.cn/problems/4sum-ii\n著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。")]),n._v(" "),s("h4",{attrs:{id:"哈希表法"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#哈希表法"}},[n._v("#")]),n._v(" 哈希表法")]),n._v(" "),s("p",[n._v("本题需要采用分组的方法，同时使用哈希法求解。通过将a,b,c,d四个数组两两相加，可以讲题目更改为类似于两数之和形式。由于题目只要求计算有多少个满足条件的元组，因此无需考虑去重的问题。")]),n._v(" "),s("p",[n._v("使用map存储a,b数组中两两相加的结果。key为和，value为出现的次数。然后遍历c,d数组，查找（0 - （c+d))是否存在于map中。如果存在则count += value。")]),n._v(" "),s("p",[n._v("分组之后该问题的时间复杂的为O(n^2)")]),n._v(" "),s("div",{staticClass:"language-c++ line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[n._v("class Solution {\npublic:\n    int fourSumCount(vector<int>& nums1, vector<int>& nums2, vector<int>& nums3, vector<int>& nums4) {\n        unordered_map<int, int> umap;\n        for(int a : nums1)\n        {\n            for(int b : nums2)\n            {\n                umap[a + b]++;\n            }\n        }\n\n        int count = 0;\n        for(int c : nums3)\n        {\n            for(int d : nums4)\n            {\n                if (umap.find(0 - (c + d)) != umap.end()) {\n                    count += umap[0 - (c + d)];\n                }\n            }\n        }\n        return count;\n    }\n};\n")])]),n._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[n._v("1")]),s("br"),s("span",{staticClass:"line-number"},[n._v("2")]),s("br"),s("span",{staticClass:"line-number"},[n._v("3")]),s("br"),s("span",{staticClass:"line-number"},[n._v("4")]),s("br"),s("span",{staticClass:"line-number"},[n._v("5")]),s("br"),s("span",{staticClass:"line-number"},[n._v("6")]),s("br"),s("span",{staticClass:"line-number"},[n._v("7")]),s("br"),s("span",{staticClass:"line-number"},[n._v("8")]),s("br"),s("span",{staticClass:"line-number"},[n._v("9")]),s("br"),s("span",{staticClass:"line-number"},[n._v("10")]),s("br"),s("span",{staticClass:"line-number"},[n._v("11")]),s("br"),s("span",{staticClass:"line-number"},[n._v("12")]),s("br"),s("span",{staticClass:"line-number"},[n._v("13")]),s("br"),s("span",{staticClass:"line-number"},[n._v("14")]),s("br"),s("span",{staticClass:"line-number"},[n._v("15")]),s("br"),s("span",{staticClass:"line-number"},[n._v("16")]),s("br"),s("span",{staticClass:"line-number"},[n._v("17")]),s("br"),s("span",{staticClass:"line-number"},[n._v("18")]),s("br"),s("span",{staticClass:"line-number"},[n._v("19")]),s("br"),s("span",{staticClass:"line-number"},[n._v("20")]),s("br"),s("span",{staticClass:"line-number"},[n._v("21")]),s("br"),s("span",{staticClass:"line-number"},[n._v("22")]),s("br"),s("span",{staticClass:"line-number"},[n._v("23")]),s("br"),s("span",{staticClass:"line-number"},[n._v("24")]),s("br"),s("span",{staticClass:"line-number"},[n._v("25")]),s("br")])]),s("h3",{attrs:{id:"赎金信-leetcode-383"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#赎金信-leetcode-383"}},[n._v("#")]),n._v(" 赎金信 leetcode 383")]),n._v(" "),s("p",[n._v("题目：给你两个字符串：ransomNote 和 magazine ，判断 ransomNote 能不能由 magazine 里面的字符构成。")]),n._v(" "),s("p",[n._v("如果可以，返回 true ；否则返回 false 。")]),n._v(" "),s("p",[n._v("magazine 中的每个字符只能在 ransomNote 中使用一次。")]),n._v(" "),s("p",[n._v("示例 1：")]),n._v(" "),s("p",[n._v('输入：ransomNote = "a", magazine = "b"\n输出：false')]),n._v(" "),s("p",[n._v("来源：力扣（LeetCode）\n链接：https://leetcode.cn/problems/ransom-note\n著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。")]),n._v(" "),s("p",[n._v("本题第一反应是类似，有效字母异位词。考虑使用map来完成，思路简单明了。看了答案后得知map维持红黑树的消耗大，还是数组方法更简单")]),n._v(" "),s("div",{staticClass:"language-c++ line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[n._v("class Solution {\npublic:\n    bool canConstruct(string ransomNote, string magazine) {\n        int letters[26] = {0};\n\n        if(ransomNote.size() > magazine.size()) //magazine长度不够组成ransomNote。\n        {\n            return false;\n        }\n\n        for(char a : magazine)\n        {\n            letters[a - 'a']++;\n        }\n\n        for(char b : ransomNote)\n        {\n            letters[b - 'a']--;\n\n            if(letters[b - 'a'] < 0)\n                return false;\n        }\n        return true;\n    }\n};\n")])]),n._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[n._v("1")]),s("br"),s("span",{staticClass:"line-number"},[n._v("2")]),s("br"),s("span",{staticClass:"line-number"},[n._v("3")]),s("br"),s("span",{staticClass:"line-number"},[n._v("4")]),s("br"),s("span",{staticClass:"line-number"},[n._v("5")]),s("br"),s("span",{staticClass:"line-number"},[n._v("6")]),s("br"),s("span",{staticClass:"line-number"},[n._v("7")]),s("br"),s("span",{staticClass:"line-number"},[n._v("8")]),s("br"),s("span",{staticClass:"line-number"},[n._v("9")]),s("br"),s("span",{staticClass:"line-number"},[n._v("10")]),s("br"),s("span",{staticClass:"line-number"},[n._v("11")]),s("br"),s("span",{staticClass:"line-number"},[n._v("12")]),s("br"),s("span",{staticClass:"line-number"},[n._v("13")]),s("br"),s("span",{staticClass:"line-number"},[n._v("14")]),s("br"),s("span",{staticClass:"line-number"},[n._v("15")]),s("br"),s("span",{staticClass:"line-number"},[n._v("16")]),s("br"),s("span",{staticClass:"line-number"},[n._v("17")]),s("br"),s("span",{staticClass:"line-number"},[n._v("18")]),s("br"),s("span",{staticClass:"line-number"},[n._v("19")]),s("br"),s("span",{staticClass:"line-number"},[n._v("20")]),s("br"),s("span",{staticClass:"line-number"},[n._v("21")]),s("br"),s("span",{staticClass:"line-number"},[n._v("22")]),s("br"),s("span",{staticClass:"line-number"},[n._v("23")]),s("br"),s("span",{staticClass:"line-number"},[n._v("24")]),s("br"),s("span",{staticClass:"line-number"},[n._v("25")]),s("br")])]),s("h3",{attrs:{id:"三数之和-leetcode-15"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#三数之和-leetcode-15"}},[n._v("#")]),n._v(" 三数之和 leetcode 15")]),n._v(" "),s("p",[n._v("题目：给你一个整数数组 nums ，判断是否存在三元组 [nums[i], nums[j], nums[k]] 满足 i != j、i != k 且 j != k ，同时还满足 nums[i] + nums[j] + nums[k] == 0 。请")]),n._v(" "),s("p",[n._v("你返回所有和为 0 且不重复的三元组。")]),n._v(" "),s("p",[n._v("注意：答案中不可以包含重复的三元组。")]),n._v(" "),s("p",[n._v("示例 1：")]),n._v(" "),s("p",[n._v("输入：nums = [-1,0,1,2,-1,-4]\n输出：[[-1,-1,2],[-1,0,1]]\n解释：\nnums[0] + nums[1] + nums[2] = (-1) + 0 + 1 = 0 。\nnums[1] + nums[2] + nums[4] = 0 + 1 + (-1) = 0 。\nnums[0] + nums[3] + nums[4] = (-1) + 2 + (-1) = 0 。\n不同的三元组是 [-1,0,1] 和 [-1,-1,2] 。\n注意，输出的顺序和三元组的顺序并不重要。")]),n._v(" "),s("p",[n._v("来源：力扣（LeetCode）\n链接：https://leetcode.cn/problems/3sum\n著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。")]),n._v(" "),s("h4",{attrs:{id:"哈希法"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#哈希法"}},[n._v("#")]),n._v(" 哈希法")]),n._v(" "),s("p",[n._v("第一想法，分组+哈希法。结果去重火葬场！！！")]),n._v(" "),s("div",{staticClass:"language-c++ line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[n._v("class Solution {\npublic:\n    vector<vector<int>> threeSum(vector<int>& nums) {\n        vector<vector<int>> result;\n        sort(nums.begin(), nums.end());\n        // 找出a + b + c = 0\n        // a = nums[i], b = nums[j], c = -(a + b)\n        for (int i = 0; i < nums.size(); i++) {\n            // 排序之后如果第一个元素已经大于零，那么不可能凑成三元组\n            if (nums[i] > 0) {\n                break;\n            }\n            if (i > 0 && nums[i] == nums[i - 1]) { //三元组元素a去重\n                continue;\n            }\n            unordered_set<int> set;\n            for (int j = i + 1; j < nums.size(); j++) {\n                if (j > i + 2\n                        && nums[j] == nums[j-1]\n                        && nums[j-1] == nums[j-2]) { // 三元组元素b去重\n                    continue;\n                }\n                int c = 0 - (nums[i] + nums[j]);\n                if (set.find(c) != set.end()) {\n                    result.push_back({nums[i], nums[j], c});\n                    set.erase(c);// 三元组元素c去重\n                } else {\n                    set.insert(nums[j]);\n                }\n            }\n        }\n        return result;\n    }\n};\n\n")])]),n._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[n._v("1")]),s("br"),s("span",{staticClass:"line-number"},[n._v("2")]),s("br"),s("span",{staticClass:"line-number"},[n._v("3")]),s("br"),s("span",{staticClass:"line-number"},[n._v("4")]),s("br"),s("span",{staticClass:"line-number"},[n._v("5")]),s("br"),s("span",{staticClass:"line-number"},[n._v("6")]),s("br"),s("span",{staticClass:"line-number"},[n._v("7")]),s("br"),s("span",{staticClass:"line-number"},[n._v("8")]),s("br"),s("span",{staticClass:"line-number"},[n._v("9")]),s("br"),s("span",{staticClass:"line-number"},[n._v("10")]),s("br"),s("span",{staticClass:"line-number"},[n._v("11")]),s("br"),s("span",{staticClass:"line-number"},[n._v("12")]),s("br"),s("span",{staticClass:"line-number"},[n._v("13")]),s("br"),s("span",{staticClass:"line-number"},[n._v("14")]),s("br"),s("span",{staticClass:"line-number"},[n._v("15")]),s("br"),s("span",{staticClass:"line-number"},[n._v("16")]),s("br"),s("span",{staticClass:"line-number"},[n._v("17")]),s("br"),s("span",{staticClass:"line-number"},[n._v("18")]),s("br"),s("span",{staticClass:"line-number"},[n._v("19")]),s("br"),s("span",{staticClass:"line-number"},[n._v("20")]),s("br"),s("span",{staticClass:"line-number"},[n._v("21")]),s("br"),s("span",{staticClass:"line-number"},[n._v("22")]),s("br"),s("span",{staticClass:"line-number"},[n._v("23")]),s("br"),s("span",{staticClass:"line-number"},[n._v("24")]),s("br"),s("span",{staticClass:"line-number"},[n._v("25")]),s("br"),s("span",{staticClass:"line-number"},[n._v("26")]),s("br"),s("span",{staticClass:"line-number"},[n._v("27")]),s("br"),s("span",{staticClass:"line-number"},[n._v("28")]),s("br"),s("span",{staticClass:"line-number"},[n._v("29")]),s("br"),s("span",{staticClass:"line-number"},[n._v("30")]),s("br"),s("span",{staticClass:"line-number"},[n._v("31")]),s("br"),s("span",{staticClass:"line-number"},[n._v("32")]),s("br"),s("span",{staticClass:"line-number"},[n._v("33")]),s("br"),s("span",{staticClass:"line-number"},[n._v("34")]),s("br"),s("span",{staticClass:"line-number"},[n._v("35")]),s("br")])]),s("h4",{attrs:{id:"双指针法"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#双指针法"}},[n._v("#")]),n._v(" 双指针法")]),n._v(" "),s("p",[n._v("先对数组进行排序，接着使用双指针法。一个指针 i 在循环时指向当前元素 。一个left指向 i+1， 一个right指向size-1.")]),n._v(" "),s("p",[n._v("当nums[i] + nums[left] + nums[right] > 0 时 right--，\n当nums[i] + nums[left] + nums[right] < 0 时 left++，\n当nums[i] + nums[left] + nums[right] = 0 时 保存结果集，")]),n._v(" "),s("p",[n._v("本题最重要的是去重，首先进行i的去重，当nums[i] == nums[i -1]时，舍弃该元组，因为已经存储，不用nums[i] == nums[i +1]是避免类似（-1， -1， 2）元组出现时将其舍弃。同时，当出现（0，-1，-1，-1，1，1，1）类型的数组时，应当只存储一个，所有此处也应当去重。")]),n._v(" "),s("div",{staticClass:"language-C++ line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[n._v("class Solution {\npublic:\n    vector<vector<int>> threeSum(vector<int>& nums) {\n        vector<vector<int>> result;\n        sort(nums.begin(), nums.end());\n        for(int i=0; i<nums.size(); i++)\n        {\n            if(nums[i] > 0) return result;      //排序后，当第一个元素>0，则该数组无法满足条件。\n\n            if(i > 0 && nums[i] == nums[i - 1]) continue;   //去重左边元素相同的情况。\n\n            int left = i + 1;\n            int right = nums.size() - 1;\n            while(left < right)\n            {\n                if (nums[i] + nums[left] + nums[right] > 0)\n                    right --;\n                else if (nums[i] + nums[left] + nums[right] < 0)\n                    left ++;\n                else\n                {\n                    result.push_back(vector<int>{nums[i], nums[left], nums[right]});    //压入结果\n                    while(left < right && nums[left] == nums[left + 1]) //向右去重left\n                        left ++;\n                    while(left < right && nums[right] == nums[right - 1])   //向左去重right\n                        right --;\n                    right --;\n                    left ++;\n                }\n            }\n        }\n        return result;\n    }\n};\n\n")])]),n._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[n._v("1")]),s("br"),s("span",{staticClass:"line-number"},[n._v("2")]),s("br"),s("span",{staticClass:"line-number"},[n._v("3")]),s("br"),s("span",{staticClass:"line-number"},[n._v("4")]),s("br"),s("span",{staticClass:"line-number"},[n._v("5")]),s("br"),s("span",{staticClass:"line-number"},[n._v("6")]),s("br"),s("span",{staticClass:"line-number"},[n._v("7")]),s("br"),s("span",{staticClass:"line-number"},[n._v("8")]),s("br"),s("span",{staticClass:"line-number"},[n._v("9")]),s("br"),s("span",{staticClass:"line-number"},[n._v("10")]),s("br"),s("span",{staticClass:"line-number"},[n._v("11")]),s("br"),s("span",{staticClass:"line-number"},[n._v("12")]),s("br"),s("span",{staticClass:"line-number"},[n._v("13")]),s("br"),s("span",{staticClass:"line-number"},[n._v("14")]),s("br"),s("span",{staticClass:"line-number"},[n._v("15")]),s("br"),s("span",{staticClass:"line-number"},[n._v("16")]),s("br"),s("span",{staticClass:"line-number"},[n._v("17")]),s("br"),s("span",{staticClass:"line-number"},[n._v("18")]),s("br"),s("span",{staticClass:"line-number"},[n._v("19")]),s("br"),s("span",{staticClass:"line-number"},[n._v("20")]),s("br"),s("span",{staticClass:"line-number"},[n._v("21")]),s("br"),s("span",{staticClass:"line-number"},[n._v("22")]),s("br"),s("span",{staticClass:"line-number"},[n._v("23")]),s("br"),s("span",{staticClass:"line-number"},[n._v("24")]),s("br"),s("span",{staticClass:"line-number"},[n._v("25")]),s("br"),s("span",{staticClass:"line-number"},[n._v("26")]),s("br"),s("span",{staticClass:"line-number"},[n._v("27")]),s("br"),s("span",{staticClass:"line-number"},[n._v("28")]),s("br"),s("span",{staticClass:"line-number"},[n._v("29")]),s("br"),s("span",{staticClass:"line-number"},[n._v("30")]),s("br"),s("span",{staticClass:"line-number"},[n._v("31")]),s("br"),s("span",{staticClass:"line-number"},[n._v("32")]),s("br"),s("span",{staticClass:"line-number"},[n._v("33")]),s("br"),s("span",{staticClass:"line-number"},[n._v("34")]),s("br"),s("span",{staticClass:"line-number"},[n._v("35")]),s("br")])]),s("h3",{attrs:{id:"四数之和-leetcode-18"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#四数之和-leetcode-18"}},[n._v("#")]),n._v(" 四数之和 leetcode 18")]),n._v(" "),s("p",[n._v("题目：给你一个由 n 个整数组成的数组 nums ，和一个目标值 target 。请你找出并返回满足下述全部条件且不重复的四元组 [nums[a], nums[b], nums[c], nums[d]] （若两个四元组元素一一对应，则认为两个四元组重复）：")]),n._v(" "),s("p",[n._v("0 <= a, b, c, d < n\na、b、c 和 d 互不相同\nnums[a] + nums[b] + nums[c] + nums[d] == target\n你可以按 任意顺序 返回答案 。")]),n._v(" "),s("p",[n._v("示例 1：")]),n._v(" "),s("p",[n._v("输入：nums = [1,0,-1,0,-2,2], target = 0\n输出：[[-2,-1,1,2],[-2,0,0,2],[-1,0,0,1]]")]),n._v(" "),s("p",[n._v("来源：力扣（LeetCode）\n链接：https://leetcode.cn/problems/4sum\n著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。")]),n._v(" "),s("p",[n._v("思路：")]),n._v(" "),s("p",[n._v("思路与三数之和相同，需要再套一个for循环，将三数之和中确定的i，在此变为确定的两个数k，i。注意进行两次剪枝与去重，其余和三数之和一样。")]),n._v(" "),s("div",{staticClass:"language-C++ line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[n._v("class Solution {\npublic:\n    vector<vector<int>> fourSum(vector<int>& nums, int target) {\n        vector<vector<int>> result;\n        sort(nums.begin(), nums.end());\n\n        for(int k=0; k<nums.size(); k++)\n        {\n            if(nums[k] > 0 && target > 0 && nums[k] > target)   break; //剪枝\n\n            if(k > 0 && nums[k] == nums[k - 1]) continue;   //k去重\n\n            for(int i = k + 1; i < nums.size() - 1; i ++)\n            {\n                if (nums[k] + nums[i] > target && nums[k] + nums[i] >= 0) break;    //二级剪枝\n\n                if(i > k + 1 && nums[i] == nums[i - 1]) continue;   //i去重\n\n                int left = i + 1;\n                int right = nums.size() - 1;\n                while(left < right)\n                {\n                    // nums[k] + nums[i] + nums[left] + nums[right] > target 会溢出\n                    if ((long) nums[k] + nums[i] + nums[left] + nums[right] > target) {\n                        right--;\n                    // nums[k] + nums[i] + nums[left] + nums[right] < target 会溢出\n                    } else if ((long) nums[k] + nums[i] + nums[left] + nums[right]  < target) {\n                        left++;\n                    } else {\n                        result.push_back(vector<int>{nums[k], nums[i], nums[left], nums[right]});\n                        // 对nums[left]和nums[right]去重\n                        while (right > left && nums[right] == nums[right - 1]) right--;\n                        while (right > left && nums[left] == nums[left + 1]) left++;\n\n                        // 找到答案时，双指针同时收缩\n                        right--;\n                        left++;\n                    }\n                }\n            }\n        }\n        return result;\n    }\n};\n")])]),n._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[n._v("1")]),s("br"),s("span",{staticClass:"line-number"},[n._v("2")]),s("br"),s("span",{staticClass:"line-number"},[n._v("3")]),s("br"),s("span",{staticClass:"line-number"},[n._v("4")]),s("br"),s("span",{staticClass:"line-number"},[n._v("5")]),s("br"),s("span",{staticClass:"line-number"},[n._v("6")]),s("br"),s("span",{staticClass:"line-number"},[n._v("7")]),s("br"),s("span",{staticClass:"line-number"},[n._v("8")]),s("br"),s("span",{staticClass:"line-number"},[n._v("9")]),s("br"),s("span",{staticClass:"line-number"},[n._v("10")]),s("br"),s("span",{staticClass:"line-number"},[n._v("11")]),s("br"),s("span",{staticClass:"line-number"},[n._v("12")]),s("br"),s("span",{staticClass:"line-number"},[n._v("13")]),s("br"),s("span",{staticClass:"line-number"},[n._v("14")]),s("br"),s("span",{staticClass:"line-number"},[n._v("15")]),s("br"),s("span",{staticClass:"line-number"},[n._v("16")]),s("br"),s("span",{staticClass:"line-number"},[n._v("17")]),s("br"),s("span",{staticClass:"line-number"},[n._v("18")]),s("br"),s("span",{staticClass:"line-number"},[n._v("19")]),s("br"),s("span",{staticClass:"line-number"},[n._v("20")]),s("br"),s("span",{staticClass:"line-number"},[n._v("21")]),s("br"),s("span",{staticClass:"line-number"},[n._v("22")]),s("br"),s("span",{staticClass:"line-number"},[n._v("23")]),s("br"),s("span",{staticClass:"line-number"},[n._v("24")]),s("br"),s("span",{staticClass:"line-number"},[n._v("25")]),s("br"),s("span",{staticClass:"line-number"},[n._v("26")]),s("br"),s("span",{staticClass:"line-number"},[n._v("27")]),s("br"),s("span",{staticClass:"line-number"},[n._v("28")]),s("br"),s("span",{staticClass:"line-number"},[n._v("29")]),s("br"),s("span",{staticClass:"line-number"},[n._v("30")]),s("br"),s("span",{staticClass:"line-number"},[n._v("31")]),s("br"),s("span",{staticClass:"line-number"},[n._v("32")]),s("br"),s("span",{staticClass:"line-number"},[n._v("33")]),s("br"),s("span",{staticClass:"line-number"},[n._v("34")]),s("br"),s("span",{staticClass:"line-number"},[n._v("35")]),s("br"),s("span",{staticClass:"line-number"},[n._v("36")]),s("br"),s("span",{staticClass:"line-number"},[n._v("37")]),s("br"),s("span",{staticClass:"line-number"},[n._v("38")]),s("br"),s("span",{staticClass:"line-number"},[n._v("39")]),s("br"),s("span",{staticClass:"line-number"},[n._v("40")]),s("br"),s("span",{staticClass:"line-number"},[n._v("41")]),s("br"),s("span",{staticClass:"line-number"},[n._v("42")]),s("br"),s("span",{staticClass:"line-number"},[n._v("43")]),s("br"),s("span",{staticClass:"line-number"},[n._v("44")]),s("br")])])])}),[],!1,null,null,null);s.default=e.exports}}]);