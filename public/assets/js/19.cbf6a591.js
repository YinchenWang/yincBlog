(window.webpackJsonp=window.webpackJsonp||[]).push([[19],{424:function(s,n,a){"use strict";a.r(n);var e=a(2),t=Object(e.a)({},(function(){var s=this,n=s._self._c;return n("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[n("h1",{attrs:{id:"day10-队列与栈-part01"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#day10-队列与栈-part01"}},[s._v("#")]),s._v(" day10 队列与栈 part01")]),s._v(" "),n("h3",{attrs:{id:"用栈实现队列-leetcode-232"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#用栈实现队列-leetcode-232"}},[s._v("#")]),s._v(" 用栈实现队列 leetcode 232")]),s._v(" "),n("p",[s._v("题目：请你仅使用两个栈实现先入先出队列。队列应当支持一般队列支持的所有操作（"),n("code",[s._v("push")]),s._v("、"),n("code",[s._v("pop")]),s._v("、"),n("code",[s._v("peek")]),s._v("、"),n("code",[s._v("empty")]),s._v("）：")]),s._v(" "),n("p",[s._v("实现 "),n("code",[s._v("MyQueue")]),s._v(" 类：")]),s._v(" "),n("ul",[n("li",[n("code",[s._v("void push(int x)")]),s._v(" 将元素 x 推到队列的末尾")]),s._v(" "),n("li",[n("code",[s._v("int pop()")]),s._v(" 从队列的开头移除并返回元素")]),s._v(" "),n("li",[n("code",[s._v("int peek()")]),s._v(" 返回队列开头的元素")]),s._v(" "),n("li",[n("code",[s._v("boolean empty()")]),s._v(" 如果队列为空，返回 "),n("code",[s._v("true")]),s._v(" ；否则，返回 "),n("code",[s._v("false")])])]),s._v(" "),n("p",[n("strong",[s._v("说明：")])]),s._v(" "),n("ul",[n("li",[s._v("你 "),n("strong",[s._v("只能")]),s._v(" 使用标准的栈操作 —— 也就是只有 "),n("code",[s._v("push to top")]),s._v(", "),n("code",[s._v("peek/pop from top")]),s._v(", "),n("code",[s._v("size")]),s._v(", 和 "),n("code",[s._v("is empty")]),s._v(" 操作是合法的。")]),s._v(" "),n("li",[s._v("你所使用的语言也许不支持栈。你可以使用 list 或者 deque（双端队列）来模拟一个栈，只要是标准的栈操作即可。")])]),s._v(" "),n("p",[s._v("思路：使用两个栈 stackIn 与 stackOut 来模拟队列。\n入队列只需要对stackIn进行push即可。\n出队列时，将stackIn中所有元素全部压入stackOut中，然后pop出stackOut的栈顶元素即可。")]),s._v(" "),n("div",{staticClass:"language-c++ line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("class MyQueue {\npublic:\n    std::stack<int> stackIn;\n    std::stack<int> stackOut;\n\n    MyQueue() {\n\n    }\n    \n    void push(int x) {\n        stackIn.push(x);\n    }\n    \n    int pop() {\n        if(stackOut.empty())\n        {\n            while(!stackIn.empty())\n            {\n                stackOut.push(stackIn.top());\n                stackIn.pop();\n            }\n        }\n        int res = stackOut.top();\n        stackOut.pop();\n        return res;\n    }\n    \n    int peek() {\n        int res = this->pop(); // 直接使用已有的pop函数\n        stackOut.push(res); // 因为pop函数弹出了元素res，所以再添加回去\n        return res;\n    }\n    \n    bool empty() {\n        return stackIn.empty() && stackOut.empty();\n    }\n};\n\n/**\n * Your MyQueue object will be instantiated and called as such:\n * MyQueue* obj = new MyQueue();\n * obj->push(x);\n * int param_2 = obj->pop();\n * int param_3 = obj->peek();\n * bool param_4 = obj->empty();\n */\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br"),n("span",{staticClass:"line-number"},[s._v("13")]),n("br"),n("span",{staticClass:"line-number"},[s._v("14")]),n("br"),n("span",{staticClass:"line-number"},[s._v("15")]),n("br"),n("span",{staticClass:"line-number"},[s._v("16")]),n("br"),n("span",{staticClass:"line-number"},[s._v("17")]),n("br"),n("span",{staticClass:"line-number"},[s._v("18")]),n("br"),n("span",{staticClass:"line-number"},[s._v("19")]),n("br"),n("span",{staticClass:"line-number"},[s._v("20")]),n("br"),n("span",{staticClass:"line-number"},[s._v("21")]),n("br"),n("span",{staticClass:"line-number"},[s._v("22")]),n("br"),n("span",{staticClass:"line-number"},[s._v("23")]),n("br"),n("span",{staticClass:"line-number"},[s._v("24")]),n("br"),n("span",{staticClass:"line-number"},[s._v("25")]),n("br"),n("span",{staticClass:"line-number"},[s._v("26")]),n("br"),n("span",{staticClass:"line-number"},[s._v("27")]),n("br"),n("span",{staticClass:"line-number"},[s._v("28")]),n("br"),n("span",{staticClass:"line-number"},[s._v("29")]),n("br"),n("span",{staticClass:"line-number"},[s._v("30")]),n("br"),n("span",{staticClass:"line-number"},[s._v("31")]),n("br"),n("span",{staticClass:"line-number"},[s._v("32")]),n("br"),n("span",{staticClass:"line-number"},[s._v("33")]),n("br"),n("span",{staticClass:"line-number"},[s._v("34")]),n("br"),n("span",{staticClass:"line-number"},[s._v("35")]),n("br"),n("span",{staticClass:"line-number"},[s._v("36")]),n("br"),n("span",{staticClass:"line-number"},[s._v("37")]),n("br"),n("span",{staticClass:"line-number"},[s._v("38")]),n("br"),n("span",{staticClass:"line-number"},[s._v("39")]),n("br"),n("span",{staticClass:"line-number"},[s._v("40")]),n("br"),n("span",{staticClass:"line-number"},[s._v("41")]),n("br"),n("span",{staticClass:"line-number"},[s._v("42")]),n("br"),n("span",{staticClass:"line-number"},[s._v("43")]),n("br"),n("span",{staticClass:"line-number"},[s._v("44")]),n("br"),n("span",{staticClass:"line-number"},[s._v("45")]),n("br"),n("span",{staticClass:"line-number"},[s._v("46")]),n("br")])]),n("h3",{attrs:{id:"用队列实现栈-leetcode-255"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#用队列实现栈-leetcode-255"}},[s._v("#")]),s._v(" 用队列实现栈 leetcode 255")]),s._v(" "),n("p",[s._v("题目：请你仅使用两个队列实现一个后入先出（LIFO）的栈，并支持普通栈的全部四种操作（"),n("code",[s._v("push")]),s._v("、"),n("code",[s._v("top")]),s._v("、"),n("code",[s._v("pop")]),s._v(" 和 "),n("code",[s._v("empty")]),s._v("）。")]),s._v(" "),n("p",[s._v("实现 "),n("code",[s._v("MyStack")]),s._v(" 类：")]),s._v(" "),n("ul",[n("li",[n("code",[s._v("void push(int x)")]),s._v(" 将元素 x 压入栈顶。")]),s._v(" "),n("li",[n("code",[s._v("int pop()")]),s._v(" 移除并返回栈顶元素。")]),s._v(" "),n("li",[n("code",[s._v("int top()")]),s._v(" 返回栈顶元素。")]),s._v(" "),n("li",[n("code",[s._v("boolean empty()")]),s._v(" 如果栈是空的，返回 "),n("code",[s._v("true")]),s._v(" ；否则，返回 "),n("code",[s._v("false")]),s._v(" 。")])]),s._v(" "),n("p",[n("strong",[s._v("注意：")])]),s._v(" "),n("ul",[n("li",[s._v("你只能使用队列的基本操作 —— 也就是 "),n("code",[s._v("push to back")]),s._v("、"),n("code",[s._v("peek/pop from front")]),s._v("、"),n("code",[s._v("size")]),s._v(" 和 "),n("code",[s._v("is empty")]),s._v(" 这些操作。")]),s._v(" "),n("li",[s._v("你所使用的语言也许不支持队列。 你可以使用 list （列表）或者 deque（双端队列）来模拟一个队列 , 只要是标准的队列操作即可。")])]),s._v(" "),n("h4",{attrs:{id:"双队列法"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#双队列法"}},[s._v("#")]),s._v(" 双队列法")]),s._v(" "),n("p",[s._v("思路：同样是使用两个队列来模拟栈，que1与que2。"),n("strong",[s._v("用两个队列que1和que2实现队列的功能，que2其实完全就是一个备份的作用")]),s._v("，把que1最后面的元素以外的元素都备份到que2，然后弹出最后面的元素，再把其他元素从que2导回que1。")]),s._v(" "),n("div",{staticClass:"language-C++ line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("class MyStack {\npublic:\n    std::queue<int> que1;\n    std::queue<int> que2;\n    MyStack() {\n\n    }\n    \n    void push(int x) {\n        que1.push(x);\n    }\n    \n    int pop() {\n        int size = que1.size();\n        size --;\n        while(size--)\n        {\n            que2.push(que1.front());\n            que1.pop();\n        }\n\n        int result = que1.front();\n        que1.pop();\n        que1 = que2;\n        while(!que2.empty())\n        {\n            que2.pop();\n        }\n        return result;\n    }\n    \n    int top() {\n        return que1.back();\n    }\n    \n    bool empty() {\n        return que1.empty();\n    }\n};\n\n/**\n * Your MyStack object will be instantiated and called as such:\n * MyStack* obj = new MyStack();\n * obj->push(x);\n * int param_2 = obj->pop();\n * int param_3 = obj->top();\n * bool param_4 = obj->empty();\n */\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br"),n("span",{staticClass:"line-number"},[s._v("13")]),n("br"),n("span",{staticClass:"line-number"},[s._v("14")]),n("br"),n("span",{staticClass:"line-number"},[s._v("15")]),n("br"),n("span",{staticClass:"line-number"},[s._v("16")]),n("br"),n("span",{staticClass:"line-number"},[s._v("17")]),n("br"),n("span",{staticClass:"line-number"},[s._v("18")]),n("br"),n("span",{staticClass:"line-number"},[s._v("19")]),n("br"),n("span",{staticClass:"line-number"},[s._v("20")]),n("br"),n("span",{staticClass:"line-number"},[s._v("21")]),n("br"),n("span",{staticClass:"line-number"},[s._v("22")]),n("br"),n("span",{staticClass:"line-number"},[s._v("23")]),n("br"),n("span",{staticClass:"line-number"},[s._v("24")]),n("br"),n("span",{staticClass:"line-number"},[s._v("25")]),n("br"),n("span",{staticClass:"line-number"},[s._v("26")]),n("br"),n("span",{staticClass:"line-number"},[s._v("27")]),n("br"),n("span",{staticClass:"line-number"},[s._v("28")]),n("br"),n("span",{staticClass:"line-number"},[s._v("29")]),n("br"),n("span",{staticClass:"line-number"},[s._v("30")]),n("br"),n("span",{staticClass:"line-number"},[s._v("31")]),n("br"),n("span",{staticClass:"line-number"},[s._v("32")]),n("br"),n("span",{staticClass:"line-number"},[s._v("33")]),n("br"),n("span",{staticClass:"line-number"},[s._v("34")]),n("br"),n("span",{staticClass:"line-number"},[s._v("35")]),n("br"),n("span",{staticClass:"line-number"},[s._v("36")]),n("br"),n("span",{staticClass:"line-number"},[s._v("37")]),n("br"),n("span",{staticClass:"line-number"},[s._v("38")]),n("br"),n("span",{staticClass:"line-number"},[s._v("39")]),n("br"),n("span",{staticClass:"line-number"},[s._v("40")]),n("br"),n("span",{staticClass:"line-number"},[s._v("41")]),n("br"),n("span",{staticClass:"line-number"},[s._v("42")]),n("br"),n("span",{staticClass:"line-number"},[s._v("43")]),n("br"),n("span",{staticClass:"line-number"},[s._v("44")]),n("br"),n("span",{staticClass:"line-number"},[s._v("45")]),n("br"),n("span",{staticClass:"line-number"},[s._v("46")]),n("br"),n("span",{staticClass:"line-number"},[s._v("47")]),n("br"),n("span",{staticClass:"line-number"},[s._v("48")]),n("br")])]),n("h4",{attrs:{id:"单队列法"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#单队列法"}},[s._v("#")]),s._v(" 单队列法：")]),s._v(" "),n("p",[s._v("思路："),n("strong",[s._v("一个队列在模拟栈弹出元素的时候只要将队列头部的元素（除了最后一个元素外） 重新添加到队列尾部，此时再去弹出元素就是栈的顺序了。")])]),s._v(" "),n("div",{staticClass:"language-C++ line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("class MyStack {\npublic:\n    std::queue<int> que;\n    std::queue<int> que2;\n    MyStack() {\n\n    }\n    \n    void push(int x) {\n        que.push(x);\n    }\n    \n    int pop() {\n        int size = que.size();\n        size --;\n        while(size--)\n        {\n            que.push(que.front());\n            que.pop();\n        }\n\n        int result = que.front();\n        que.pop();\n        return result;\n    }\n    \n    int top() {\n        return que.back();\n    }\n    \n    bool empty() {\n        return que.empty();\n    }\n};\n\n/**\n * Your MyStack object will be instantiated and called as such:\n * MyStack* obj = new MyStack();\n * obj->push(x);\n * int param_2 = obj->pop();\n * int param_3 = obj->top();\n * bool param_4 = obj->empty();\n */\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br"),n("span",{staticClass:"line-number"},[s._v("13")]),n("br"),n("span",{staticClass:"line-number"},[s._v("14")]),n("br"),n("span",{staticClass:"line-number"},[s._v("15")]),n("br"),n("span",{staticClass:"line-number"},[s._v("16")]),n("br"),n("span",{staticClass:"line-number"},[s._v("17")]),n("br"),n("span",{staticClass:"line-number"},[s._v("18")]),n("br"),n("span",{staticClass:"line-number"},[s._v("19")]),n("br"),n("span",{staticClass:"line-number"},[s._v("20")]),n("br"),n("span",{staticClass:"line-number"},[s._v("21")]),n("br"),n("span",{staticClass:"line-number"},[s._v("22")]),n("br"),n("span",{staticClass:"line-number"},[s._v("23")]),n("br"),n("span",{staticClass:"line-number"},[s._v("24")]),n("br"),n("span",{staticClass:"line-number"},[s._v("25")]),n("br"),n("span",{staticClass:"line-number"},[s._v("26")]),n("br"),n("span",{staticClass:"line-number"},[s._v("27")]),n("br"),n("span",{staticClass:"line-number"},[s._v("28")]),n("br"),n("span",{staticClass:"line-number"},[s._v("29")]),n("br"),n("span",{staticClass:"line-number"},[s._v("30")]),n("br"),n("span",{staticClass:"line-number"},[s._v("31")]),n("br"),n("span",{staticClass:"line-number"},[s._v("32")]),n("br"),n("span",{staticClass:"line-number"},[s._v("33")]),n("br"),n("span",{staticClass:"line-number"},[s._v("34")]),n("br"),n("span",{staticClass:"line-number"},[s._v("35")]),n("br"),n("span",{staticClass:"line-number"},[s._v("36")]),n("br"),n("span",{staticClass:"line-number"},[s._v("37")]),n("br"),n("span",{staticClass:"line-number"},[s._v("38")]),n("br"),n("span",{staticClass:"line-number"},[s._v("39")]),n("br"),n("span",{staticClass:"line-number"},[s._v("40")]),n("br"),n("span",{staticClass:"line-number"},[s._v("41")]),n("br"),n("span",{staticClass:"line-number"},[s._v("42")]),n("br"),n("span",{staticClass:"line-number"},[s._v("43")]),n("br")])])])}),[],!1,null,null,null);n.default=t.exports}}]);