(window.webpackJsonp=window.webpackJsonp||[]).push([[21],{429:function(s,n,a){"use strict";a.r(n);var e=a(2),t=Object(e.a)({},(function(){var s=this,n=s._self._c;return n("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[n("h1",{attrs:{id:"day13-队列与栈-part03"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#day13-队列与栈-part03"}},[s._v("#")]),s._v(" Day13 队列与栈 part03")]),s._v(" "),n("h3",{attrs:{id:"滑动窗口的最大值-leetcode-239"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#滑动窗口的最大值-leetcode-239"}},[s._v("#")]),s._v(" 滑动窗口的最大值 leetcode 239")]),s._v(" "),n("p",[s._v("题目：给你一个整数数组 "),n("code",[s._v("nums")]),s._v("，有一个大小为 "),n("code",[s._v("k")]),s._v(" 的滑动窗口从数组的最左侧移动到数组的最右侧。你只可以看到在滑动窗口内的 "),n("code",[s._v("k")]),s._v(" 个数字。滑动窗口每次只向右移动一位。")]),s._v(" "),n("p",[s._v("返回 "),n("em",[s._v("滑动窗口中的最大值")]),s._v(" 。")]),s._v(" "),n("p",[n("strong",[s._v("示例 1：")])]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("输入：nums = [1,3,-1,-3,5,3,6,7], k = 3\n输出：[3,3,5,5,6,7]\n解释：\n滑动窗口的位置                最大值\n---------------               -----\n[1  3  -1] -3  5  3  6  7       3\n 1 [3  -1  -3] 5  3  6  7       3\n 1  3 [-1  -3  5] 3  6  7       5\n 1  3  -1 [-3  5  3] 6  7       5\n 1  3  -1  -3 [5  3  6] 7       6\n 1  3  -1  -3  5 [3  6  7]      7\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br")])]),n("p",[s._v("思路：没有太懂，需要复习！！！！")]),s._v(" "),n("p",[s._v("https://programmercarl.com/0239.%E6%BB%91%E5%8A%A8%E7%AA%97%E5%8F%A3%E6%9C%80%E5%A4%A7%E5%80%BC.html")]),s._v(" "),n("div",{staticClass:"language-c++ line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("class Solution {\nprivate:\n    class Myque{\n        public:\n        deque<int> que; // 使用deque来实现单调队列\n        // 每次弹出的时候，比较当前要弹出的数值是否等于队列出口元素的数值，如果相等则弹出。\n        // 同时pop之前判断队列当前是否为空。\n        void pop(int value) {\n            if (!que.empty() && value == que.front()) {\n                que.pop_front();\n            }\n        }\n        // 如果push的数值大于入口元素的数值，那么就将队列后端的数值弹出，直到push的数值小于等于队列入口元素的数值为止。\n        // 这样就保持了队列里的数值是单调从大到小的了。\n        void push(int value) {\n            while (!que.empty() && value > que.back()) {\n                que.pop_back();\n            }\n            que.push_back(value);\n        }\n        // 查询当前队列里的最大值 直接返回队列前端也就是front就可以了。\n        int front() {\n            return que.front();\n        }\n    };\npublic:\n    vector<int> maxSlidingWindow(vector<int>& nums, int k) {\n        Myque que;\n        vector<int> result;\n        for(int i=0; i<k; i++)      //将k个元素放入队列\n        {\n            que.push(nums[i]);\n        }\n        result.push_back(que.front());  //将当前窗口内最大值放入结果集。\n        for(int i = k; i < nums.size(); i++)\n        {\n            que.pop(nums[i - k]); // 滑动窗口移除最前面元素\n            que.push(nums[i]); // 滑动窗口前加入最后面的元素\n            result.push_back(que.front()); // 记录对应的最大值\n        }\n        return result;\n    }\n};\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br"),n("span",{staticClass:"line-number"},[s._v("13")]),n("br"),n("span",{staticClass:"line-number"},[s._v("14")]),n("br"),n("span",{staticClass:"line-number"},[s._v("15")]),n("br"),n("span",{staticClass:"line-number"},[s._v("16")]),n("br"),n("span",{staticClass:"line-number"},[s._v("17")]),n("br"),n("span",{staticClass:"line-number"},[s._v("18")]),n("br"),n("span",{staticClass:"line-number"},[s._v("19")]),n("br"),n("span",{staticClass:"line-number"},[s._v("20")]),n("br"),n("span",{staticClass:"line-number"},[s._v("21")]),n("br"),n("span",{staticClass:"line-number"},[s._v("22")]),n("br"),n("span",{staticClass:"line-number"},[s._v("23")]),n("br"),n("span",{staticClass:"line-number"},[s._v("24")]),n("br"),n("span",{staticClass:"line-number"},[s._v("25")]),n("br"),n("span",{staticClass:"line-number"},[s._v("26")]),n("br"),n("span",{staticClass:"line-number"},[s._v("27")]),n("br"),n("span",{staticClass:"line-number"},[s._v("28")]),n("br"),n("span",{staticClass:"line-number"},[s._v("29")]),n("br"),n("span",{staticClass:"line-number"},[s._v("30")]),n("br"),n("span",{staticClass:"line-number"},[s._v("31")]),n("br"),n("span",{staticClass:"line-number"},[s._v("32")]),n("br"),n("span",{staticClass:"line-number"},[s._v("33")]),n("br"),n("span",{staticClass:"line-number"},[s._v("34")]),n("br"),n("span",{staticClass:"line-number"},[s._v("35")]),n("br"),n("span",{staticClass:"line-number"},[s._v("36")]),n("br"),n("span",{staticClass:"line-number"},[s._v("37")]),n("br"),n("span",{staticClass:"line-number"},[s._v("38")]),n("br"),n("span",{staticClass:"line-number"},[s._v("39")]),n("br"),n("span",{staticClass:"line-number"},[s._v("40")]),n("br"),n("span",{staticClass:"line-number"},[s._v("41")]),n("br"),n("span",{staticClass:"line-number"},[s._v("42")]),n("br"),n("span",{staticClass:"line-number"},[s._v("43")]),n("br")])]),n("h3",{attrs:{id:"前k个高频元素-leetcode-347"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#前k个高频元素-leetcode-347"}},[s._v("#")]),s._v(" 前K个高频元素 leetcode 347")]),s._v(" "),n("p",[s._v("题目：给你一个整数数组 "),n("code",[s._v("nums")]),s._v(" 和一个整数 "),n("code",[s._v("k")]),s._v(" ，请你返回其中出现频率前 "),n("code",[s._v("k")]),s._v(" 高的元素。你可以按 "),n("strong",[s._v("任意顺序")]),s._v(" 返回答案。")]),s._v(" "),n("p",[n("strong",[s._v("示例 1:")])]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("输入: nums = [1,1,1,2,2,3], k = 2\n输出: [1,2]\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br")])]),n("p",[s._v("思路：使用map存储元素与其对应的频率，接着使用"),n("strong",[s._v("小根堆")]),s._v("存储，即可得出前K个高频元素。（使用小根堆的原因是，使用大根堆每次都会把最大值pop出去，使用小根堆每次pop最小值，最后剩下的就是需求的K个高频元素）")]),s._v(" "),n("p",[s._v("C++中，优先队列就是使用大根堆实现的，这里将其更改为小根堆。")]),s._v(" "),n("div",{staticClass:"language-C++ line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("class Solution {\npublic:\n class mycomparison {\n    public:\n        bool operator()(const pair<int, int>& lhs, const pair<int, int>& rhs) {\n            return lhs.second > rhs.second;\n        }\n    };\n    vector<int> topKFrequent(vector<int>& nums, int k) {\n        // 要统计元素出现频率\n        unordered_map<int, int> map; // map<nums[i],对应出现的次数>\n        for (int i = 0; i < nums.size(); i++) {\n            map[nums[i]]++;\n        }\n\n        // 对频率排序\n        // 定义一个小顶堆，大小为k\n        priority_queue<pair<int, int>, vector<pair<int, int>>, mycomparison> pri_que;\n\n        // 用固定大小为k的小顶堆，扫面所有频率的数值\n        for (unordered_map<int, int>::iterator it = map.begin(); it != map.end(); it++) {\n            pri_que.push(*it);\n            if (pri_que.size() > k) { // 如果堆的大小大于了K，则队列弹出，保证堆的大小一直为k\n                pri_que.pop();\n            }\n        }\n\n        // 找出前K个高频元素，因为小顶堆先弹出的是最小的，所以倒序来输出到数组\n        vector<int> result(k);\n        for (int i = k - 1; i >= 0; i--) {\n            result[i] = pri_que.top().first;\n            pri_que.pop();\n        }\n        return result;\n\n    }\n};\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br"),n("span",{staticClass:"line-number"},[s._v("13")]),n("br"),n("span",{staticClass:"line-number"},[s._v("14")]),n("br"),n("span",{staticClass:"line-number"},[s._v("15")]),n("br"),n("span",{staticClass:"line-number"},[s._v("16")]),n("br"),n("span",{staticClass:"line-number"},[s._v("17")]),n("br"),n("span",{staticClass:"line-number"},[s._v("18")]),n("br"),n("span",{staticClass:"line-number"},[s._v("19")]),n("br"),n("span",{staticClass:"line-number"},[s._v("20")]),n("br"),n("span",{staticClass:"line-number"},[s._v("21")]),n("br"),n("span",{staticClass:"line-number"},[s._v("22")]),n("br"),n("span",{staticClass:"line-number"},[s._v("23")]),n("br"),n("span",{staticClass:"line-number"},[s._v("24")]),n("br"),n("span",{staticClass:"line-number"},[s._v("25")]),n("br"),n("span",{staticClass:"line-number"},[s._v("26")]),n("br"),n("span",{staticClass:"line-number"},[s._v("27")]),n("br"),n("span",{staticClass:"line-number"},[s._v("28")]),n("br"),n("span",{staticClass:"line-number"},[s._v("29")]),n("br"),n("span",{staticClass:"line-number"},[s._v("30")]),n("br"),n("span",{staticClass:"line-number"},[s._v("31")]),n("br"),n("span",{staticClass:"line-number"},[s._v("32")]),n("br"),n("span",{staticClass:"line-number"},[s._v("33")]),n("br"),n("span",{staticClass:"line-number"},[s._v("34")]),n("br"),n("span",{staticClass:"line-number"},[s._v("35")]),n("br"),n("span",{staticClass:"line-number"},[s._v("36")]),n("br"),n("span",{staticClass:"line-number"},[s._v("37")]),n("br")])]),n("h3",{attrs:{id:"逆波兰表达式-leetcode-150"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#逆波兰表达式-leetcode-150"}},[s._v("#")]),s._v(" 逆波兰表达式 leetcode 150")]),s._v(" "),n("p",[s._v("逆波兰表达式是一种后缀表达式，所谓后缀就是指算符写在后面。")]),s._v(" "),n("ul",[n("li",[s._v("平常使用的算式则是一种中缀表达式，如 "),n("code",[s._v("( 1 + 2 ) * ( 3 + 4 )")]),s._v(" 。")]),s._v(" "),n("li",[s._v("该算式的逆波兰表达式写法为 "),n("code",[s._v("( ( 1 2 + ) ( 3 4 + ) * )")])])]),s._v(" "),n("p",[s._v("逆波兰表达式主要有以下两个优点：")]),s._v(" "),n("ul",[n("li",[s._v("去掉括号后表达式无歧义，上式即便写成 "),n("code",[s._v("1 2 + 3 4 + *")]),s._v("也可以依据次序计算出正确结果。")]),s._v(" "),n("li",[s._v("适合用栈操作运算：遇到数字则入栈；遇到算符则取出栈顶两个数字进行计算，并将结果压入栈中")])]),s._v(" "),n("p",[s._v("题目：给你一个字符串数组 "),n("code",[s._v("tokens")]),s._v(" ，表示一个根据 "),n("a",{attrs:{href:"https://baike.baidu.com/item/%E9%80%86%E6%B3%A2%E5%85%B0%E5%BC%8F/128437",target:"_blank",rel:"noopener noreferrer"}},[s._v("逆波兰表示法"),n("OutboundLink")],1),s._v(" 表示的算术表达式。")]),s._v(" "),n("p",[s._v("请你计算该表达式。返回一个表示表达式值的整数。")]),s._v(" "),n("p",[n("strong",[s._v("注意：")])]),s._v(" "),n("ul",[n("li",[s._v("有效的算符为 "),n("code",[s._v("'+'")]),s._v("、"),n("code",[s._v("'-'")]),s._v("、"),n("code",[s._v("'*'")]),s._v(" 和 "),n("code",[s._v("'/'")]),s._v(" 。")]),s._v(" "),n("li",[s._v("每个操作数（运算对象）都可以是一个整数或者另一个表达式。")]),s._v(" "),n("li",[s._v("两个整数之间的除法总是 "),n("strong",[s._v("向零截断")]),s._v(" 。")]),s._v(" "),n("li",[s._v("表达式中不含除零运算。")]),s._v(" "),n("li",[s._v("输入是一个根据逆波兰表示法表示的算术表达式。")]),s._v(" "),n("li",[s._v("答案及所有中间计算结果可以用 "),n("strong",[s._v("32 位")]),s._v(" 整数表示。")])]),s._v(" "),n("p",[s._v("思路：遍历字符串，遇见数字则压栈，遇见运算符计算然后压栈。")]),s._v(" "),n("div",{staticClass:"language-C++ line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v('class Solution {\npublic:\n    int evalRPN(vector<string>& tokens) {\n        std::stack<long long> st;\n        for( int i = 0; i < tokens.size(); i ++)\n        {\n            if(tokens[i] == "+" || tokens[i] == "-" || tokens[i] == "*" || tokens[i] == "/")\n            {\n                long long num1 = st.top();\n                st.pop();\n                long long num2 = st.top();\n                st.pop();\n                if (tokens[i] == "+") st.push(num2 + num1);\n                if (tokens[i] == "-") st.push(num2 - num1);\n                if (tokens[i] == "*") st.push(num2 * num1);\n                if (tokens[i] == "/") st.push(num2 / num1);\n            }\n            else\n            {\n                st.push(stoll(tokens[i]));  //stoll 将字符串转换为long long类型\n            }\n        }\n        int result = st.top();\n        st.pop();\n        return result;\n    }\n};\n')])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br"),n("span",{staticClass:"line-number"},[s._v("13")]),n("br"),n("span",{staticClass:"line-number"},[s._v("14")]),n("br"),n("span",{staticClass:"line-number"},[s._v("15")]),n("br"),n("span",{staticClass:"line-number"},[s._v("16")]),n("br"),n("span",{staticClass:"line-number"},[s._v("17")]),n("br"),n("span",{staticClass:"line-number"},[s._v("18")]),n("br"),n("span",{staticClass:"line-number"},[s._v("19")]),n("br"),n("span",{staticClass:"line-number"},[s._v("20")]),n("br"),n("span",{staticClass:"line-number"},[s._v("21")]),n("br"),n("span",{staticClass:"line-number"},[s._v("22")]),n("br"),n("span",{staticClass:"line-number"},[s._v("23")]),n("br"),n("span",{staticClass:"line-number"},[s._v("24")]),n("br"),n("span",{staticClass:"line-number"},[s._v("25")]),n("br"),n("span",{staticClass:"line-number"},[s._v("26")]),n("br"),n("span",{staticClass:"line-number"},[s._v("27")]),n("br")])])])}),[],!1,null,null,null);n.default=t.exports}}]);