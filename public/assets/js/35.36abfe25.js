(window.webpackJsonp=window.webpackJsonp||[]).push([[35],{439:function(s,n,a){"use strict";a.r(n);var e=a(2),t=Object(e.a)({},(function(){var s=this,n=s._self._c;return n("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[n("h1",{attrs:{id:"day29-回溯-part05"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#day29-回溯-part05"}},[s._v("#")]),s._v(" Day29 回溯 part05")]),s._v(" "),n("h3",{attrs:{id:"回溯算法理论基础"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#回溯算法理论基础"}},[s._v("#")]),s._v(" 回溯算法理论基础")]),s._v(" "),n("p",[s._v("回溯的本质是穷举！穷举所有可能，然后选出想要的答案")]),s._v(" "),n("p",[n("strong",[s._v("解决的问题：")])]),s._v(" "),n("ul",[n("li",[s._v("组合问题: N个数里按照一定规则找出K个数的集合")]),s._v(" "),n("li",[s._v("切割问题：一个字符串按一定规则右几种切割方式")]),s._v(" "),n("li",[s._v("子集问题：一个N个数的集合里有多少种符合条件的子集")]),s._v(" "),n("li",[s._v("排列问题：N个数按一定规则全排列，有几种排列方式")]),s._v(" "),n("li",[s._v("棋盘问题：N皇后、解数独。。。")])]),s._v(" "),n("p",[n("strong",[s._v("理解回溯：")])]),s._v(" "),n("p",[s._v("回溯法可抽象的理解为树形问题")]),s._v(" "),n("p",[s._v("因为回溯法的解决都是在集合中递归查找子集，集合的大小就构成了树的宽度，递归的深度就是树的深度。")]),s._v(" "),n("p",[n("strong",[s._v("回溯法模版：")])]),s._v(" "),n("div",{staticClass:"language-C++ line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("void backtracking(参数)\n{\n  if (终止条件)\n  {\n    存放结果;\n    return;\n  }\n  \n  for(选择：本层集合中元素(书中节点孩子的数量就是集合的大小))\n  {\n    处理节点；\n    backtracking(路径，选则列表);\t//递归\n    回溯，撤销处理结果；\n  }\n}\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br"),n("span",{staticClass:"line-number"},[s._v("13")]),n("br"),n("span",{staticClass:"line-number"},[s._v("14")]),n("br"),n("span",{staticClass:"line-number"},[s._v("15")]),n("br")])]),n("h3",{attrs:{id:"递增子序列-leetcode-491"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#递增子序列-leetcode-491"}},[s._v("#")]),s._v(" 递增子序列 leetcode 491")]),s._v(" "),n("p",[s._v("题目：给你一个整数数组 "),n("code",[s._v("nums")]),s._v(" ，找出并返回所有该数组中不同的递增子序列，递增子序列中 "),n("strong",[s._v("至少有两个元素")]),s._v(" 。你可以按 "),n("strong",[s._v("任意顺序")]),s._v(" 返回答案。")]),s._v(" "),n("p",[s._v("数组中可能含有重复元素，如出现两个整数相等，也可以视作递增序列的一种特殊情况。")]),s._v(" "),n("p",[n("strong",[s._v("示例 1：")])]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("输入：nums = [4,6,7,7]\n输出：[[4,6],[4,6,7],[4,6,7,7],[4,7],[4,7,7],[6,7],[6,7,7],[7,7]]\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br")])]),n("p",[s._v("思路：第一想法是排序后找（😂）不能排序，会改变顺序增加没有的结果！")]),s._v(" "),n("p",[s._v("浓眉大眼的竟然背叛GM！用set来去重可还行！其他的就照旧了（用数组做哈希其实更快")]),s._v(" "),n("div",{staticClass:"language-C++ line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("class Solution {\nprivate:\n    vector<int> path;\n    vector<vector<int>> result;\n\n    void backtracking(vector<int>& nums, int startIndex)\n    {\n        if(path.size() >= 2)\n        {\n            result.push_back(path);\n        }\n\n        unordered_set<int> uset;\n        for(int i = startIndex; i < nums.size(); i++)\n        {\n            if ((!path.empty() && nums[i] < path.back())    //去重与非递增序列\n                    || uset.find(nums[i]) != uset.end()) {\n                    continue;\n            }\n            uset.insert(nums[i]);   //使用过的数加入set中\n            path.push_back(nums[i]);\n            backtracking(nums, i  + 1);\n            path.pop_back();\n        }\n    }\npublic:\n    vector<vector<int>> findSubsequences(vector<int>& nums) {\n        backtracking(nums, 0);\n        return result;\n    }\n};\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br"),n("span",{staticClass:"line-number"},[s._v("13")]),n("br"),n("span",{staticClass:"line-number"},[s._v("14")]),n("br"),n("span",{staticClass:"line-number"},[s._v("15")]),n("br"),n("span",{staticClass:"line-number"},[s._v("16")]),n("br"),n("span",{staticClass:"line-number"},[s._v("17")]),n("br"),n("span",{staticClass:"line-number"},[s._v("18")]),n("br"),n("span",{staticClass:"line-number"},[s._v("19")]),n("br"),n("span",{staticClass:"line-number"},[s._v("20")]),n("br"),n("span",{staticClass:"line-number"},[s._v("21")]),n("br"),n("span",{staticClass:"line-number"},[s._v("22")]),n("br"),n("span",{staticClass:"line-number"},[s._v("23")]),n("br"),n("span",{staticClass:"line-number"},[s._v("24")]),n("br"),n("span",{staticClass:"line-number"},[s._v("25")]),n("br"),n("span",{staticClass:"line-number"},[s._v("26")]),n("br"),n("span",{staticClass:"line-number"},[s._v("27")]),n("br"),n("span",{staticClass:"line-number"},[s._v("28")]),n("br"),n("span",{staticClass:"line-number"},[s._v("29")]),n("br"),n("span",{staticClass:"line-number"},[s._v("30")]),n("br"),n("span",{staticClass:"line-number"},[s._v("31")]),n("br")])]),n("h3",{attrs:{id:"全排列-leetcode-46"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#全排列-leetcode-46"}},[s._v("#")]),s._v(" 全排列 leetcode 46")]),s._v(" "),n("p",[s._v("题目：给定一个不含重复数字的数组 "),n("code",[s._v("nums")]),s._v(" ，返回其 "),n("em",[s._v("所有可能的全排列")]),s._v(" 。你可以 "),n("strong",[s._v("按任意顺序")]),s._v(" 返回答案。")]),s._v(" "),n("p",[n("strong",[s._v("示例 1：")])]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("输入：nums = [1,2,3]\n输出：[[1,2,3],[1,3,2],[2,1,3],[2,3,1],[3,1,2],[3,2,1]]\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br")])]),n("p",[n("strong",[s._v("示例 2：")])]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("输入：nums = [0,1]\n输出：[[0,1],[1,0]]\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br")])]),n("p",[n("strong",[s._v("示例 3：")])]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("输入：nums = [1]\n输出：[[1]]\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br")])]),n("p",[n("strong",[s._v("提示：")])]),s._v(" "),n("ul",[n("li",[n("code",[s._v("1 <= nums.length <= 6")])]),s._v(" "),n("li",[n("code",[s._v("-10 <= nums[i] <= 10")])]),s._v(" "),n("li",[n("code",[s._v("nums")]),s._v(" 中的所有整数 "),n("strong",[s._v("互不相同")])])]),s._v(" "),n("p",[s._v("思路：排列问题，注意顺序不同则不同！其他很简单，使用used来记录某个数字被使用过，取数正常取就是（开始没转过弯）。")]),s._v(" "),n("div",{staticClass:"language-C++ line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("class Solution {\nprivate:\n    vector<int> path;\n    vector<vector<int>> res;\n\n    void backtracking(vector<int>& nums, vector<bool>& used)\n    {\n        if(path.size() == nums.size())\n        {\n            res.push_back(path);\n            return;\n        }\n\n        for(int i = 0; i < nums.size(); i++)\n        {\n            if(used[i] == true) continue;\n            used[i] = true;\n            path.push_back(nums[i]);\n            backtracking(nums, used);\n            path.pop_back();\n            used[i] = false;\n        }\n    }\npublic:\n    vector<vector<int>> permute(vector<int>& nums) {\n        vector<bool> used(nums.size(), false);\n        backtracking(nums, used);\n        return res;\n    }\n};\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br"),n("span",{staticClass:"line-number"},[s._v("13")]),n("br"),n("span",{staticClass:"line-number"},[s._v("14")]),n("br"),n("span",{staticClass:"line-number"},[s._v("15")]),n("br"),n("span",{staticClass:"line-number"},[s._v("16")]),n("br"),n("span",{staticClass:"line-number"},[s._v("17")]),n("br"),n("span",{staticClass:"line-number"},[s._v("18")]),n("br"),n("span",{staticClass:"line-number"},[s._v("19")]),n("br"),n("span",{staticClass:"line-number"},[s._v("20")]),n("br"),n("span",{staticClass:"line-number"},[s._v("21")]),n("br"),n("span",{staticClass:"line-number"},[s._v("22")]),n("br"),n("span",{staticClass:"line-number"},[s._v("23")]),n("br"),n("span",{staticClass:"line-number"},[s._v("24")]),n("br"),n("span",{staticClass:"line-number"},[s._v("25")]),n("br"),n("span",{staticClass:"line-number"},[s._v("26")]),n("br"),n("span",{staticClass:"line-number"},[s._v("27")]),n("br"),n("span",{staticClass:"line-number"},[s._v("28")]),n("br"),n("span",{staticClass:"line-number"},[s._v("29")]),n("br"),n("span",{staticClass:"line-number"},[s._v("30")]),n("br")])]),n("h3",{attrs:{id:"全排列ii-leetcode-47"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#全排列ii-leetcode-47"}},[s._v("#")]),s._v(" 全排列II leetcode 47")]),s._v(" "),n("p",[s._v("题目：给定一个可包含重复数字的序列 "),n("code",[s._v("nums")]),s._v(" ，"),n("em",[n("strong",[s._v("按任意顺序")])]),s._v(" 返回所有不重复的全排列。")]),s._v(" "),n("p",[n("strong",[s._v("示例 1：")])]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("输入：nums = [1,1,2]\n输出：\n[[1,1,2],\n [1,2,1],\n [2,1,1]]\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br")])]),n("p",[n("strong",[s._v("示例 2：")])]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("输入：nums = [1,2,3]\n输出：[[1,2,3],[1,3,2],[2,1,3],[2,3,1],[3,1,2],[3,2,1]]\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br")])]),n("p",[n("strong",[s._v("提示：")])]),s._v(" "),n("ul",[n("li",[n("code",[s._v("1 <= nums.length <= 8")])]),s._v(" "),n("li",[n("code",[s._v("-10 <= nums[i] <= 10")])])]),s._v(" "),n("p",[s._v("思路：全排列，但需要树层去重（去除重复序列）")]),s._v(" "),n("p",[s._v("​\t\t\t树层去重别忘了对数组进行排序！！！！！！！")]),s._v(" "),n("div",{staticClass:"language-C++ line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("class Solution {\nprivate:\n    vector<int> path;\n    vector<vector<int>> res;\n\n    void backtracking(vector<int>& nums, vector<bool>& used)\n    {\n        if(path.size() == nums.size())\n        {\n            res.push_back(path);\n            return;\n        }\n\n        for(int i = 0; i < nums.size(); i++)\n        {\n            if(i > 0 && nums[i] == nums[i - 1] && used[i - 1] == false) continue;      //树层去重\n            if(used[i] == false)\n            {\n                used[i] = true;\n                path.push_back(nums[i]);\n                backtracking(nums, used);\n                path.pop_back();\n                used[i] = false;\n            }\n            \n        }\n    }\npublic:\n    vector<vector<int>> permuteUnique(vector<int>& nums) {\n        vector<bool> used(nums.size(), false);\n        sort(nums.begin(), nums.end());\n        backtracking(nums, used);\n        return res;\n    }\n};\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br"),n("span",{staticClass:"line-number"},[s._v("13")]),n("br"),n("span",{staticClass:"line-number"},[s._v("14")]),n("br"),n("span",{staticClass:"line-number"},[s._v("15")]),n("br"),n("span",{staticClass:"line-number"},[s._v("16")]),n("br"),n("span",{staticClass:"line-number"},[s._v("17")]),n("br"),n("span",{staticClass:"line-number"},[s._v("18")]),n("br"),n("span",{staticClass:"line-number"},[s._v("19")]),n("br"),n("span",{staticClass:"line-number"},[s._v("20")]),n("br"),n("span",{staticClass:"line-number"},[s._v("21")]),n("br"),n("span",{staticClass:"line-number"},[s._v("22")]),n("br"),n("span",{staticClass:"line-number"},[s._v("23")]),n("br"),n("span",{staticClass:"line-number"},[s._v("24")]),n("br"),n("span",{staticClass:"line-number"},[s._v("25")]),n("br"),n("span",{staticClass:"line-number"},[s._v("26")]),n("br"),n("span",{staticClass:"line-number"},[s._v("27")]),n("br"),n("span",{staticClass:"line-number"},[s._v("28")]),n("br"),n("span",{staticClass:"line-number"},[s._v("29")]),n("br"),n("span",{staticClass:"line-number"},[s._v("30")]),n("br"),n("span",{staticClass:"line-number"},[s._v("31")]),n("br"),n("span",{staticClass:"line-number"},[s._v("32")]),n("br"),n("span",{staticClass:"line-number"},[s._v("33")]),n("br"),n("span",{staticClass:"line-number"},[s._v("34")]),n("br"),n("span",{staticClass:"line-number"},[s._v("35")]),n("br")])])])}),[],!1,null,null,null);n.default=t.exports}}]);