(window.webpackJsonp=window.webpackJsonp||[]).push([[35],{442:function(s,n,a){"use strict";a.r(n);var t=a(2),e=Object(t.a)({},(function(){var s=this,n=s._self._c;return n("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[n("h1",{attrs:{id:"day28-回溯-part04"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#day28-回溯-part04"}},[s._v("#")]),s._v(" Day28 回溯 part04")]),s._v(" "),n("h3",{attrs:{id:"回溯算法理论基础"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#回溯算法理论基础"}},[s._v("#")]),s._v(" 回溯算法理论基础")]),s._v(" "),n("p",[s._v("回溯的本质是穷举！穷举所有可能，然后选出想要的答案")]),s._v(" "),n("p",[n("strong",[s._v("解决的问题：")])]),s._v(" "),n("ul",[n("li",[s._v("组合问题: N个数里按照一定规则找出K个数的集合")]),s._v(" "),n("li",[s._v("切割问题：一个字符串按一定规则右几种切割方式")]),s._v(" "),n("li",[s._v("子集问题：一个N个数的集合里有多少种符合条件的子集")]),s._v(" "),n("li",[s._v("排列问题：N个数按一定规则全排列，有几种排列方式")]),s._v(" "),n("li",[s._v("棋盘问题：N皇后、解数独。。。")])]),s._v(" "),n("p",[n("strong",[s._v("理解回溯：")])]),s._v(" "),n("p",[s._v("回溯法可抽象的理解为树形问题")]),s._v(" "),n("p",[s._v("因为回溯法的解决都是在集合中递归查找子集，集合的大小就构成了树的宽度，递归的深度就是树的深度。")]),s._v(" "),n("p",[n("strong",[s._v("回溯法模版：")])]),s._v(" "),n("div",{staticClass:"language-C++ line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("void backtracking(参数)\n{\n  if (终止条件)\n  {\n    存放结果;\n    return;\n  }\n  \n  for(选择：本层集合中元素(书中节点孩子的数量就是集合的大小))\n  {\n    处理节点；\n    backtracking(路径，选则列表);\t//递归\n    回溯，撤销处理结果；\n  }\n}\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br"),n("span",{staticClass:"line-number"},[s._v("13")]),n("br"),n("span",{staticClass:"line-number"},[s._v("14")]),n("br"),n("span",{staticClass:"line-number"},[s._v("15")]),n("br")])]),n("h3",{attrs:{id:"复原ip地址-leetcode-93"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#复原ip地址-leetcode-93"}},[s._v("#")]),s._v(" 复原IP地址 leetcode 93")]),s._v(" "),n("p",[s._v("题目："),n("strong",[s._v("有效 IP 地址")]),s._v(" 正好由四个整数（每个整数位于 "),n("code",[s._v("0")]),s._v(" 到 "),n("code",[s._v("255")]),s._v(" 之间组成，且不能含有前导 "),n("code",[s._v("0")]),s._v("），整数之间用 "),n("code",[s._v("'.'")]),s._v(" 分隔。")]),s._v(" "),n("ul",[n("li",[s._v("例如："),n("code",[s._v('"0.1.2.201"')]),s._v(" 和"),n("code",[s._v('"192.168.1.1"')]),s._v(" 是 "),n("strong",[s._v("有效")]),s._v(" IP 地址，但是 "),n("code",[s._v('"0.011.255.245"')]),s._v("、"),n("code",[s._v('"192.168.1.312"')]),s._v(" 和 "),n("code",[s._v('"192.168@1.1"')]),s._v(" 是 "),n("strong",[s._v("无效")]),s._v(" IP 地址。")])]),s._v(" "),n("p",[s._v("给定一个只包含数字的字符串 "),n("code",[s._v("s")]),s._v(" ，用以表示一个 IP 地址，返回所有可能的"),n("strong",[s._v("有效 IP 地址")]),s._v("，这些地址可以通过在 "),n("code",[s._v("s")]),s._v(" 中插入 "),n("code",[s._v("'.'")]),s._v(" 来形成。你 "),n("strong",[s._v("不能")]),s._v(" 重新排序或删除 "),n("code",[s._v("s")]),s._v(" 中的任何数字。你可以按 "),n("strong",[s._v("任何")]),s._v(" 顺序返回答案。")]),s._v(" "),n("p",[n("strong",[s._v("示例 1：")])]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v('输入：s = "25525511135"\n输出：["255.255.11.135","255.255.111.35"]\n')])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br")])]),n("p",[s._v("思路：本题和回文串的思路类似，主要是s字符串的分割位置和合法地址的判断。")]),s._v(" "),n("p",[s._v("注意！在插入一个点之后，下一层递归的步长要加2.")]),s._v(" "),n("div",{staticClass:"language-C++ line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("class Solution {\nprivate:\n    vector<string> result;\n\n    bool isValid(const string& s, int start, int end)\n    {\n        if(start > end) return false;\n        if(s[start] == '0' && start != end)   return false;\n\n        int num = 0;\n        for(int i = start; i <= end; i++)\n        {\n            if(s[i] > '9' || s[i] < '0')    return false;\n            num = num * 10 + (s[i] - '0');\n            if (num > 255) return false; // 如果大于255了不合法\n        }\n        return true;\n    }\n    // startIndex: 搜索的起始位置，pointNum:添加逗点的数量\n    void backtracking(string& s, int startIndex, int pointNum)\n    {\n        if(pointNum == 3)\n        {\n            if(isValid(s, startIndex, s.size() - 1))\n            {\n                result.push_back(s);\n            }\n            return;\n        }\n\n        for(int i = startIndex; i < s.size(); i++)\n        {\n            if(isValid(s, startIndex, i))   // 判断 [startIndex,i] 这个区间的子串是否合法\n            {\n                s.insert(s.begin() + i + 1 , '.');  // 在i的后面插入一个逗点\n                pointNum++;\n                backtracking(s, i + 2, pointNum);   // 插入逗点之后下一个子串的起始位置为i+2\n                pointNum--;\n                s.erase(s.begin() + i + 1);         // 回溯删掉逗点\n            } else break; // 不合法，直接结束本层循环\n        }\n    }\npublic:\n    vector<string> restoreIpAddresses(string s) {\n        if (s.size() < 4 || s.size() > 12) return result; // 算是剪枝了\n        backtracking(s, 0, 0);\n        return result;\n    }\n};\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br"),n("span",{staticClass:"line-number"},[s._v("13")]),n("br"),n("span",{staticClass:"line-number"},[s._v("14")]),n("br"),n("span",{staticClass:"line-number"},[s._v("15")]),n("br"),n("span",{staticClass:"line-number"},[s._v("16")]),n("br"),n("span",{staticClass:"line-number"},[s._v("17")]),n("br"),n("span",{staticClass:"line-number"},[s._v("18")]),n("br"),n("span",{staticClass:"line-number"},[s._v("19")]),n("br"),n("span",{staticClass:"line-number"},[s._v("20")]),n("br"),n("span",{staticClass:"line-number"},[s._v("21")]),n("br"),n("span",{staticClass:"line-number"},[s._v("22")]),n("br"),n("span",{staticClass:"line-number"},[s._v("23")]),n("br"),n("span",{staticClass:"line-number"},[s._v("24")]),n("br"),n("span",{staticClass:"line-number"},[s._v("25")]),n("br"),n("span",{staticClass:"line-number"},[s._v("26")]),n("br"),n("span",{staticClass:"line-number"},[s._v("27")]),n("br"),n("span",{staticClass:"line-number"},[s._v("28")]),n("br"),n("span",{staticClass:"line-number"},[s._v("29")]),n("br"),n("span",{staticClass:"line-number"},[s._v("30")]),n("br"),n("span",{staticClass:"line-number"},[s._v("31")]),n("br"),n("span",{staticClass:"line-number"},[s._v("32")]),n("br"),n("span",{staticClass:"line-number"},[s._v("33")]),n("br"),n("span",{staticClass:"line-number"},[s._v("34")]),n("br"),n("span",{staticClass:"line-number"},[s._v("35")]),n("br"),n("span",{staticClass:"line-number"},[s._v("36")]),n("br"),n("span",{staticClass:"line-number"},[s._v("37")]),n("br"),n("span",{staticClass:"line-number"},[s._v("38")]),n("br"),n("span",{staticClass:"line-number"},[s._v("39")]),n("br"),n("span",{staticClass:"line-number"},[s._v("40")]),n("br"),n("span",{staticClass:"line-number"},[s._v("41")]),n("br"),n("span",{staticClass:"line-number"},[s._v("42")]),n("br"),n("span",{staticClass:"line-number"},[s._v("43")]),n("br"),n("span",{staticClass:"line-number"},[s._v("44")]),n("br"),n("span",{staticClass:"line-number"},[s._v("45")]),n("br"),n("span",{staticClass:"line-number"},[s._v("46")]),n("br"),n("span",{staticClass:"line-number"},[s._v("47")]),n("br"),n("span",{staticClass:"line-number"},[s._v("48")]),n("br"),n("span",{staticClass:"line-number"},[s._v("49")]),n("br")])]),n("h3",{attrs:{id:"子集-leetcode-78"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#子集-leetcode-78"}},[s._v("#")]),s._v(" 子集 leetcode 78")]),s._v(" "),n("p",[s._v("题目：给你一个整数数组 "),n("code",[s._v("nums")]),s._v(" ，数组中的元素 "),n("strong",[s._v("互不相同")]),s._v(" 。返回该数组所有可能的子集（幂集）。")]),s._v(" "),n("p",[s._v("解集 "),n("strong",[s._v("不能")]),s._v(" 包含重复的子集。你可以按 "),n("strong",[s._v("任意顺序")]),s._v(" 返回解集。")]),s._v(" "),n("p",[n("strong",[s._v("示例 1：")])]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("输入：nums = [1,2,3]\n输出：[[],[1],[2],[1,2],[3],[1,3],[2,3],[1,2,3]]\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br")])]),n("p",[n("strong",[s._v("示例 2：")])]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("输入：nums = [0]\n输出：[[],[0]] \n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br")])]),n("p",[n("strong",[s._v("提示：")])]),s._v(" "),n("ul",[n("li",[n("code",[s._v("1 <= nums.length <= 10")])]),s._v(" "),n("li",[n("code",[s._v("-10 <= nums[i] <= 10")])]),s._v(" "),n("li",[n("code",[s._v("nums")]),s._v(" 中的所有元素 "),n("strong",[s._v("互不相同")])])]),s._v(" "),n("p",[s._v("思路：就是字符串的切割，很简单。要注意子集问题要求每次都收集结果而组合分割等问题就是在叶子结点收集（终止条件里收集）")]),s._v(" "),n("div",{staticClass:"language-C++ line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("class Solution {\nprivate:\n    vector<vector<int>> result;\n    vector<int> path;\n\n    void backtracking(vector<int>& nums, int startIndex)\n    {\n        result.push_back(path); //每次递归都要收集结果\n        if(startIndex > nums.size())    return;//可以不写，因为就是要遍历整个树\n\n        for(int i = startIndex; i < nums.size(); i++)\n        {\n            path.push_back(nums[i]);\n            backtracking(nums, i + 1);\n            path.pop_back();\n        }\n    }\npublic:\n    vector<vector<int>> subsets(vector<int>& nums) {\n        backtracking(nums, 0);\n        return result;\n    }\n};\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br"),n("span",{staticClass:"line-number"},[s._v("13")]),n("br"),n("span",{staticClass:"line-number"},[s._v("14")]),n("br"),n("span",{staticClass:"line-number"},[s._v("15")]),n("br"),n("span",{staticClass:"line-number"},[s._v("16")]),n("br"),n("span",{staticClass:"line-number"},[s._v("17")]),n("br"),n("span",{staticClass:"line-number"},[s._v("18")]),n("br"),n("span",{staticClass:"line-number"},[s._v("19")]),n("br"),n("span",{staticClass:"line-number"},[s._v("20")]),n("br"),n("span",{staticClass:"line-number"},[s._v("21")]),n("br"),n("span",{staticClass:"line-number"},[s._v("22")]),n("br"),n("span",{staticClass:"line-number"},[s._v("23")]),n("br")])]),n("h3",{attrs:{id:"子集ii-leetcode-90"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#子集ii-leetcode-90"}},[s._v("#")]),s._v(" 子集II leetcode 90")]),s._v(" "),n("p",[s._v("题目：给你一个整数数组 "),n("code",[s._v("nums")]),s._v(" ，其中可能包含重复元素，请你返回该数组所有可能的子集（幂集）。")]),s._v(" "),n("p",[s._v("解集 "),n("strong",[s._v("不能")]),s._v(" 包含重复的子集。返回的解集中，子集可以按 "),n("strong",[s._v("任意顺序")]),s._v(" 排列。")]),s._v(" "),n("p",[n("strong",[s._v("示例 1：")])]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("输入：nums = [1,2,2]\n输出：[[],[1],[1,2],[1,2,2],[2],[2,2]]\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br")])]),n("p",[n("strong",[s._v("示例 2：")])]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("输入：nums = [0]\n输出：[[],[0]]\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br")])]),n("p",[n("strong",[s._v("提示：")])]),s._v(" "),n("ul",[n("li",[n("code",[s._v("1 <= nums.length <= 10")])]),s._v(" "),n("li",[n("code",[s._v("-10 <= nums[i] <= 10")])])]),s._v(" "),n("p",[s._v("思路：很简单，前面组合问题与子集结合，去重即可！")]),s._v(" "),n("div",{staticClass:"language-C++ line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("class Solution {\nprivate:\n    vector<vector<int>> result;\n    vector<int> path;\n\n    void backtracking(vector<int>& nums, int startIndex, vector<bool>& used)\n    {\n        result.push_back(path); //每次递归都要收集结果\n        if(startIndex > nums.size())    return;//可以不写，因为就是要遍历整个树\n\n        for(int i = startIndex; i < nums.size(); i++)\n        {\n            if (i > 0 && nums[i] == nums[i - 1] && used[i - 1] == false) {\n                continue;\n            }\n            path.push_back(nums[i]);\n            used[i] = true;\n            backtracking(nums, i + 1, used);\n            used[i] = false;\n            path.pop_back();\n        }\n    }\npublic:\n    vector<vector<int>> subsetsWithDup(vector<int>& nums) {\n        vector<bool> used(nums.size(), false);\n        sort(nums.begin(), nums.end()); // 去重需要排序\n        backtracking(nums, 0, used);\n        return result;\n    }\n};\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br"),n("span",{staticClass:"line-number"},[s._v("13")]),n("br"),n("span",{staticClass:"line-number"},[s._v("14")]),n("br"),n("span",{staticClass:"line-number"},[s._v("15")]),n("br"),n("span",{staticClass:"line-number"},[s._v("16")]),n("br"),n("span",{staticClass:"line-number"},[s._v("17")]),n("br"),n("span",{staticClass:"line-number"},[s._v("18")]),n("br"),n("span",{staticClass:"line-number"},[s._v("19")]),n("br"),n("span",{staticClass:"line-number"},[s._v("20")]),n("br"),n("span",{staticClass:"line-number"},[s._v("21")]),n("br"),n("span",{staticClass:"line-number"},[s._v("22")]),n("br"),n("span",{staticClass:"line-number"},[s._v("23")]),n("br"),n("span",{staticClass:"line-number"},[s._v("24")]),n("br"),n("span",{staticClass:"line-number"},[s._v("25")]),n("br"),n("span",{staticClass:"line-number"},[s._v("26")]),n("br"),n("span",{staticClass:"line-number"},[s._v("27")]),n("br"),n("span",{staticClass:"line-number"},[s._v("28")]),n("br"),n("span",{staticClass:"line-number"},[s._v("29")]),n("br"),n("span",{staticClass:"line-number"},[s._v("30")]),n("br")])])])}),[],!1,null,null,null);n.default=e.exports}}]);