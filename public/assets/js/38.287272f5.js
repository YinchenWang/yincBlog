(window.webpackJsonp=window.webpackJsonp||[]).push([[38],{447:function(s,n,e){"use strict";e.r(n);var a=e(2),t=Object(a.a)({},(function(){var s=this,n=s._self._c;return n("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[n("h1",{attrs:{id:"day32-贪心-part02"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#day32-贪心-part02"}},[s._v("#")]),s._v(" Day32 贪心 part02")]),s._v(" "),n("h3",{attrs:{id:"贪心算法理论基础"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#贪心算法理论基础"}},[s._v("#")]),s._v(" 贪心算法理论基础")]),s._v(" "),n("p",[s._v("贪心的本质是选择每一阶段的局部最优，从而达到全局最优。")]),s._v(" "),n("p",[n("strong",[s._v("贪心的使用：")])]),s._v(" "),n("p",[s._v("贪心没有固定的套路，验证能不能使用贪心最好的策略是举反例，"),n("strong",[s._v("刷题或者面试的时候，手动模拟一下感觉可以局部最优推出整体最优，而且想不到反例，那么就试一试贪心")])]),s._v(" "),n("p",[n("strong",[s._v("贪心的一般解题步骤：")])]),s._v(" "),n("ul",[n("li",[s._v("将问题分解为若干个子问题。")]),s._v(" "),n("li",[s._v("找出合适的贪心策略。")]),s._v(" "),n("li",[s._v("求解每一个子问题的最优解。")]),s._v(" "),n("li",[s._v("将局部最优解堆叠成全局最优解。")])]),s._v(" "),n("h3",{attrs:{id:"买卖股票的最佳时机ii-leetcode-122"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#买卖股票的最佳时机ii-leetcode-122"}},[s._v("#")]),s._v(" 买卖股票的最佳时机II leetcode 122")]),s._v(" "),n("p",[s._v("题目：给你一个整数数组 "),n("code",[s._v("prices")]),s._v(" ，其中 "),n("code",[s._v("prices[i]")]),s._v(" 表示某支股票第 "),n("code",[s._v("i")]),s._v(" 天的价格。")]),s._v(" "),n("p",[s._v("在每一天，你可以决定是否购买和/或出售股票。你在任何时候 "),n("strong",[s._v("最多")]),s._v(" 只能持有 "),n("strong",[s._v("一股")]),s._v(" 股票。你也可以先购买，然后在 "),n("strong",[s._v("同一天")]),s._v(" 出售。")]),s._v(" "),n("p",[s._v("返回 "),n("em",[s._v("你能获得的 "),n("strong",[s._v("最大")]),s._v(" 利润")]),s._v(" 。")]),s._v(" "),n("p",[n("strong",[s._v("示例 1：")])]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("输入：prices = [7,1,5,3,6,4]\n输出：7\n解释：在第 2 天（股票价格 = 1）的时候买入，在第 3 天（股票价格 = 5）的时候卖出, 这笔交易所能获得利润 = 5 - 1 = 4 。\n     随后，在第 4 天（股票价格 = 3）的时候买入，在第 5 天（股票价格 = 6）的时候卖出, 这笔交易所能获得利润 = 6 - 3 = 3 。\n     总利润为 4 + 3 = 7 。\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br")])]),n("p",[s._v("思路： 将整体获利更改为每天获利即可。每当当天的获利为正时则记录获利总数即可。（收集正利润就相当于收集了低买高卖区间）")]),s._v(" "),n("div",{staticClass:"language-C++ line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("class Solution {\npublic:\n    int maxProfit(vector<int>& prices) {\n        int left = 0;\n        int right = left + 1;\n        int sum = 0;\n        for(left, right; right < prices.size(); ++left, ++right)\n        {\n            int profie = prices[right] - prices[left];\n            if(profie > 0)\n                sum += profie;\n        }\n        return sum;\n    }\n};\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br"),n("span",{staticClass:"line-number"},[s._v("13")]),n("br"),n("span",{staticClass:"line-number"},[s._v("14")]),n("br"),n("span",{staticClass:"line-number"},[s._v("15")]),n("br")])]),n("h3",{attrs:{id:"跳跃游戏-leetcode-55"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#跳跃游戏-leetcode-55"}},[s._v("#")]),s._v(" 跳跃游戏 leetcode 55")]),s._v(" "),n("p",[s._v("题目：给你一个非负整数数组 "),n("code",[s._v("nums")]),s._v(" ，你最初位于数组的 "),n("strong",[s._v("第一个下标")]),s._v(" 。数组中的每个元素代表你在该位置可以跳跃的最大长度。")]),s._v(" "),n("p",[s._v("判断你是否能够到达最后一个下标，如果可以，返回 "),n("code",[s._v("true")]),s._v(" ；否则，返回 "),n("code",[s._v("false")]),s._v(" 。")]),s._v(" "),n("p",[n("strong",[s._v("示例 1：")])]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("输入：nums = [2,3,1,1,4]\n输出：true\n解释：可以先跳 1 步，从下标 0 到达下标 1, 然后再从下标 1 跳 3 步到达最后一个下标。\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br")])]),n("p",[n("strong",[s._v("示例 2：")])]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("输入：nums = [3,2,1,0,4]\n输出：false\n解释：无论怎样，总会到达下标为 3 的位置。但该下标的最大跳跃长度是 0 ， 所以永远不可能到达最后一个下标。\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br")])]),n("p",[n("strong",[s._v("提示：")])]),s._v(" "),n("ul",[n("li",[n("code",[s._v("1 <= nums.length <= 104")])]),s._v(" "),n("li",[n("code",[s._v("0 <= nums[i] <= 105")])])]),s._v(" "),n("p",[s._v("思路：主要不是怎么跳，而是当前能跳的范围！！！ 范围覆盖最后元素则Ture就完了。（取范围时要取已覆盖的值中最大的）")]),s._v(" "),n("div",{staticClass:"language-C++ line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("class Solution {\npublic:\n    bool canJump(vector<int>& nums) {\n        int cover {0};\n        if(nums.size() == 1)    return true;\n        for(int i = 0; i <= cover; ++i)\n        {\n            cover = max(i + nums[i], cover);    //取范围中最大的\n            if(cover >= nums.size() - 1)    return true;\n        }\n        return false;\n    }\n};\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br"),n("span",{staticClass:"line-number"},[s._v("13")]),n("br")])]),n("h3",{attrs:{id:"跳跃游戏ii-leetcode-45"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#跳跃游戏ii-leetcode-45"}},[s._v("#")]),s._v(" 跳跃游戏II leetcode 45")]),s._v(" "),n("p",[s._v("题目：给定一个长度为 "),n("code",[s._v("n")]),s._v(" 的 "),n("strong",[s._v("0 索引")]),s._v("整数数组 "),n("code",[s._v("nums")]),s._v("。初始位置为 "),n("code",[s._v("nums[0]")]),s._v("。")]),s._v(" "),n("p",[s._v("每个元素 "),n("code",[s._v("nums[i]")]),s._v(" 表示从索引 "),n("code",[s._v("i")]),s._v(" 向前跳转的最大长度。换句话说，如果你在 "),n("code",[s._v("nums[i]")]),s._v(" 处，你可以跳转到任意 "),n("code",[s._v("nums[i + j]")]),s._v(" 处:")]),s._v(" "),n("ul",[n("li",[n("code",[s._v("0 <= j <= nums[i]")])]),s._v(" "),n("li",[n("code",[s._v("i + j < n")])])]),s._v(" "),n("p",[s._v("返回到达 "),n("code",[s._v("nums[n - 1]")]),s._v(" 的最小跳跃次数。生成的测试用例可以到达 "),n("code",[s._v("nums[n - 1]")]),s._v("。")]),s._v(" "),n("p",[n("strong",[s._v("示例 1:")])]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("输入: nums = [2,3,1,1,4]\n输出: 2\n解释: 跳到最后一个位置的最小跳跃数是 2。\n     从下标为 0 跳到下标为 1 的位置，跳 1 步，然后跳 3 步到达数组的最后一个位置。\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br")])]),n("p",[n("strong",[s._v("示例 2:")])]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("输入: nums = [2,3,0,1,4]\n输出: 2 \n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br")])]),n("p",[n("strong",[s._v("提示:")])]),s._v(" "),n("ul",[n("li",[n("code",[s._v("1 <= nums.length <= 104")])]),s._v(" "),n("li",[n("code",[s._v("0 <= nums[i] <= 1000")])]),s._v(" "),n("li",[s._v("题目保证可以到达 "),n("code",[s._v("nums[n-1]")])])]),s._v(" "),n("p",[s._v("思路：和上题类似使用覆盖范围来求解，关键在于跳跃步数的更新。每当遍历到当前范围的最大值且没有到达终点时，则代表需要再跳一步，此时更新跳跃步数即可！！")]),s._v(" "),n("div",{staticClass:"language-C++ line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("class Solution {\npublic:\n    int jump(vector<int>& nums) {\n        if(nums.size() == 1)    return 0;\n        int cur {0};\n        int next {0};\n        int result {0};\n        for(int i = 0; i < nums.size(); ++i)\n        {\n            next = max(i + nums[i], next);\n            if(i == cur)\n            {\n                ++result;\n                cur = next;\n                if(cur >= nums.size() - 1)  break;\n            }\n        }\n        return result;\n    }\n};\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br"),n("span",{staticClass:"line-number"},[s._v("13")]),n("br"),n("span",{staticClass:"line-number"},[s._v("14")]),n("br"),n("span",{staticClass:"line-number"},[s._v("15")]),n("br"),n("span",{staticClass:"line-number"},[s._v("16")]),n("br"),n("span",{staticClass:"line-number"},[s._v("17")]),n("br"),n("span",{staticClass:"line-number"},[s._v("18")]),n("br"),n("span",{staticClass:"line-number"},[s._v("19")]),n("br"),n("span",{staticClass:"line-number"},[s._v("20")]),n("br")])])])}),[],!1,null,null,null);n.default=t.exports}}]);