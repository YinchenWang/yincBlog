(window.webpackJsonp=window.webpackJsonp||[]).push([[40],{447:function(s,n,e){"use strict";e.r(n);var a=e(2),t=Object(a.a)({},(function(){var s=this,n=s._self._c;return n("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[n("h1",{attrs:{id:"day35-贪心-part04"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#day35-贪心-part04"}},[s._v("#")]),s._v(" Day35 贪心 part04")]),s._v(" "),n("h3",{attrs:{id:"贪心算法理论基础"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#贪心算法理论基础"}},[s._v("#")]),s._v(" 贪心算法理论基础")]),s._v(" "),n("p",[s._v("贪心的本质是选择每一阶段的局部最优，从而达到全局最优。")]),s._v(" "),n("p",[n("strong",[s._v("贪心的使用：")])]),s._v(" "),n("p",[s._v("贪心没有固定的套路，验证能不能使用贪心最好的策略是举反例，"),n("strong",[s._v("刷题或者面试的时候，手动模拟一下感觉可以局部最优推出整体最优，而且想不到反例，那么就试一试贪心")])]),s._v(" "),n("p",[n("strong",[s._v("贪心的一般解题步骤：")])]),s._v(" "),n("ul",[n("li",[s._v("将问题分解为若干个子问题。")]),s._v(" "),n("li",[s._v("找出合适的贪心策略。")]),s._v(" "),n("li",[s._v("求解每一个子问题的最优解。")]),s._v(" "),n("li",[s._v("将局部最优解堆叠成全局最优解。")])]),s._v(" "),n("h3",{attrs:{id:"柠檬水找零和-leetcode-860"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#柠檬水找零和-leetcode-860"}},[s._v("#")]),s._v(" 柠檬水找零和 leetcode 860")]),s._v(" "),n("p",[s._v("题目：在柠檬水摊上，每一杯柠檬水的售价为 "),n("code",[s._v("5")]),s._v(" 美元。顾客排队购买你的产品，（按账单 "),n("code",[s._v("bills")]),s._v(" 支付的顺序）一次购买一杯。")]),s._v(" "),n("p",[s._v("每位顾客只买一杯柠檬水，然后向你付 "),n("code",[s._v("5")]),s._v(" 美元、"),n("code",[s._v("10")]),s._v(" 美元或 "),n("code",[s._v("20")]),s._v(" 美元。你必须给每个顾客正确找零，也就是说净交易是每位顾客向你支付 "),n("code",[s._v("5")]),s._v(" 美元。")]),s._v(" "),n("p",[s._v("注意，一开始你手头没有任何零钱。")]),s._v(" "),n("p",[s._v("给你一个整数数组 "),n("code",[s._v("bills")]),s._v(" ，其中 "),n("code",[s._v("bills[i]")]),s._v(" 是第 "),n("code",[s._v("i")]),s._v(" 位顾客付的账。如果你能给每位顾客正确找零，返回 "),n("code",[s._v("true")]),s._v(" ，否则返回 "),n("code",[s._v("false")]),s._v(" 。")]),s._v(" "),n("p",[n("strong",[s._v("示例 1：")])]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("输入：bills = [5,5,5,10,20]\n输出：true\n解释：\n前 3 位顾客那里，我们按顺序收取 3 张 5 美元的钞票。\n第 4 位顾客那里，我们收取一张 10 美元的钞票，并返还 5 美元。\n第 5 位顾客那里，我们找还一张 10 美元的钞票和一张 5 美元的钞票。\n由于所有客户都得到了正确的找零，所以我们输出 true。\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br")])]),n("p",[s._v("思路： 由于订单金额为5，收到的钱为5，10，20. 因此每次遇到金额大于5的就哦安段当前拥有的5和10的数量能否满足找零即可。")]),s._v(" "),n("div",{staticClass:"language-C++ line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("class Solution {\npublic:\n    bool lemonadeChange(vector<int>& bills) {\n        int five = 0;\n        int ten = 0;\n        int twenty = 0;\n        for (int bill : bills)\n        {\n            if (bill == 5)\n            {\n                five++;\n            }\n            else if (bill == 10)\n            {\n                if (five > 0)\n                {\n                    five--;\n                    ten++;\n                }\n                else{\n                    return false;\n                }\n            }\n            else if (bill == 20)\n            {\n                if (ten > 0 && five > 0)\n                {\n                    ten--;\n                    five--;\n                }\n                else if (five >= 3)\n                {\n                    five -= 3;\n                }\n                else return false;\n            }\n        }\n        return true;\n    }\n};\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br"),n("span",{staticClass:"line-number"},[s._v("13")]),n("br"),n("span",{staticClass:"line-number"},[s._v("14")]),n("br"),n("span",{staticClass:"line-number"},[s._v("15")]),n("br"),n("span",{staticClass:"line-number"},[s._v("16")]),n("br"),n("span",{staticClass:"line-number"},[s._v("17")]),n("br"),n("span",{staticClass:"line-number"},[s._v("18")]),n("br"),n("span",{staticClass:"line-number"},[s._v("19")]),n("br"),n("span",{staticClass:"line-number"},[s._v("20")]),n("br"),n("span",{staticClass:"line-number"},[s._v("21")]),n("br"),n("span",{staticClass:"line-number"},[s._v("22")]),n("br"),n("span",{staticClass:"line-number"},[s._v("23")]),n("br"),n("span",{staticClass:"line-number"},[s._v("24")]),n("br"),n("span",{staticClass:"line-number"},[s._v("25")]),n("br"),n("span",{staticClass:"line-number"},[s._v("26")]),n("br"),n("span",{staticClass:"line-number"},[s._v("27")]),n("br"),n("span",{staticClass:"line-number"},[s._v("28")]),n("br"),n("span",{staticClass:"line-number"},[s._v("29")]),n("br"),n("span",{staticClass:"line-number"},[s._v("30")]),n("br"),n("span",{staticClass:"line-number"},[s._v("31")]),n("br"),n("span",{staticClass:"line-number"},[s._v("32")]),n("br"),n("span",{staticClass:"line-number"},[s._v("33")]),n("br"),n("span",{staticClass:"line-number"},[s._v("34")]),n("br"),n("span",{staticClass:"line-number"},[s._v("35")]),n("br"),n("span",{staticClass:"line-number"},[s._v("36")]),n("br"),n("span",{staticClass:"line-number"},[s._v("37")]),n("br"),n("span",{staticClass:"line-number"},[s._v("38")]),n("br"),n("span",{staticClass:"line-number"},[s._v("39")]),n("br"),n("span",{staticClass:"line-number"},[s._v("40")]),n("br")])]),n("h3",{attrs:{id:"根据身高体重重建队列-leetcode-495"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#根据身高体重重建队列-leetcode-495"}},[s._v("#")]),s._v(" 根据身高体重重建队列 leetcode 495")]),s._v(" "),n("p",[s._v("题目：假设有打乱顺序的一群人站成一个队列，数组 "),n("code",[s._v("people")]),s._v(" 表示队列中一些人的属性（不一定按顺序）。每个 "),n("code",[s._v("people[i] = [hi, ki]")]),s._v(" 表示第 "),n("code",[s._v("i")]),s._v(" 个人的身高为 "),n("code",[s._v("hi")]),s._v(" ，前面 "),n("strong",[s._v("正好")]),s._v(" 有 "),n("code",[s._v("ki")]),s._v(" 个身高大于或等于 "),n("code",[s._v("hi")]),s._v(" 的人。")]),s._v(" "),n("p",[s._v("请你重新构造并返回输入数组 "),n("code",[s._v("people")]),s._v(" 所表示的队列。返回的队列应该格式化为数组 "),n("code",[s._v("queue")]),s._v(" ，其中 "),n("code",[s._v("queue[j] = [hj, kj]")]),s._v(" 是队列中第 "),n("code",[s._v("j")]),s._v(" 个人的属性（"),n("code",[s._v("queue[0]")]),s._v(" 是排在队列前面的人）。")]),s._v(" "),n("p",[n("strong",[s._v("示例 1：")])]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("输入：people = [[7,0],[4,4],[7,1],[5,0],[6,1],[5,2]]\n输出：[[5,0],[7,0],[5,2],[6,1],[4,4],[7,1]]\n解释：\n编号为 0 的人身高为 5 ，没有身高更高或者相同的人排在他前面。\n编号为 1 的人身高为 7 ，没有身高更高或者相同的人排在他前面。\n编号为 2 的人身高为 5 ，有 2 个身高更高或者相同的人排在他前面，即编号为 0 和 1 的人。\n编号为 3 的人身高为 6 ，有 1 个身高更高或者相同的人排在他前面，即编号为 1 的人。\n编号为 4 的人身高为 4 ，有 4 个身高更高或者相同的人排在他前面，即编号为 0、1、2、3 的人。\n编号为 5 的人身高为 7 ，有 1 个身高更高或者相同的人排在他前面，即编号为 1 的人。\n因此 [[5,0],[7,0],[5,2],[6,1],[4,4],[7,1]] 是重新构造后的队列。\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br")])]),n("p",[s._v("思路：和分发糖果时类似，遇见二维贪心的时候先贪一个再贪另一个。先根据身高从大到小排序people数组，这样后序插入时不改变身高大于等于的数量，再根据K来确定插入的位置。")]),s._v(" "),n("div",{staticClass:"language-C++ line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("//使用vecotr\nclass Solution {\npublic:\n    static bool cmp(const vector<int>& a, const vector<int>& b) {\n        if (a[0] == b[0]) return a[1] < b[1];\n        return a[0] > b[0];\n    }\n    vector<vector<int>> reconstructQueue(vector<vector<int>>& people) {\n        sort (people.begin(), people.end(), cmp);\n        vector<vector<int>> que;\n        for (int i = 0; i < people.size(); i++) {\n            int position = people[i][1];\n            que.insert(que.begin() + position, people[i]);\n        }\n        return que;\n    }\n};\n//使用lsit\nclass Solution {\nprivate:\n    static bool cmp(const vector<int>& a, const vector<int>& b)\n    {\n        if (a[0] == b[0]) return a[1] < b[1];\n        return a[0] > b[0];\n    }\n\npublic:\n    vector<vector<int>> reconstructQueue(vector<vector<int>>& people) {\n        sort(people.begin(), people.end(), cmp);\n        list<vector<int>> que;    //使用list，因为链表插入效率比vector高\n        for (int i = 0; i < people.size(); ++i)\n        {\n            int position = people[i][1]; // 插入到下标为position的位置\n            std::list<vector<int>>::iterator it = que.begin();\n            while (position--) { // 寻找插入位置\n                it++;\n            }\n            que.insert(it, people[i]);\n        }\n        return vector<vector<int>>(que.begin(), que.end());\n    }\n};\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br"),n("span",{staticClass:"line-number"},[s._v("13")]),n("br"),n("span",{staticClass:"line-number"},[s._v("14")]),n("br"),n("span",{staticClass:"line-number"},[s._v("15")]),n("br"),n("span",{staticClass:"line-number"},[s._v("16")]),n("br"),n("span",{staticClass:"line-number"},[s._v("17")]),n("br"),n("span",{staticClass:"line-number"},[s._v("18")]),n("br"),n("span",{staticClass:"line-number"},[s._v("19")]),n("br"),n("span",{staticClass:"line-number"},[s._v("20")]),n("br"),n("span",{staticClass:"line-number"},[s._v("21")]),n("br"),n("span",{staticClass:"line-number"},[s._v("22")]),n("br"),n("span",{staticClass:"line-number"},[s._v("23")]),n("br"),n("span",{staticClass:"line-number"},[s._v("24")]),n("br"),n("span",{staticClass:"line-number"},[s._v("25")]),n("br"),n("span",{staticClass:"line-number"},[s._v("26")]),n("br"),n("span",{staticClass:"line-number"},[s._v("27")]),n("br"),n("span",{staticClass:"line-number"},[s._v("28")]),n("br"),n("span",{staticClass:"line-number"},[s._v("29")]),n("br"),n("span",{staticClass:"line-number"},[s._v("30")]),n("br"),n("span",{staticClass:"line-number"},[s._v("31")]),n("br"),n("span",{staticClass:"line-number"},[s._v("32")]),n("br"),n("span",{staticClass:"line-number"},[s._v("33")]),n("br"),n("span",{staticClass:"line-number"},[s._v("34")]),n("br"),n("span",{staticClass:"line-number"},[s._v("35")]),n("br"),n("span",{staticClass:"line-number"},[s._v("36")]),n("br"),n("span",{staticClass:"line-number"},[s._v("37")]),n("br"),n("span",{staticClass:"line-number"},[s._v("38")]),n("br"),n("span",{staticClass:"line-number"},[s._v("39")]),n("br"),n("span",{staticClass:"line-number"},[s._v("40")]),n("br"),n("span",{staticClass:"line-number"},[s._v("41")]),n("br"),n("span",{staticClass:"line-number"},[s._v("42")]),n("br")])]),n("h3",{attrs:{id:"用最少数量的箭引爆气球-leetcode-452"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#用最少数量的箭引爆气球-leetcode-452"}},[s._v("#")]),s._v(" 用最少数量的箭引爆气球 leetcode 452")]),s._v(" "),n("p",[s._v("题目：有一些球形气球贴在一堵用 XY 平面表示的墙面上。墙面上的气球记录在整数数组 "),n("code",[s._v("points")]),s._v(" ，其中"),n("code",[s._v("points[i] = [xstart, xend]")]),s._v(" 表示水平直径在 "),n("code",[s._v("xstart")]),s._v(" 和 "),n("code",[s._v("xend")]),s._v("之间的气球。你不知道气球的确切 y 坐标。")]),s._v(" "),n("p",[s._v("一支弓箭可以沿着 x 轴从不同点 "),n("strong",[s._v("完全垂直")]),s._v(" 地射出。在坐标 "),n("code",[s._v("x")]),s._v(" 处射出一支箭，若有一个气球的直径的开始和结束坐标为 "),n("code",[s._v("x``start")]),s._v("，"),n("code",[s._v("x``end")]),s._v("， 且满足  "),n("code",[s._v("xstart ≤ x ≤ x``end")]),s._v("，则该气球会被 "),n("strong",[s._v("引爆")]),s._v(" 。可以射出的弓箭的数量 "),n("strong",[s._v("没有限制")]),s._v(" 。 弓箭一旦被射出之后，可以无限地前进。")]),s._v(" "),n("p",[s._v("给你一个数组 "),n("code",[s._v("points")]),s._v(" ，"),n("em",[s._v("返回引爆所有气球所必须射出的 "),n("strong",[s._v("最小")]),s._v(" 弓箭数")]),s._v(" 。")]),s._v(" "),n("p",[n("strong",[s._v("示例 1：")])]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("输入：points = [[10,16],[2,8],[1,6],[7,12]]\n输出：2\n解释：气球可以用2支箭来爆破:\n-在x = 6处射出箭，击破气球[2,8]和[1,6]。\n-在x = 11处发射箭，击破气球[10,16]和[7,12]。\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br")])]),n("p",[s._v("思路：思路很清晰，模拟有问题。本题要注意怎么判断气球重叠！")]),s._v(" "),n("div",{staticClass:"language-C++ line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("class Solution {\nprivate:\n    static bool cmp(vector<int>& a, vector<int>& b)\n    {\n        return a[0] < b[0];\n    }\npublic:\n    int findMinArrowShots(vector<vector<int>>& points) {\n        if (points.size() == 1) return 1;\n        sort(points.begin(), points.end(), cmp);\n        int numArrows = 1;\n        for (int i = 1; i < points.size(); ++i)\n        {\n            if (points[i][0] > points[i - 1][1])    numArrows++;    //右边界大于左边界，必须增加箭矢数量。\n            else\n            {\n                points[i][1] = min(points[i - 1][1], points[i][1]); //更新重叠气球的最小右边界\n            }\n        }\n        return numArrows;\n    }\n};\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br"),n("span",{staticClass:"line-number"},[s._v("13")]),n("br"),n("span",{staticClass:"line-number"},[s._v("14")]),n("br"),n("span",{staticClass:"line-number"},[s._v("15")]),n("br"),n("span",{staticClass:"line-number"},[s._v("16")]),n("br"),n("span",{staticClass:"line-number"},[s._v("17")]),n("br"),n("span",{staticClass:"line-number"},[s._v("18")]),n("br"),n("span",{staticClass:"line-number"},[s._v("19")]),n("br"),n("span",{staticClass:"line-number"},[s._v("20")]),n("br"),n("span",{staticClass:"line-number"},[s._v("21")]),n("br"),n("span",{staticClass:"line-number"},[s._v("22")]),n("br")])])])}),[],!1,null,null,null);n.default=t.exports}}]);