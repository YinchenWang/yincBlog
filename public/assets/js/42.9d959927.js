(window.webpackJsonp=window.webpackJsonp||[]).push([[42],{446:function(s,n,t){"use strict";t.r(n);var a=t(2),e=Object(a.a)({},(function(){var s=this,n=s._self._c;return n("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[n("h1",{attrs:{id:"day37-贪心-part06"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#day37-贪心-part06"}},[s._v("#")]),s._v(" Day37 贪心 part06")]),s._v(" "),n("h3",{attrs:{id:"贪心算法理论基础"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#贪心算法理论基础"}},[s._v("#")]),s._v(" 贪心算法理论基础")]),s._v(" "),n("p",[s._v("贪心的本质是选择每一阶段的局部最优，从而达到全局最优。")]),s._v(" "),n("p",[n("strong",[s._v("贪心的使用：")])]),s._v(" "),n("p",[s._v("贪心没有固定的套路，验证能不能使用贪心最好的策略是举反例，"),n("strong",[s._v("刷题或者面试的时候，手动模拟一下感觉可以局部最优推出整体最优，而且想不到反例，那么就试一试贪心")])]),s._v(" "),n("p",[n("strong",[s._v("贪心的一般解题步骤：")])]),s._v(" "),n("ul",[n("li",[s._v("将问题分解为若干个子问题。")]),s._v(" "),n("li",[s._v("找出合适的贪心策略。")]),s._v(" "),n("li",[s._v("求解每一个子问题的最优解。")]),s._v(" "),n("li",[s._v("将局部最优解堆叠成全局最优解。")])]),s._v(" "),n("h3",{attrs:{id:"单调递增的数字-leetcode-738"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#单调递增的数字-leetcode-738"}},[s._v("#")]),s._v(" 单调递增的数字 leetcode 738")]),s._v(" "),n("p",[s._v("题目：当且仅当每个相邻位数上的数字 "),n("code",[s._v("x")]),s._v(" 和 "),n("code",[s._v("y")]),s._v(" 满足 "),n("code",[s._v("x <= y")]),s._v(" 时，我们称这个整数是"),n("strong",[s._v("单调递增")]),s._v("的。")]),s._v(" "),n("p",[s._v("给定一个整数 "),n("code",[s._v("n")]),s._v(" ，返回 "),n("em",[s._v("小于或等于 "),n("code",[s._v("n")]),s._v(" 的最大数字，且数字呈 "),n("strong",[s._v("单调递增")])]),s._v(" 。")]),s._v(" "),n("p",[n("strong",[s._v("示例 1:")])]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("输入: n = 10\n输出: 9\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br")])]),n("p",[n("strong",[s._v("示例 2:")])]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("输入: n = 1234\n输出: 1234\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br")])]),n("p",[n("strong",[s._v("示例 3:")])]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("输入: n = 332\n输出: 299\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br")])]),n("p",[n("strong",[s._v("提示:")])]),s._v(" "),n("ul",[n("li",[n("code",[s._v("0 <= n <= 109")])])]),s._v(" "),n("p",[s._v("思路：先确定最后一位，从后往前确定。（int转换成字符串处理很妙！使用falg记录没想到）")]),s._v(" "),n("div",{staticClass:"language-C++ line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("class Solution {\npublic:\n    int monotoneIncreasingDigits(int n) {\n        string str = to_string(n);\n        int flag = str.size();\n        for (int i = str.size() - 1; i > 0; --i)    //从往前设置前一位小于后一位\n        {\n            if (str[i - 1] > str[i])\n            {\n                str[i - 1]--;\n                flag = i;\n            }\n        }\n        for( int j = flag; j < str.size(); ++j) //将flag往后设置我=为99 确保单增且最大\n        {\n            str[j] = '9';\n        }\n\n        return stoi(str);\n    }\n};\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br"),n("span",{staticClass:"line-number"},[s._v("13")]),n("br"),n("span",{staticClass:"line-number"},[s._v("14")]),n("br"),n("span",{staticClass:"line-number"},[s._v("15")]),n("br"),n("span",{staticClass:"line-number"},[s._v("16")]),n("br"),n("span",{staticClass:"line-number"},[s._v("17")]),n("br"),n("span",{staticClass:"line-number"},[s._v("18")]),n("br"),n("span",{staticClass:"line-number"},[s._v("19")]),n("br"),n("span",{staticClass:"line-number"},[s._v("20")]),n("br"),n("span",{staticClass:"line-number"},[s._v("21")]),n("br")])]),n("h3",{attrs:{id:"监控二叉树-leetcode-968-hard"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#监控二叉树-leetcode-968-hard"}},[s._v("#")]),s._v(" 监控二叉树 leetcode 968 hard")]),s._v(" "),n("p",[s._v("题目：给定一个二叉树，我们在树的节点上安装摄像头。")]),s._v(" "),n("p",[s._v("节点上的每个摄影头都可以监视"),n("strong",[s._v("其父对象、自身及其直接子对象。")])]),s._v(" "),n("p",[s._v("计算监控树的所有节点所需的最小摄像头数量。")]),s._v(" "),n("p",[n("strong",[s._v("示例 1：")])]),s._v(" "),n("p",[n("img",{attrs:{src:"https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2018/12/29/bst_cameras_01.png",alt:"img"}})]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("输入：[0,0,null,0,0]\n输出：1\n解释：如图所示，一台摄像头足以监控所有节点。\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br")])]),n("p",[s._v("思路：有思路，写不出，不知道怎么隔两个节点放摄像头。题解：")]),s._v(" "),n("p",[s._v("树中节点有三种状态：")]),s._v(" "),n("ul",[n("li",[s._v("0 节点无覆盖")]),s._v(" "),n("li",[s._v("1 节点有摄像头")]),s._v(" "),n("li",[s._v("2 节点有覆盖")])]),s._v(" "),n("p",[s._v("递归过程中树中节点有以下情况：")]),s._v(" "),n("ul",[n("li",[s._v("左右孩子都有覆盖 （left == 2 && right == 2）")]),s._v(" "),n("li",[s._v("左右节点至少有一个节点无覆盖， 在中间节点加摄像头,父结点 return 1。  (left == 0 || right == 0)\n"),n("ul",[n("li",[s._v("left == 0 && right == 0 左右节点无覆盖")]),s._v(" "),n("li",[s._v("left == 1 && right == 0 左节点有摄像头，右节点无覆盖")]),s._v(" "),n("li",[s._v("left == 0 && right == 1 左节点有无覆盖，右节点摄像头")]),s._v(" "),n("li",[s._v("left == 0 && right == 2 左节点无覆盖，右节点覆盖")]),s._v(" "),n("li",[s._v("left == 2 && right == 0 左节点覆盖，右节点无覆盖")])])]),s._v(" "),n("li",[s._v("左右节点至少有一个覆盖 (left == 1 || right == 1)， 父结点return 2\n"),n("ul",[n("li",[s._v("left == 1 && right == 2 左节点有摄像头，右节点有覆盖")]),s._v(" "),n("li",[s._v("left == 2 && right == 1 左节点有覆盖，右节点有摄像头")]),s._v(" "),n("li",[s._v("left == 1 && right == 1 左右节点都有摄像头")])])]),s._v(" "),n("li",[s._v("树的根结点无覆盖，此时已经遍历完了，所以需要单独给根结点加一个摄像头。")])]),s._v(" "),n("div",{staticClass:"language-C++ line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\n * };\n */\nclass Solution {\nprivate:\n    int result;\n    int traversal(TreeNode* cur)\n    {\n        if (cur == NULL)    return 2;   //遇见叶子节点\n        int left = traversal(cur -> left);//\n        int right = traversal(cur -> right);\n\n        if (left == 2 && right == 2)    return 0;   //左右节点都有覆盖\n        if (left == 0 || right == 0)        //至少有一个节点无覆盖\n        {\n            result++;\n            return 1;\n        }     \n        if (left == 1 || right ==1) return 2;   //至少一个节点有覆盖\n        return -1;\n    }\npublic:\n    int minCameraCover(TreeNode* root) {\n        result = 0;\n        // 情况4\n        if (traversal(root) == 0) { // root 无覆盖\n            result++;\n        }\n        return result;\n    }\n};\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br"),n("span",{staticClass:"line-number"},[s._v("13")]),n("br"),n("span",{staticClass:"line-number"},[s._v("14")]),n("br"),n("span",{staticClass:"line-number"},[s._v("15")]),n("br"),n("span",{staticClass:"line-number"},[s._v("16")]),n("br"),n("span",{staticClass:"line-number"},[s._v("17")]),n("br"),n("span",{staticClass:"line-number"},[s._v("18")]),n("br"),n("span",{staticClass:"line-number"},[s._v("19")]),n("br"),n("span",{staticClass:"line-number"},[s._v("20")]),n("br"),n("span",{staticClass:"line-number"},[s._v("21")]),n("br"),n("span",{staticClass:"line-number"},[s._v("22")]),n("br"),n("span",{staticClass:"line-number"},[s._v("23")]),n("br"),n("span",{staticClass:"line-number"},[s._v("24")]),n("br"),n("span",{staticClass:"line-number"},[s._v("25")]),n("br"),n("span",{staticClass:"line-number"},[s._v("26")]),n("br"),n("span",{staticClass:"line-number"},[s._v("27")]),n("br"),n("span",{staticClass:"line-number"},[s._v("28")]),n("br"),n("span",{staticClass:"line-number"},[s._v("29")]),n("br"),n("span",{staticClass:"line-number"},[s._v("30")]),n("br"),n("span",{staticClass:"line-number"},[s._v("31")]),n("br"),n("span",{staticClass:"line-number"},[s._v("32")]),n("br"),n("span",{staticClass:"line-number"},[s._v("33")]),n("br"),n("span",{staticClass:"line-number"},[s._v("34")]),n("br"),n("span",{staticClass:"line-number"},[s._v("35")]),n("br"),n("span",{staticClass:"line-number"},[s._v("36")]),n("br"),n("span",{staticClass:"line-number"},[s._v("37")]),n("br"),n("span",{staticClass:"line-number"},[s._v("38")]),n("br"),n("span",{staticClass:"line-number"},[s._v("39")]),n("br")])])])}),[],!1,null,null,null);n.default=e.exports}}]);