(window.webpackJsonp=window.webpackJsonp||[]).push([[43],{450:function(s,n,a){"use strict";a.r(n);var e=a(2),t=Object(e.a)({},(function(){var s=this,n=s._self._c;return n("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[n("h1",{attrs:{id:"day38-动态规划-part01"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#day38-动态规划-part01"}},[s._v("#")]),s._v(" Day38 动态规划 part01")]),s._v(" "),n("h3",{attrs:{id:"动态规划理论基础"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#动态规划理论基础"}},[s._v("#")]),s._v(" 动态规划理论基础")]),s._v(" "),n("p",[n("strong",[s._v("什么是动态规划：")])]),s._v(" "),n("p",[s._v("Dynamic programming 简称DP，如果某一问题有很多重叠的子问题，使用动态规划最有效。")]),s._v(" "),n("p",[s._v("动态规划中每一个状态是由上一个状态推导出来的（区别于贪心，没有状态推导）")]),s._v(" "),n("p",[n("strong",[s._v("动态规划的解题步骤：")])]),s._v(" "),n("ul",[n("li",[s._v("确定DP数组以及下标含义")]),s._v(" "),n("li",[s._v("确定递推公式")]),s._v(" "),n("li",[s._v("DP数组初始化")]),s._v(" "),n("li",[s._v("确定遍历顺序")]),s._v(" "),n("li",[s._v("打印DP数组")])]),s._v(" "),n("p",[n("strong",[s._v("动态规划debug：")])]),s._v(" "),n("p",[s._v("最好方式是将DP数组打印出来，看是否是按照思路推导的。")]),s._v(" "),n("h3",{attrs:{id:"斐波那契数-leetcode-509"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#斐波那契数-leetcode-509"}},[s._v("#")]),s._v(" 斐波那契数 leetcode 509")]),s._v(" "),n("p",[s._v("题目："),n("strong",[s._v("斐波那契数")]),s._v(" （通常用 "),n("code",[s._v("F(n)")]),s._v(" 表示）形成的序列称为 "),n("strong",[s._v("斐波那契数列")]),s._v(" 。该数列由 "),n("code",[s._v("0")]),s._v(" 和 "),n("code",[s._v("1")]),s._v(" 开始，后面的每一项数字都是前面两项数字的和。也就是：")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("F(0) = 0，F(1) = 1\nF(n) = F(n - 1) + F(n - 2)，其中 n > 1\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br")])]),n("p",[s._v("给定 "),n("code",[s._v("n")]),s._v(" ，请计算 "),n("code",[s._v("F(n)")]),s._v(" 。")]),s._v(" "),n("p",[n("strong",[s._v("示例 1：")])]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("输入：n = 2\n输出：1\n解释：F(2) = F(1) + F(0) = 1 + 0 = 1\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br")])]),n("p",[s._v("思路：")]),s._v(" "),n("ul",[n("li",[s._v("确定DP数组以及下标含义： dp[i]  ：第i个斐波那契数为dp[i]。")]),s._v(" "),n("li",[s._v("确定递推公式：  dp[i] = dp[i -1] + dp[i - 2];")]),s._v(" "),n("li",[s._v("DP数组初始化:   dp[0] = 0, dp[1] = 1")]),s._v(" "),n("li",[s._v("确定遍历顺序:    从前向后")]),s._v(" "),n("li",[s._v("打印DP数组： 用于debug")])]),s._v(" "),n("div",{staticClass:"language-C++ line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("class Solution {\npublic:\n    int fib(int n) {\n        if (n <= 1) return n;\n        vector<int> dp(n + 1);\n        dp[0] = 0;\n        dp[1] = 1;\n        for (int i = 2; i <= n; ++i)\n        {\n            dp[i] = dp[i - 1]  + dp[i -2];\n        }\n        return dp[n];\n    }\n};\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br"),n("span",{staticClass:"line-number"},[s._v("13")]),n("br"),n("span",{staticClass:"line-number"},[s._v("14")]),n("br")])]),n("h3",{attrs:{id:"爬楼梯-leetcode-70"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#爬楼梯-leetcode-70"}},[s._v("#")]),s._v(" 爬楼梯 leetcode 70")]),s._v(" "),n("p",[s._v("题目：假设你正在爬楼梯。需要 "),n("code",[s._v("n")]),s._v(" 阶你才能到达楼顶。")]),s._v(" "),n("p",[s._v("每次你可以爬 "),n("code",[s._v("1")]),s._v(" 或 "),n("code",[s._v("2")]),s._v(" 个台阶。你有多少种不同的方法可以爬到楼顶呢？")]),s._v(" "),n("p",[n("strong",[s._v("示例 1：")])]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("输入：n = 2\n输出：2\n解释：有两种方法可以爬到楼顶。\n1. 1 阶 + 1 阶\n2. 2 阶\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br")])]),n("p",[n("strong",[s._v("示例 2：")])]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("输入：n = 3\n输出：3\n解释：有三种方法可以爬到楼顶。\n1. 1 阶 + 1 阶 + 1 阶\n2. 1 阶 + 2 阶\n3. 2 阶 + 1 阶 \n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br")])]),n("p",[n("strong",[s._v("提示：")])]),s._v(" "),n("ul",[n("li",[n("code",[s._v("1 <= n <= 45")])])]),s._v(" "),n("p",[s._v("思路：")]),s._v(" "),n("ul",[n("li",[s._v("确定DP数组以及下标含义： dp[i]  ：爬到i层楼梯有dp[i]种方法")]),s._v(" "),n("li",[s._v("确定递推公式：  爬一层有1种方法，二层有2种方法， 三层有dp[1] +dp[2]种，每一层都是由上一层的方法加上一层或者上上层的方法加上爬两层楼的方法，dp[i] = dp[i -1] + dp[i - 2];")]),s._v(" "),n("li",[s._v("DP数组初始化:   dp[0] = 0, dp[1] = 10")]),s._v(" "),n("li",[s._v("确定遍历顺序:    从前向后")]),s._v(" "),n("li",[s._v("打印DP数组： 用于debug")])]),s._v(" "),n("div",{staticClass:"language-C++ line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("class Solution {\npublic:\n    int climbStairs(int n) {\n        if (n <= 1) return n;\n        vector<int> dp(n + 1);\n        dp[1] = 1;\n        dp[2] = 2;\n        for (int i = 3; i < n + 1; ++i)\n        {\n            dp[i] = dp[i - 1] + dp[i - 2];\n        }\n        return dp[n];\n    }\n};\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br"),n("span",{staticClass:"line-number"},[s._v("13")]),n("br"),n("span",{staticClass:"line-number"},[s._v("14")]),n("br")])]),n("h3",{attrs:{id:"使用最小花费爬楼梯-leetcode-746"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#使用最小花费爬楼梯-leetcode-746"}},[s._v("#")]),s._v(" 使用最小花费爬楼梯 leetcode 746")]),s._v(" "),n("p",[s._v("题目：给你一个整数数组 "),n("code",[s._v("cost")]),s._v(" ，其中 "),n("code",[s._v("cost[i]")]),s._v(" 是从楼梯第 "),n("code",[s._v("i")]),s._v(" 个台阶向上爬需要支付的费用。一旦你支付此费用，即可选择向上爬一个或者两个台阶。")]),s._v(" "),n("p",[s._v("你可以选择从下标为 "),n("code",[s._v("0")]),s._v(" 或下标为 "),n("code",[s._v("1")]),s._v(" 的台阶开始爬楼梯。")]),s._v(" "),n("p",[s._v("请你计算并返回达到楼梯顶部的最低花费。")]),s._v(" "),n("p",[n("strong",[s._v("示例 1：")])]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("输入：cost = [10,15,20]\n输出：15\n解释：你将从下标为 1 的台阶开始。\n- 支付 15 ，向上爬两个台阶，到达楼梯顶部。\n总花费为 15 。\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br")])]),n("p",[n("strong",[s._v("示例 2：")])]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("输入：cost = [1,100,1,1,1,100,1,1,100,1]\n输出：6\n解释：你将从下标为 0 的台阶开始。\n- 支付 1 ，向上爬两个台阶，到达下标为 2 的台阶。\n- 支付 1 ，向上爬两个台阶，到达下标为 4 的台阶。\n- 支付 1 ，向上爬两个台阶，到达下标为 6 的台阶。\n- 支付 1 ，向上爬一个台阶，到达下标为 7 的台阶。\n- 支付 1 ，向上爬两个台阶，到达下标为 9 的台阶。\n- 支付 1 ，向上爬一个台阶，到达楼梯顶部。\n总花费为 6 。\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br")])]),n("p",[n("strong",[s._v("提示：")])]),s._v(" "),n("ul",[n("li",[n("code",[s._v("2 <= cost.length <= 1000")])]),s._v(" "),n("li",[n("code",[s._v("0 <= cost[i] <= 999")])])]),s._v(" "),n("p",[s._v("思路：")]),s._v(" "),n("ul",[n("li",[s._v("确定DP数组以及下标含义： dp[i]  ：爬到i层楼梯所需要的cost为dp[i]。")]),s._v(" "),n("li",[s._v("确定递推公式：  dp[i] = (dp[i -1] + cost[i -1]) ||  (dp[i - 2] + dp[i - 2]); 要求取最小，因此 dp[i] =min （ (dp[i -1] + cost[i -1]) ， (dp[i - 2] + dp[i - 2])）")]),s._v(" "),n("li",[s._v("DP数组初始化:   dp[0] = 0, dp[1] = 0, 由题可知从0或者1开始消耗都为0；")]),s._v(" "),n("li",[s._v("确定遍历顺序:    从前向后")]),s._v(" "),n("li",[s._v("打印DP数组： 用于debug")])]),s._v(" "),n("div",{staticClass:"language-C++ line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("class Solution {\npublic:\n    int minCostClimbingStairs(vector<int>& cost) {\n        vector<int> dp(cost.size() + 1);\n        dp[0] = 0;\n        dp[1] = 0;\n        for (int i = 2; i <= cost.size(); ++i)\n        {\n            dp[i] = min((cost[i - 1] + dp[i - 1]),(cost[i - 2] + dp[i - 2]));\n        }\n        return dp[cost.size()];\n    }\n};\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br"),n("span",{staticClass:"line-number"},[s._v("13")]),n("br")])])])}),[],!1,null,null,null);n.default=t.exports}}]);