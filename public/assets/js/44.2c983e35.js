(window.webpackJsonp=window.webpackJsonp||[]).push([[44],{450:function(s,n,i){"use strict";i.r(n);var a=i(2),t=Object(a.a)({},(function(){var s=this,n=s._self._c;return n("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[n("h1",{attrs:{id:"day39-动态规划-part02"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#day39-动态规划-part02"}},[s._v("#")]),s._v(" Day39 动态规划 part02")]),s._v(" "),n("h3",{attrs:{id:"动态规划理论基础"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#动态规划理论基础"}},[s._v("#")]),s._v(" 动态规划理论基础")]),s._v(" "),n("p",[n("strong",[s._v("什么是动态规划：")])]),s._v(" "),n("p",[s._v("Dynamic programming 简称DP，如果某一问题有很多重叠的子问题，使用动态规划最有效。")]),s._v(" "),n("p",[s._v("动态规划中每一个状态是由上一个状态推导出来的（区别于贪心，没有状态推导）")]),s._v(" "),n("p",[n("strong",[s._v("动态规划的解题步骤：")])]),s._v(" "),n("ul",[n("li",[s._v("确定DP数组以及下标含义")]),s._v(" "),n("li",[s._v("确定递推公式")]),s._v(" "),n("li",[s._v("DP数组初始化")]),s._v(" "),n("li",[s._v("确定遍历顺序")]),s._v(" "),n("li",[s._v("打印DP数组")])]),s._v(" "),n("p",[n("strong",[s._v("动态规划debug：")])]),s._v(" "),n("p",[s._v("最好方式是将DP数组打印出来，看是否是按照思路推导的。")]),s._v(" "),n("h3",{attrs:{id:"不同路径-leetcode-62"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#不同路径-leetcode-62"}},[s._v("#")]),s._v(" 不同路径 leetcode 62")]),s._v(" "),n("p",[s._v("题目：一个机器人位于一个 "),n("code",[s._v("m x n")]),s._v(" 网格的左上角 （起始点在下图中标记为 “Start” ）。")]),s._v(" "),n("p",[s._v("机器人每次只能向下或者向右移动一步。机器人试图达到网格的右下角（在下图中标记为 “Finish” ）。")]),s._v(" "),n("p",[s._v("问总共有多少条不同的路径？")]),s._v(" "),n("p",[n("strong",[s._v("示例 1：")])]),s._v(" "),n("p",[n("img",{attrs:{src:"https://assets.leetcode.com/uploads/2018/10/22/robot_maze.png",alt:"img"}})]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("输入：m = 3, n = 7\n输出：28\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br")])]),n("p",[n("strong",[s._v("示例 2：")])]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("输入：m = 3, n = 2\n输出：3\n解释：\n从左上角开始，总共有 3 条路径可以到达右下角。\n1. 向右 -> 向下 -> 向下\n2. 向下 -> 向下 -> 向右\n3. 向下 -> 向右 -> 向下\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br")])]),n("p",[s._v("思路：")]),s._v(" "),n("ul",[n("li",[n("p",[s._v("确定DP数组以及下标含义： dp[i] [j] ：走到i，j有几种路径。")])]),s._v(" "),n("li",[n("p",[s._v("确定递推公式： dp[i] [j] = dp[i - 1] [j] + dp[i] [j - 1];")])]),s._v(" "),n("li",[n("p",[s._v("DP数组初始化:")]),s._v(" "),n("ul",[n("li",[s._v("for (int i = 0; i < m; ++i) dp[i] [0] = 1;   //初始化第一行")]),s._v(" "),n("li",[s._v("for (int j = 0; j < n; ++j) dp[0] [j] = 1;   //初始化第一列")])])]),s._v(" "),n("li",[n("p",[s._v("确定遍历顺序:    从左向右 从上往下")])]),s._v(" "),n("li",[n("p",[s._v("打印DP数组： 用于debug")])])]),s._v(" "),n("div",{staticClass:"language-C++ line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("class Solution {\npublic:\n    int uniquePaths(int m, int n) {\n        vector<vector<int>> dp(m, vector<int>(n, 0));\n        for (int i = 0; i < m; ++i) dp[i][0] = 1;   //初始化第一行\n        for (int j = 0; j < n; ++j) dp[0][j] = 1;   //初始化第一列\n\n        for (int i = 1; i < m; ++i)\n        {\n            for (int j = 1; j < n; ++j)\n            {\n                dp[i][j] = dp[i - 1][j] + dp[i][j - 1];\n            }\n        }\n\n        return dp[m - 1][n - 1];\n    }\n};\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br"),n("span",{staticClass:"line-number"},[s._v("13")]),n("br"),n("span",{staticClass:"line-number"},[s._v("14")]),n("br"),n("span",{staticClass:"line-number"},[s._v("15")]),n("br"),n("span",{staticClass:"line-number"},[s._v("16")]),n("br"),n("span",{staticClass:"line-number"},[s._v("17")]),n("br"),n("span",{staticClass:"line-number"},[s._v("18")]),n("br")])]),n("h3",{attrs:{id:"不同路径ii-leetcode-63"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#不同路径ii-leetcode-63"}},[s._v("#")]),s._v(" 不同路径II leetcode 63")]),s._v(" "),n("p",[s._v("题目：一个机器人位于一个 m x n 网格的左上角 （起始点在下图中标记为“Start” ）。")]),s._v(" "),n("p",[s._v("机器人每次只能向下或者向右移动一步。机器人试图达到网格的右下角（在下图中标记为“Finish”）。")]),s._v(" "),n("p",[s._v("现在考虑网格中有障碍物。那么从左上角到右下角将会有多少条不同的路径？")]),s._v(" "),n("p",[n("img",{attrs:{src:"https://code-thinking-1253855093.file.myqcloud.com/pics/20210111204901338.png",alt:"img"}})]),s._v(" "),n("p",[s._v("网格中的障碍物和空位置分别用 1 和 0 来表示。")]),s._v(" "),n("p",[s._v("示例 1：")]),s._v(" "),n("p",[n("img",{attrs:{src:"https://code-thinking-1253855093.file.myqcloud.com/pics/20210111204939971.png",alt:"img"}})]),s._v(" "),n("ul",[n("li",[s._v("输入：obstacleGrid = [[0,0,0],[0,1,0],[0,0,0]]")]),s._v(" "),n("li",[s._v("输出：2 解释：")]),s._v(" "),n("li",[s._v("3x3 网格的正中间有一个障碍物。")]),s._v(" "),n("li",[s._v("从左上角到右下角一共有 2 条不同的路径：\n"),n("ol",[n("li",[s._v("向右 -> 向右 -> 向下 -> 向下")]),s._v(" "),n("li",[s._v("向下 -> 向下 -> 向右 -> 向右")])])])]),s._v(" "),n("p",[s._v("思路：")]),s._v(" "),n("p",[s._v("起始位置是障碍直接return。")]),s._v(" "),n("ul",[n("li",[s._v("确定DP数组以及下标含义： dp[i] [j] ：走到i，j有几种路径。")]),s._v(" "),n("li",[s._v("确定递推公式：if (obs[i] [j] == 0) dp[i] [j] = dp[i - 1] [j] + dp[i] [j - 1];")]),s._v(" "),n("li",[s._v("DP数组初始化:\n"),n("ul",[n("li",[s._v("for (int i = 0; i < m && obstacleGrid[i] [0] == 0; i++) dp[i] [0] = 1;")]),s._v(" "),n("li",[s._v("for (int j = 0; j < n && obstacleGrid[0] [j] == 0; j++) dp[0] [j] = 1;")])])]),s._v(" "),n("li",[s._v("确定遍历顺序:    从左向右 从上往下")]),s._v(" "),n("li",[s._v("打印DP数组： 用于debug")])]),s._v(" "),n("div",{staticClass:"language-C++ line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("class Solution {\npublic:\n    int uniquePathsWithObstacles(vector<vector<int>>& obstacleGrid) {\n        int m = obstacleGrid.size();\n        int n = obstacleGrid[0].size();\n\tif (obstacleGrid[m - 1][n - 1] == 1 || obstacleGrid[0][0] == 1) //如果在起点或终点出现了障碍，直接返回0\n            return 0;\n        vector<vector<int>> dp(m, vector<int>(n, 0));\n        for (int i = 0; i < m && obstacleGrid[i][0] == 0; i++) dp[i][0] = 1;\n        for (int j = 0; j < n && obstacleGrid[0][j] == 0; j++) dp[0][j] = 1;\n        for (int i = 1; i < m; i++) {\n            for (int j = 1; j < n; j++) {\n                if (obstacleGrid[i][j] == 1) continue;\n                dp[i][j] = dp[i - 1][j] + dp[i][j - 1];\n            }\n        }\n        return dp[m - 1][n - 1];\n    }\n};\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br"),n("span",{staticClass:"line-number"},[s._v("13")]),n("br"),n("span",{staticClass:"line-number"},[s._v("14")]),n("br"),n("span",{staticClass:"line-number"},[s._v("15")]),n("br"),n("span",{staticClass:"line-number"},[s._v("16")]),n("br"),n("span",{staticClass:"line-number"},[s._v("17")]),n("br"),n("span",{staticClass:"line-number"},[s._v("18")]),n("br"),n("span",{staticClass:"line-number"},[s._v("19")]),n("br")])]),n("h3",{attrs:{id:"使用最小花费爬楼梯-leetcode-746"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#使用最小花费爬楼梯-leetcode-746"}},[s._v("#")]),s._v(" 使用最小花费爬楼梯 leetcode 746")]),s._v(" "),n("p",[s._v("题目：给你一个整数数组 "),n("code",[s._v("cost")]),s._v(" ，其中 "),n("code",[s._v("cost[i]")]),s._v(" 是从楼梯第 "),n("code",[s._v("i")]),s._v(" 个台阶向上爬需要支付的费用。一旦你支付此费用，即可选择向上爬一个或者两个台阶。")]),s._v(" "),n("p",[s._v("你可以选择从下标为 "),n("code",[s._v("0")]),s._v(" 或下标为 "),n("code",[s._v("1")]),s._v(" 的台阶开始爬楼梯。")]),s._v(" "),n("p",[s._v("请你计算并返回达到楼梯顶部的最低花费。")]),s._v(" "),n("p",[n("strong",[s._v("示例 1：")])]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("输入：cost = [10,15,20]\n输出：15\n解释：你将从下标为 1 的台阶开始。\n- 支付 15 ，向上爬两个台阶，到达楼梯顶部。\n总花费为 15 。\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br")])]),n("p",[n("strong",[s._v("示例 2：")])]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("输入：cost = [1,100,1,1,1,100,1,1,100,1]\n输出：6\n解释：你将从下标为 0 的台阶开始。\n- 支付 1 ，向上爬两个台阶，到达下标为 2 的台阶。\n- 支付 1 ，向上爬两个台阶，到达下标为 4 的台阶。\n- 支付 1 ，向上爬两个台阶，到达下标为 6 的台阶。\n- 支付 1 ，向上爬一个台阶，到达下标为 7 的台阶。\n- 支付 1 ，向上爬两个台阶，到达下标为 9 的台阶。\n- 支付 1 ，向上爬一个台阶，到达楼梯顶部。\n总花费为 6 。\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br")])]),n("p",[n("strong",[s._v("提示：")])]),s._v(" "),n("ul",[n("li",[n("code",[s._v("2 <= cost.length <= 1000")])]),s._v(" "),n("li",[n("code",[s._v("0 <= cost[i] <= 999")])])]),s._v(" "),n("p",[s._v("思路：")]),s._v(" "),n("ul",[n("li",[s._v("确定DP数组以及下标含义： dp[i]  ：爬到i层楼梯所需要的cost为dp[i]。")]),s._v(" "),n("li",[s._v("确定递推公式：  dp[i] = (dp[i -1] + cost[i -1]) ||  (dp[i - 2] + dp[i - 2]); 要求取最小，因此 dp[i] =min （ (dp[i -1] + cost[i -1]) ， (dp[i - 2] + dp[i - 2])）")]),s._v(" "),n("li",[s._v("DP数组初始化:   dp[0] = 0, dp[1] = 0, 由题可知从0或者1开始消耗都为0；")]),s._v(" "),n("li",[s._v("确定遍历顺序:    从前向后")]),s._v(" "),n("li",[s._v("打印DP数组： 用于debug")])]),s._v(" "),n("div",{staticClass:"language-C++ line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("class Solution {\npublic:\n    int minCostClimbingStairs(vector<int>& cost) {\n        vector<int> dp(cost.size() + 1);\n        dp[0] = 0;\n        dp[1] = 0;\n        for (int i = 2; i <= cost.size(); ++i)\n        {\n            dp[i] = min((cost[i - 1] + dp[i - 1]),(cost[i - 2] + dp[i - 2]));\n        }\n        return dp[cost.size()];\n    }\n};\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br"),n("span",{staticClass:"line-number"},[s._v("13")]),n("br")])])])}),[],!1,null,null,null);n.default=t.exports}}]);