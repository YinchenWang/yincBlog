(window.webpackJsonp=window.webpackJsonp||[]).push([[45],{449:function(s,n,a){"use strict";a.r(n);var e=a(2),t=Object(e.a)({},(function(){var s=this,n=s._self._c;return n("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[n("h1",{attrs:{id:"day41-动态规划part03"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#day41-动态规划part03"}},[s._v("#")]),s._v(" Day41 动态规划part03")]),s._v(" "),n("h3",{attrs:{id:"动态规划理论基础"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#动态规划理论基础"}},[s._v("#")]),s._v(" 动态规划理论基础")]),s._v(" "),n("p",[n("strong",[s._v("什么是动态规划：")])]),s._v(" "),n("p",[s._v("Dynamic programming 简称DP，如果某一问题有很多重叠的子问题，使用动态规划最有效。")]),s._v(" "),n("p",[s._v("动态规划中每一个状态是由上一个状态推导出来的（区别于贪心，没有状态推导）")]),s._v(" "),n("p",[n("strong",[s._v("动态规划的解题步骤：")])]),s._v(" "),n("ul",[n("li",[s._v("确定DP数组以及下标含义")]),s._v(" "),n("li",[s._v("确定递推公式")]),s._v(" "),n("li",[s._v("DP数组初始化")]),s._v(" "),n("li",[s._v("确定遍历顺序")]),s._v(" "),n("li",[s._v("打印DP数组")])]),s._v(" "),n("p",[n("strong",[s._v("动态规划debug：")])]),s._v(" "),n("p",[s._v("最好方式是将DP数组打印出来，看是否是按照思路推导的。")]),s._v(" "),n("h3",{attrs:{id:"整数拆分-leetcode-343"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#整数拆分-leetcode-343"}},[s._v("#")]),s._v(" 整数拆分 leetcode 343")]),s._v(" "),n("p",[s._v("题目：给定一个正整数 "),n("code",[s._v("n")]),s._v(" ，将其拆分为 "),n("code",[s._v("k")]),s._v(" 个 "),n("strong",[s._v("正整数")]),s._v(" 的和（ "),n("code",[s._v("k >= 2")]),s._v(" ），并使这些整数的乘积最大化。")]),s._v(" "),n("p",[s._v("返回 "),n("em",[s._v("你可以获得的最大乘积")]),s._v(" 。")]),s._v(" "),n("p",[n("strong",[s._v("示例 1:")])]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("输入: n = 2\n输出: 1\n解释: 2 = 1 + 1, 1 × 1 = 1。\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br")])]),n("p",[n("strong",[s._v("示例 2:")])]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("输入: n = 10\n输出: 36\n解释: 10 = 3 + 3 + 4, 3 × 3 × 4 = 36。 \n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br")])]),n("p",[n("strong",[s._v("提示:")])]),s._v(" "),n("ul",[n("li",[n("code",[s._v("2 <= n <= 58")])])]),s._v(" "),n("p",[s._v("思路：")]),s._v(" "),n("ul",[n("li",[n("p",[s._v("确定DP数组以及下标含义：i 拆分后得到的最大乘积为 dp[i]")])]),s._v(" "),n("li",[n("p",[s._v("确定递推公式： dp[i] = max(dp[i], max((i - j) * j, dp[i - j]")])]),s._v(" "),n("li",[n("p",[s._v("DP数组初始化:   dp[2] = 1")])]),s._v(" "),n("li",[n("p",[s._v("确定遍历顺序:    从左向右 从上往下")])]),s._v(" "),n("li",[n("p",[s._v("打印DP数组： 用于debug")])])]),s._v(" "),n("div",{staticClass:"language-C++ line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("class Solution {\npublic:\n    int integerBreak(int n) {\n        vector<int> dp(n+1);\n        dp[2] = 1;\n        for (int i = 3; i <= n; ++i)\n        {\n            for (int j = 1; j <= i / 2; j++) {\n                dp[i] = max(dp[i], max((i - j) * j, dp[i - j] * j));\n            }\n        }\n        return dp[n];\n    }\n};\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br"),n("span",{staticClass:"line-number"},[s._v("13")]),n("br"),n("span",{staticClass:"line-number"},[s._v("14")]),n("br")])]),n("h3",{attrs:{id:"不同的二叉搜索树-leetcode-96"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#不同的二叉搜索树-leetcode-96"}},[s._v("#")]),s._v(" 不同的二叉搜索树 leetcode 96")]),s._v(" "),n("p",[s._v("题目：给你一个整数 "),n("code",[s._v("n")]),s._v(" ，求恰由 "),n("code",[s._v("n")]),s._v(" 个节点组成且节点值从 "),n("code",[s._v("1")]),s._v(" 到 "),n("code",[s._v("n")]),s._v(" 互不相同的 "),n("strong",[s._v("二叉搜索树")]),s._v(" 有多少种？返回满足题意的二叉搜索树的种数。")]),s._v(" "),n("p",[n("strong",[s._v("示例 1：")])]),s._v(" "),n("p",[n("img",{attrs:{src:"https://assets.leetcode.com/uploads/2021/01/18/uniquebstn3.jpg",alt:"img"}})]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("输入：n = 3\n输出：5\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br")])]),n("p",[n("strong",[s._v("示例 2：")])]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("输入：n = 1\n输出：1\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br")])]),n("p",[n("strong",[s._v("提示：")])]),s._v(" "),n("ul",[n("li",[n("code",[s._v("1 <= n <= 19")])])]),s._v(" "),n("p",[s._v("思路：")]),s._v(" "),n("ul",[n("li",[s._v("确定DP数组以及下标含义： i个节点有dp[i]种二叉搜索树。")]),s._v(" "),n("li",[s._v("确定递推公式：以 j 为头节点， dp[i] += dp[j - 1] * dp[i -j]")]),s._v(" "),n("li",[s._v("DP数组初始化:   dp[0] = 1, dp[1] = 1")]),s._v(" "),n("li",[s._v("确定遍历顺序:    从小到大遍历")]),s._v(" "),n("li",[s._v("打印DP数组： 用于debug")])]),s._v(" "),n("div",{staticClass:"language-C++ line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("class Solution {\npublic:\n    int numTrees(int n) {\n        vector<int> dp(n + 1);\n        dp[0] = 1;\n\n        for (int i = 1; i <= n; ++i)\n        {\n            for (int j = 1; j <= i; ++j)\n            {\n                dp[i] += dp[j - 1] * dp[i - j];\n            }\n        }\n        return dp[n];\n    }\n};\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br"),n("span",{staticClass:"line-number"},[s._v("13")]),n("br"),n("span",{staticClass:"line-number"},[s._v("14")]),n("br"),n("span",{staticClass:"line-number"},[s._v("15")]),n("br"),n("span",{staticClass:"line-number"},[s._v("16")]),n("br")])])])}),[],!1,null,null,null);n.default=t.exports}}]);