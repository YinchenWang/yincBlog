(window.webpackJsonp=window.webpackJsonp||[]).push([[49],{456:function(s,n,a){"use strict";a.r(n);var t=a(2),e=Object(t.a)({},(function(){var s=this,n=s._self._c;return n("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[n("h1",{attrs:{id:"day45-动态规划part07"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#day45-动态规划part07"}},[s._v("#")]),s._v(" Day45 动态规划part07")]),s._v(" "),n("h3",{attrs:{id:"动态规划理论基础"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#动态规划理论基础"}},[s._v("#")]),s._v(" 动态规划理论基础")]),s._v(" "),n("p",[n("strong",[s._v("背包问题：")])]),s._v(" "),n("p",[n("img",{attrs:{src:"https://code-thinking-1253855093.file.myqcloud.com/pics/20210117171307407.png",alt:""}})]),s._v(" "),n("p",[n("strong",[s._v("完全背包：")])]),s._v(" "),n("p",[s._v("有N件物品和一个最多能背重量为W的背包。第i件物品的重量是weight[i]，得到的价值是value[i] 。"),n("strong",[s._v("每件物品都有无限个（也就是可以放入背包多次）")]),s._v("，求解将哪些物品装入背包里物品价值总和最大")]),s._v(" "),n("p",[n("strong",[s._v("完全背包和01背包问题唯一不同的地方就是，每种物品有无限件")]),s._v("。")]),s._v(" "),n("p",[s._v("背包最大重量为4。")]),s._v(" "),n("p",[s._v("物品为：")]),s._v(" "),n("table",[n("thead",[n("tr",[n("th"),s._v(" "),n("th",[s._v("重量")]),s._v(" "),n("th",[s._v("价值")])])]),s._v(" "),n("tbody",[n("tr",[n("td",[s._v("物品0")]),s._v(" "),n("td",[s._v("1")]),s._v(" "),n("td",[s._v("15")])]),s._v(" "),n("tr",[n("td",[s._v("物品1")]),s._v(" "),n("td",[s._v("3")]),s._v(" "),n("td",[s._v("20")])]),s._v(" "),n("tr",[n("td",[s._v("物品2")]),s._v(" "),n("td",[s._v("4")]),s._v(" "),n("td",[s._v("30")])])])]),s._v(" "),n("div",{staticClass:"language-C++ line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v(" // 先遍历物品，在遍历背包\nvoid test_CompletePack() {\n    vector<int> weight = {1, 3, 4};\n    vector<int> value = {15, 20, 30};\n    int bagWeight = 4;\n    vector<int> dp(bagWeight + 1, 0);\n    for(int i = 0; i < weight.size(); i++) { // 遍历物品\n        for(int j = weight[i]; j <= bagWeight; j++) { // 遍历背包容量\n            dp[j] = max(dp[j], dp[j - weight[i]] + value[i]);\n        }\n    }\n    cout << dp[bagWeight] << endl;\n}\nint main() {\n    test_CompletePack();\n}\n\n// 先遍历背包，再遍历物品\nvoid test_CompletePack() {\n    vector<int> weight = {1, 3, 4};\n    vector<int> value = {15, 20, 30};\n    int bagWeight = 4;\n\n    vector<int> dp(bagWeight + 1, 0);\n\n    for(int j = 0; j <= bagWeight; j++) { // 遍历背包容量\n        for(int i = 0; i < weight.size(); i++) { // 遍历物品\n            if (j - weight[i] >= 0) dp[j] = max(dp[j], dp[j - weight[i]] + value[i]);\n        }\n    }\n    cout << dp[bagWeight] << endl;\n}\nint main() {\n    test_CompletePack();\n}\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br"),n("span",{staticClass:"line-number"},[s._v("13")]),n("br"),n("span",{staticClass:"line-number"},[s._v("14")]),n("br"),n("span",{staticClass:"line-number"},[s._v("15")]),n("br"),n("span",{staticClass:"line-number"},[s._v("16")]),n("br"),n("span",{staticClass:"line-number"},[s._v("17")]),n("br"),n("span",{staticClass:"line-number"},[s._v("18")]),n("br"),n("span",{staticClass:"line-number"},[s._v("19")]),n("br"),n("span",{staticClass:"line-number"},[s._v("20")]),n("br"),n("span",{staticClass:"line-number"},[s._v("21")]),n("br"),n("span",{staticClass:"line-number"},[s._v("22")]),n("br"),n("span",{staticClass:"line-number"},[s._v("23")]),n("br"),n("span",{staticClass:"line-number"},[s._v("24")]),n("br"),n("span",{staticClass:"line-number"},[s._v("25")]),n("br"),n("span",{staticClass:"line-number"},[s._v("26")]),n("br"),n("span",{staticClass:"line-number"},[s._v("27")]),n("br"),n("span",{staticClass:"line-number"},[s._v("28")]),n("br"),n("span",{staticClass:"line-number"},[s._v("29")]),n("br"),n("span",{staticClass:"line-number"},[s._v("30")]),n("br"),n("span",{staticClass:"line-number"},[s._v("31")]),n("br"),n("span",{staticClass:"line-number"},[s._v("32")]),n("br"),n("span",{staticClass:"line-number"},[s._v("33")]),n("br"),n("span",{staticClass:"line-number"},[s._v("34")]),n("br"),n("span",{staticClass:"line-number"},[s._v("35")]),n("br")])]),n("h3",{attrs:{id:"爬楼梯-leetcode-70"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#爬楼梯-leetcode-70"}},[s._v("#")]),s._v(" 爬楼梯 leetcode 70")]),s._v(" "),n("p",[s._v("题目：假设你正在爬楼梯。需要 "),n("code",[s._v("n")]),s._v(" 阶你才能到达楼顶。")]),s._v(" "),n("p",[s._v("每次你可以爬 "),n("code",[s._v("1")]),s._v(" 或 "),n("code",[s._v("2")]),s._v(" 个台阶。你有多少种不同的方法可以爬到楼顶呢？")]),s._v(" "),n("p",[n("strong",[s._v("之前DP做过，这次使用背包想法做")])]),s._v(" "),n("p",[n("strong",[s._v("示例 1：")])]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("输入：n = 2\n输出：2\n解释：有两种方法可以爬到楼顶。\n1. 1 阶 + 1 阶\n2. 2 阶\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br")])]),n("p",[n("strong",[s._v("示例 2：")])]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("输入：n = 3\n输出：3\n解释：有三种方法可以爬到楼顶。\n1. 1 阶 + 1 阶 + 1 阶\n2. 1 阶 + 2 阶\n3. 2 阶 + 1 阶\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br")])]),n("p",[s._v("思路：")]),s._v(" "),n("ul",[n("li",[s._v("确定DP数组以及下标含义： "),n("strong",[s._v("dp[i]：爬到有i个台阶的楼顶，有dp[i]种方法")]),s._v("。")]),s._v(" "),n("li",[s._v("确定递推公式：dp[i] += dp[i - j]")]),s._v(" "),n("li",[s._v("DP数组初始化:   dp[0] = 1")]),s._v(" "),n("li",[s._v("确定遍历顺序:    先遍历背包后遍历物品")]),s._v(" "),n("li",[s._v("打印DP数组： 用于debug")])]),s._v(" "),n("div",{staticClass:"language-C++ line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("class Solution {\npublic:\n    int climbStairs(int n) {\n        vector<int> dp(n + 1, 0);\n        dp[0] = 1;\n        for (int i = 1; i <= n; i++) { // 遍历背包\n            for (int j = 1; j <= m; j++) { // 遍历物品 m为最多一次能爬几层。 此处为2\n                if (i - j >= 0) dp[i] += dp[i - j];\n            }\n        }\n        return dp[n];\n    }\n};\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br"),n("span",{staticClass:"line-number"},[s._v("13")]),n("br")])]),n("h3",{attrs:{id:"零钱兑换-leetcode-322"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#零钱兑换-leetcode-322"}},[s._v("#")]),s._v(" 零钱兑换 leetcode 322")]),s._v(" "),n("p",[s._v("题目：给你一个整数数组 "),n("code",[s._v("coins")]),s._v(" ，表示不同面额的硬币；以及一个整数 "),n("code",[s._v("amount")]),s._v(" ，表示总金额。")]),s._v(" "),n("p",[s._v("计算并返回可以凑成总金额所需的 "),n("strong",[s._v("最少的硬币个数")]),s._v(" 。如果没有任何一种硬币组合能组成总金额，返回 "),n("code",[s._v("-1")]),s._v(" 。")]),s._v(" "),n("p",[s._v("你可以认为每种硬币的数量是无限的。")]),s._v(" "),n("p",[n("strong",[s._v("示例 1：")])]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("输入：coins = [1, 2, 5], amount = 11\n输出：3 \n解释：11 = 5 + 5 + 1\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br")])]),n("p",[n("strong",[s._v("示例 2：")])]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("输入：coins = [2], amount = 3\n输出：-1\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br")])]),n("p",[n("strong",[s._v("示例 3：")])]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("输入：coins = [1], amount = 0\n输出：0\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br")])]),n("p",[n("strong",[s._v("提示：")])]),s._v(" "),n("ul",[n("li",[n("code",[s._v("1 <= coins.length <= 12")])]),s._v(" "),n("li",[n("code",[s._v("1 <= coins[i] <= 231 - 1")])]),s._v(" "),n("li",[n("code",[s._v("0 <= amount <= 104")])])]),s._v(" "),n("p",[s._v("思路：")]),s._v(" "),n("ul",[n("li",[s._v("确定DP数组以及下标含义：  "),n("strong",[s._v("凑成总额为j的钱需要最少个数为dp[j]")])]),s._v(" "),n("li",[s._v("确定递推公式：dp[j] = min(dp[j - coins[i]] + 1, dp[j])")]),s._v(" "),n("li",[s._v("DP数组初始化:   dp[0] = 0")]),s._v(" "),n("li",[s._v("确定遍历顺序:    先物品后背包（两个顺序都可")]),s._v(" "),n("li",[s._v("打印DP数组： 用于debug")])]),s._v(" "),n("div",{staticClass:"language-C++ line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("class Solution {\npublic:\n    int coinChange(vector<int>& coins, int amount) {\n        vector<int> dp(amount + 1, INT_MAX);\n        dp[0] = 0;\n        for (int i = 0; i < coins.size(); ++i)\n        {\n            for (int j = coins[i]; j <= amount; ++j)\n            {\n                if (dp[j - coins[i]] != INT_MAX) { // 如果dp[j - coins[i]]是初始值则跳过\n                dp[j] = min(dp[j - coins[i]] + 1, dp[j]);\n                }\n            }\n        }\n        if (dp[amount] == INT_MAX) return -1;\n        return dp[amount];\n    }\n};\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br"),n("span",{staticClass:"line-number"},[s._v("13")]),n("br"),n("span",{staticClass:"line-number"},[s._v("14")]),n("br"),n("span",{staticClass:"line-number"},[s._v("15")]),n("br"),n("span",{staticClass:"line-number"},[s._v("16")]),n("br"),n("span",{staticClass:"line-number"},[s._v("17")]),n("br"),n("span",{staticClass:"line-number"},[s._v("18")]),n("br")])]),n("h3",{attrs:{id:"完全平方数-leetcode-279"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#完全平方数-leetcode-279"}},[s._v("#")]),s._v(" 完全平方数 leetcode 279")]),s._v(" "),n("p",[s._v("题目：给你一个整数 "),n("code",[s._v("n")]),s._v(" ，返回 "),n("em",[s._v("和为 "),n("code",[s._v("n")]),s._v(" 的完全平方数的最少数量")]),s._v(" 。")]),s._v(" "),n("p",[n("strong",[s._v("完全平方数")]),s._v(" 是一个整数，其值等于另一个整数的平方；换句话说，其值等于一个整数自乘的积。例如，"),n("code",[s._v("1")]),s._v("、"),n("code",[s._v("4")]),s._v("、"),n("code",[s._v("9")]),s._v(" 和 "),n("code",[s._v("16")]),s._v(" 都是完全平方数，而 "),n("code",[s._v("3")]),s._v(" 和 "),n("code",[s._v("11")]),s._v(" 不是。")]),s._v(" "),n("p",[n("strong",[s._v("示例 1：")])]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("输入：n = 12\n输出：3 \n解释：12 = 4 + 4 + 4\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br")])]),n("p",[n("strong",[s._v("示例 2：")])]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("输入：n = 13\n输出：2\n解释：13 = 4 + 9\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br")])]),n("p",[n("strong",[s._v("提示：")])]),s._v(" "),n("ul",[n("li",[n("code",[s._v("1 <= n <= 104")])])]),s._v(" "),n("p",[s._v("思路：")]),s._v(" "),n("ul",[n("li",[s._v("确定DP数组以及下标含义： 和为j的完全平方数的个数为dp[j] （任何正整数都能用1凑出来）")]),s._v(" "),n("li",[s._v("确定递推公式：dp[j] = min(dp[j - i * i] + 1, dp[j])")]),s._v(" "),n("li",[s._v("DP数组初始化:   dp[0] = 0")]),s._v(" "),n("li",[s._v("确定遍历顺序:    都可. 此处先物品后背包")]),s._v(" "),n("li",[s._v("打印DP数组： 用于debug")])]),s._v(" "),n("div",{staticClass:"language-C++ line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("class Solution {\npublic:\n    int numSquares(int n) {\n        vector<int> dp(n + 1, INT_MAX);\n        dp[0] = 0;\n\n        for (int i = 1; i * i <= n; i++) \n        { // 遍历物品\n            for (int j = i * i; j <= n; j++) \n            { // 遍历背包\n                dp[j] = min(dp[j - i * i] + 1, dp[j]);\n            }\n        }\n        return dp[n];\n    }\n};\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br"),n("span",{staticClass:"line-number"},[s._v("13")]),n("br"),n("span",{staticClass:"line-number"},[s._v("14")]),n("br"),n("span",{staticClass:"line-number"},[s._v("15")]),n("br"),n("span",{staticClass:"line-number"},[s._v("16")]),n("br")])])])}),[],!1,null,null,null);n.default=e.exports}}]);