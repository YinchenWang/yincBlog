(window.webpackJsonp=window.webpackJsonp||[]).push([[50],{457:function(s,t,n){"use strict";n.r(t);var a=n(2),e=Object(a.a)({},(function(){var s=this,t=s._self._c;return t("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[t("h1",{attrs:{id:"day46-动态规划part08"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#day46-动态规划part08"}},[s._v("#")]),s._v(" Day46 动态规划part08")]),s._v(" "),t("h3",{attrs:{id:"动态规划理论基础"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#动态规划理论基础"}},[s._v("#")]),s._v(" 动态规划理论基础")]),s._v(" "),t("p",[t("strong",[s._v("背包问题：")])]),s._v(" "),t("p",[t("img",{attrs:{src:"https://code-thinking-1253855093.file.myqcloud.com/pics/20210117171307407.png",alt:""}})]),s._v(" "),t("p",[t("strong",[s._v("完全背包：")])]),s._v(" "),t("p",[s._v("有N件物品和一个最多能背重量为W的背包。第i件物品的重量是weight[i]，得到的价值是value[i] 。"),t("strong",[s._v("每件物品都有无限个（也就是可以放入背包多次）")]),s._v("，求解将哪些物品装入背包里物品价值总和最大")]),s._v(" "),t("p",[t("strong",[s._v("完全背包和01背包问题唯一不同的地方就是，每种物品有无限件")]),s._v("。")]),s._v(" "),t("p",[s._v("背包最大重量为4。")]),s._v(" "),t("p",[s._v("物品为：")]),s._v(" "),t("table",[t("thead",[t("tr",[t("th"),s._v(" "),t("th",[s._v("重量")]),s._v(" "),t("th",[s._v("价值")])])]),s._v(" "),t("tbody",[t("tr",[t("td",[s._v("物品0")]),s._v(" "),t("td",[s._v("1")]),s._v(" "),t("td",[s._v("15")])]),s._v(" "),t("tr",[t("td",[s._v("物品1")]),s._v(" "),t("td",[s._v("3")]),s._v(" "),t("td",[s._v("20")])]),s._v(" "),t("tr",[t("td",[s._v("物品2")]),s._v(" "),t("td",[s._v("4")]),s._v(" "),t("td",[s._v("30")])])])]),s._v(" "),t("div",{staticClass:"language-C++ line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v(" // 先遍历物品，在遍历背包\nvoid test_CompletePack() {\n    vector<int> weight = {1, 3, 4};\n    vector<int> value = {15, 20, 30};\n    int bagWeight = 4;\n    vector<int> dp(bagWeight + 1, 0);\n    for(int i = 0; i < weight.size(); i++) { // 遍历物品\n        for(int j = weight[i]; j <= bagWeight; j++) { // 遍历背包容量\n            dp[j] = max(dp[j], dp[j - weight[i]] + value[i]);\n        }\n    }\n    cout << dp[bagWeight] << endl;\n}\nint main() {\n    test_CompletePack();\n}\n\n// 先遍历背包，再遍历物品\nvoid test_CompletePack() {\n    vector<int> weight = {1, 3, 4};\n    vector<int> value = {15, 20, 30};\n    int bagWeight = 4;\n\n    vector<int> dp(bagWeight + 1, 0);\n\n    for(int j = 0; j <= bagWeight; j++) { // 遍历背包容量\n        for(int i = 0; i < weight.size(); i++) { // 遍历物品\n            if (j - weight[i] >= 0) dp[j] = max(dp[j], dp[j - weight[i]] + value[i]);\n        }\n    }\n    cout << dp[bagWeight] << endl;\n}\nint main() {\n    test_CompletePack();\n}\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br"),t("span",{staticClass:"line-number"},[s._v("10")]),t("br"),t("span",{staticClass:"line-number"},[s._v("11")]),t("br"),t("span",{staticClass:"line-number"},[s._v("12")]),t("br"),t("span",{staticClass:"line-number"},[s._v("13")]),t("br"),t("span",{staticClass:"line-number"},[s._v("14")]),t("br"),t("span",{staticClass:"line-number"},[s._v("15")]),t("br"),t("span",{staticClass:"line-number"},[s._v("16")]),t("br"),t("span",{staticClass:"line-number"},[s._v("17")]),t("br"),t("span",{staticClass:"line-number"},[s._v("18")]),t("br"),t("span",{staticClass:"line-number"},[s._v("19")]),t("br"),t("span",{staticClass:"line-number"},[s._v("20")]),t("br"),t("span",{staticClass:"line-number"},[s._v("21")]),t("br"),t("span",{staticClass:"line-number"},[s._v("22")]),t("br"),t("span",{staticClass:"line-number"},[s._v("23")]),t("br"),t("span",{staticClass:"line-number"},[s._v("24")]),t("br"),t("span",{staticClass:"line-number"},[s._v("25")]),t("br"),t("span",{staticClass:"line-number"},[s._v("26")]),t("br"),t("span",{staticClass:"line-number"},[s._v("27")]),t("br"),t("span",{staticClass:"line-number"},[s._v("28")]),t("br"),t("span",{staticClass:"line-number"},[s._v("29")]),t("br"),t("span",{staticClass:"line-number"},[s._v("30")]),t("br"),t("span",{staticClass:"line-number"},[s._v("31")]),t("br"),t("span",{staticClass:"line-number"},[s._v("32")]),t("br"),t("span",{staticClass:"line-number"},[s._v("33")]),t("br"),t("span",{staticClass:"line-number"},[s._v("34")]),t("br"),t("span",{staticClass:"line-number"},[s._v("35")]),t("br")])]),t("h3",{attrs:{id:"单词拆分-leetcode-139"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#单词拆分-leetcode-139"}},[s._v("#")]),s._v(" 单词拆分 leetcode 139")]),s._v(" "),t("p",[s._v("题目：给你一个字符串 "),t("code",[s._v("s")]),s._v(" 和一个字符串列表 "),t("code",[s._v("wordDict")]),s._v(" 作为字典。请你判断是否可以利用字典中出现的单词拼接出 "),t("code",[s._v("s")]),s._v(" 。")]),s._v(" "),t("p",[s._v("**注意：**不要求字典中出现的单词全部都使用，并且字典中的单词可以重复使用。")]),s._v(" "),t("p",[t("strong",[s._v("示例 1：")])]),s._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v('输入: s = "leetcode", wordDict = ["leet", "code"]\n输出: true\n解释: 返回 true 因为 "leetcode" 可以由 "leet" 和 "code" 拼接成。\n')])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br")])]),t("p",[t("strong",[s._v("示例 2：")])]),s._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v('输入: s = "applepenapple", wordDict = ["apple", "pen"]\n输出: true\n解释: 返回 true 因为 "applepenapple" 可以由 "apple" "pen" "apple" 拼接成。\n     注意，你可以重复使用字典中的单词。\n')])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br")])]),t("p",[t("strong",[s._v("示例 3：")])]),s._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v('输入: s = "catsandog", wordDict = ["cats", "dog", "sand", "and", "cat"]\n输出: false\n')])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br")])]),t("p",[t("strong",[s._v("提示：")])]),s._v(" "),t("ul",[t("li",[t("code",[s._v("1 <= s.length <= 300")])]),s._v(" "),t("li",[t("code",[s._v("1 <= wordDict.length <= 1000")])]),s._v(" "),t("li",[t("code",[s._v("1 <= wordDict[i].length <= 20")])]),s._v(" "),t("li",[t("code",[s._v("s")]),s._v(" 和 "),t("code",[s._v("wordDict[i]")]),s._v(" 仅由小写英文字母组成")]),s._v(" "),t("li",[t("code",[s._v("wordDict")]),s._v(" 中的所有字符串 "),t("strong",[s._v("互不相同")])])]),s._v(" "),t("p",[s._v("思路：")]),s._v(" "),t("ul",[t("li",[s._v("确定DP数组以及下标含义： "),t("strong",[s._v("字符串长度为i的话，dp[i]为true，表示可以拆分为一个或多个在字典中出现的单词")]),s._v("。")]),s._v(" "),t("li",[s._v("确定递推公式：如果确定dp[j] 是true，且 [j, i] 这个区间的子串出现在字典里，那么dp[i]一定是true。（j < i ）。")]),s._v(" "),t("li",[s._v("DP数组初始化:   dp[0] = true")]),s._v(" "),t("li",[s._v("确定遍历顺序:    先遍历背包后遍历物品 //排列")]),s._v(" "),t("li",[s._v("打印DP数组： 用于debug")])]),s._v(" "),t("div",{staticClass:"language-C++ line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v("class Solution {\npublic:\n    bool wordBreak(string s, vector<string>& wordDict) {\n        unordered_set<string> wordSet(wordDict.begin(), wordDict.end());\n        vector<bool> dp(s.size() + 1, false);\n        dp[0] = true;\n        for (int i = 1; i <= s.size(); i++) {   // 遍历背包\n            for (int j = 0; j < i; j++) {       // 遍历物品\n                string word = s.substr(j, i - j); //substr(起始位置，截取的个数)\n                if (wordSet.find(word) != wordSet.end() && dp[j]) {\n                    dp[i] = true;\n                }\n            }\n        }\n        return dp[s.size()];\n    }\n};\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br"),t("span",{staticClass:"line-number"},[s._v("10")]),t("br"),t("span",{staticClass:"line-number"},[s._v("11")]),t("br"),t("span",{staticClass:"line-number"},[s._v("12")]),t("br"),t("span",{staticClass:"line-number"},[s._v("13")]),t("br"),t("span",{staticClass:"line-number"},[s._v("14")]),t("br"),t("span",{staticClass:"line-number"},[s._v("15")]),t("br"),t("span",{staticClass:"line-number"},[s._v("16")]),t("br"),t("span",{staticClass:"line-number"},[s._v("17")]),t("br")])]),t("h3",{attrs:{id:"多重背包"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#多重背包"}},[s._v("#")]),s._v(" 多重背包")]),s._v(" "),t("p",[s._v("有N种物品和一个容量为V 的背包。第i种物品最多有Mi件可用，每件耗费的空间是Ci ，价值是Wi 。求解将哪些物品装入背包可使这些物品的耗费的空间 总和不超过背包容量，且价值总和最大。")]),s._v(" "),t("p",[s._v("例如：")]),s._v(" "),t("p",[s._v("背包最大重量为10。")]),s._v(" "),t("p",[s._v("物品为：")]),s._v(" "),t("table",[t("thead",[t("tr",[t("th"),s._v(" "),t("th",[s._v("重量")]),s._v(" "),t("th",[s._v("价值")]),s._v(" "),t("th",[s._v("数量")])])]),s._v(" "),t("tbody",[t("tr",[t("td",[s._v("物品0")]),s._v(" "),t("td",[s._v("1")]),s._v(" "),t("td",[s._v("15")]),s._v(" "),t("td",[s._v("2")])]),s._v(" "),t("tr",[t("td",[s._v("物品1")]),s._v(" "),t("td",[s._v("3")]),s._v(" "),t("td",[s._v("20")]),s._v(" "),t("td",[s._v("3")])]),s._v(" "),t("tr",[t("td",[s._v("物品2")]),s._v(" "),t("td",[s._v("4")]),s._v(" "),t("td",[s._v("30")]),s._v(" "),t("td",[s._v("2")])])])]),s._v(" "),t("p",[s._v("问背包能背的物品最大价值是多少？")]),s._v(" "),t("p",[s._v("（每件物品最多有Mi件可用，把Mi件摊开，其实就是一个01背包问题了。）")]),s._v(" "),t("table",[t("thead",[t("tr",[t("th"),s._v(" "),t("th",[s._v("重量")]),s._v(" "),t("th",[s._v("价值")]),s._v(" "),t("th",[s._v("数量")])])]),s._v(" "),t("tbody",[t("tr",[t("td",[s._v("物品0")]),s._v(" "),t("td",[s._v("1")]),s._v(" "),t("td",[s._v("15")]),s._v(" "),t("td",[s._v("1")])]),s._v(" "),t("tr",[t("td",[s._v("物品0")]),s._v(" "),t("td",[s._v("1")]),s._v(" "),t("td",[s._v("15")]),s._v(" "),t("td",[s._v("1")])]),s._v(" "),t("tr",[t("td",[s._v("物品1")]),s._v(" "),t("td",[s._v("3")]),s._v(" "),t("td",[s._v("20")]),s._v(" "),t("td",[s._v("1")])]),s._v(" "),t("tr",[t("td",[s._v("物品1")]),s._v(" "),t("td",[s._v("3")]),s._v(" "),t("td",[s._v("20")]),s._v(" "),t("td",[s._v("1")])]),s._v(" "),t("tr",[t("td",[s._v("物品1")]),s._v(" "),t("td",[s._v("3")]),s._v(" "),t("td",[s._v("20")]),s._v(" "),t("td",[s._v("1")])]),s._v(" "),t("tr",[t("td",[s._v("物品2")]),s._v(" "),t("td",[s._v("4")]),s._v(" "),t("td",[s._v("30")]),s._v(" "),t("td",[s._v("1")])]),s._v(" "),t("tr",[t("td",[s._v("物品2")]),s._v(" "),t("td",[s._v("4")]),s._v(" "),t("td",[s._v("30")]),s._v(" "),t("td",[s._v("1")])])])]),s._v(" "),t("p",[s._v("毫无区别，这就转成了一个01背包问题了，且每个物品只用一次。")]),s._v(" "),t("div",{staticClass:"language-C++ line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v('void test_multi_pack() {\n    vector<int> weight = {1, 3, 4};\n    vector<int> value = {15, 20, 30};\n    vector<int> nums = {2, 3, 2};\n    int bagWeight = 10;\n    vector<int> dp(bagWeight + 1, 0);\n\n\n    for(int i = 0; i < weight.size(); i++) { // 遍历物品\n        for(int j = bagWeight; j >= weight[i]; j--) { // 遍历背包容量\n            // 以上为01背包，然后加一个遍历个数\n            for (int k = 1; k <= nums[i] && (j - k * weight[i]) >= 0; k++) { // 遍历个数\n                dp[j] = max(dp[j], dp[j - k * weight[i]] + k * value[i]);\n            }\n        }\n        // 打印一下dp数组\n        for (int j = 0; j <= bagWeight; j++) {\n            cout << dp[j] << " ";\n        }\n        cout << endl;\n    }\n    cout << dp[bagWeight] << endl;\n}\nint main() {\n    test_multi_pack();\n}\n')])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br"),t("span",{staticClass:"line-number"},[s._v("10")]),t("br"),t("span",{staticClass:"line-number"},[s._v("11")]),t("br"),t("span",{staticClass:"line-number"},[s._v("12")]),t("br"),t("span",{staticClass:"line-number"},[s._v("13")]),t("br"),t("span",{staticClass:"line-number"},[s._v("14")]),t("br"),t("span",{staticClass:"line-number"},[s._v("15")]),t("br"),t("span",{staticClass:"line-number"},[s._v("16")]),t("br"),t("span",{staticClass:"line-number"},[s._v("17")]),t("br"),t("span",{staticClass:"line-number"},[s._v("18")]),t("br"),t("span",{staticClass:"line-number"},[s._v("19")]),t("br"),t("span",{staticClass:"line-number"},[s._v("20")]),t("br"),t("span",{staticClass:"line-number"},[s._v("21")]),t("br"),t("span",{staticClass:"line-number"},[s._v("22")]),t("br"),t("span",{staticClass:"line-number"},[s._v("23")]),t("br"),t("span",{staticClass:"line-number"},[s._v("24")]),t("br"),t("span",{staticClass:"line-number"},[s._v("25")]),t("br"),t("span",{staticClass:"line-number"},[s._v("26")]),t("br")])]),t("p",[s._v("背包问题总结后边添加")])])}),[],!1,null,null,null);t.default=e.exports}}]);