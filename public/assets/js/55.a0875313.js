(window.webpackJsonp=window.webpackJsonp||[]).push([[55],{461:function(s,n,e){"use strict";e.r(n);var a=e(2),t=Object(a.a)({},(function(){var s=this,n=s._self._c;return n("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[n("h1",{attrs:{id:"day52-动态规划part13"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#day52-动态规划part13"}},[s._v("#")]),s._v(" Day52 动态规划part13")]),s._v(" "),n("h3",{attrs:{id:"动态规划理论基础"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#动态规划理论基础"}},[s._v("#")]),s._v(" 动态规划理论基础")]),s._v(" "),n("h3",{attrs:{id:"最长递增子序列-leetcode-300"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#最长递增子序列-leetcode-300"}},[s._v("#")]),s._v(" 最长递增子序列 leetcode 300")]),s._v(" "),n("p",[s._v("题目：给你一个整数数组 "),n("code",[s._v("nums")]),s._v(" ，找到其中最长严格递增子序列的长度。")]),s._v(" "),n("p",[n("strong",[s._v("子序列")]),s._v(" 是由数组派生而来的序列，删除（或不删除）数组中的元素而不改变其余元素的顺序。例如，"),n("code",[s._v("[3,6,2,7]")]),s._v(" 是数组 "),n("code",[s._v("[0,3,1,6,2,2,7]")]),s._v(" 的子序列。")]),s._v(" "),n("p",[n("strong",[s._v("示例 1：")])]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("输入：nums = [10,9,2,5,3,7,101,18]\n输出：4\n解释：最长递增子序列是 [2,3,7,101]，因此长度为 4 。\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br")])]),n("p",[n("strong",[s._v("示例 2：")])]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("输入：nums = [0,1,0,3,2,3]\n输出：4\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br")])]),n("p",[n("strong",[s._v("示例 3：")])]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("输入：nums = [7,7,7,7,7,7,7]\n输出：1 \n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br")])]),n("p",[n("strong",[s._v("提示：")])]),s._v(" "),n("ul",[n("li",[n("code",[s._v("1 <= nums.length <= 2500")])]),s._v(" "),n("li",[n("code",[s._v("-104 <= nums[i] <= 104")])])]),s._v(" "),n("p",[s._v("思路：")]),s._v(" "),n("ul",[n("li",[n("p",[s._v("确定DP数组以及下标含义: 以nums[i]w为结尾的数组的最长递增子序列的长度为dp[i]")])]),s._v(" "),n("li",[n("p",[s._v("确定递推公式：if (nums[i] > nums[j]) dp[i] = max(dp[i], dp[j] + 1);")])]),s._v(" "),n("li",[n("p",[s._v("DP数组初始化:   每一个i，对应的dp[i]（即最长递增子序列）起始大小至少都是1.")])]),s._v(" "),n("li",[n("p",[s._v("确定遍历顺序:    从前往后")])]),s._v(" "),n("li",[n("p",[s._v("打印DP数组： 用于debug")])])]),s._v(" "),n("div",{staticClass:"language-C++ line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("class Solution {\npublic:\n    int lengthOfLIS(vector<int>& nums) {\n        if (nums.size() <= 1)   return nums.size();\n        int result = 0;\n        vector<int> dp(nums.size(), 1);\n        for (int i = 1; i < nums.size(); ++i)\n        {\n            for (int j = 0; j < i; ++j)\n            {\n                if (nums[i] > nums[j]) dp[i] = max(dp[i], dp[j] + 1);\n            }\n            if (dp[i] > result) result = dp[i]; // 取长的子序列\n        }\n        return result;\n    }\n};\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br"),n("span",{staticClass:"line-number"},[s._v("13")]),n("br"),n("span",{staticClass:"line-number"},[s._v("14")]),n("br"),n("span",{staticClass:"line-number"},[s._v("15")]),n("br"),n("span",{staticClass:"line-number"},[s._v("16")]),n("br"),n("span",{staticClass:"line-number"},[s._v("17")]),n("br")])]),n("h3",{attrs:{id:"最长连续递增序列-leetcode-674"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#最长连续递增序列-leetcode-674"}},[s._v("#")]),s._v(" 最长连续递增序列 leetcode 674")]),s._v(" "),n("p",[s._v("题目：给定一个未经排序的整数数组，找到最长且 "),n("strong",[s._v("连续递增的子序列")]),s._v("，并返回该序列的长度。")]),s._v(" "),n("p",[n("strong",[s._v("连续递增的子序列")]),s._v(" 可以由两个下标 "),n("code",[s._v("l")]),s._v(" 和 "),n("code",[s._v("r")]),s._v("（"),n("code",[s._v("l < r")]),s._v("）确定，如果对于每个 "),n("code",[s._v("l <= i < r")]),s._v("，都有 "),n("code",[s._v("nums[i] < nums[i + 1]")]),s._v(" ，那么子序列 "),n("code",[s._v("[nums[l], nums[l + 1], ..., nums[r - 1], nums[r]]")]),s._v(" 就是连续递增子序列。")]),s._v(" "),n("p",[n("strong",[s._v("示例 1：")])]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("输入：nums = [1,3,5,4,7]\n输出：3\n解释：最长连续递增序列是 [1,3,5], 长度为3。\n尽管 [1,3,5,7] 也是升序的子序列, 但它不是连续的，因为 5 和 7 在原数组里被 4 隔开。 \n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br")])]),n("p",[n("strong",[s._v("示例 2：")])]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("输入：nums = [2,2,2,2,2]\n输出：1\n解释：最长连续递增序列是 [2], 长度为1。 \n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br")])]),n("p",[n("strong",[s._v("提示：")])]),s._v(" "),n("ul",[n("li",[n("code",[s._v("1 <= nums.length <= 104")])]),s._v(" "),n("li",[n("code",[s._v("-109 <= nums[i] <= 109")])])]),s._v(" "),n("p",[s._v("思路：")]),s._v(" "),n("ul",[n("li",[n("p",[s._v("确定DP数组以及下标含义：以i为结尾的最长连续递增子序列的长度为dp[i]")])]),s._v(" "),n("li",[n("p",[s._v("确定递推公式：if(nums[i] > nums[i - 1])  dp[i] = dp[i - 1] + 1")])]),s._v(" "),n("li",[n("p",[s._v("DP数组初始化:   dp[i] = 1")])]),s._v(" "),n("li",[n("p",[s._v("确定遍历顺序:    从前往后")])]),s._v(" "),n("li",[n("p",[s._v("打印DP数组： 用于debug")])])]),s._v(" "),n("div",{staticClass:"language-C++ line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("class Solution {\npublic:\n    int findLengthOfLCIS(vector<int>& nums) {\n        vector<int> dp(nums.size(), 1);\n        int result = 1;\n        for (int i = 1; i < nums.size(); ++i)\n        {\n            if (nums[i] > nums[i - 1])\n            {\n                dp[i] = dp[i - 1] + 1;\n            }\n            if (dp[i] > result) result = dp[i];\n        }\n        return result;\n    }\n};\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br"),n("span",{staticClass:"line-number"},[s._v("13")]),n("br"),n("span",{staticClass:"line-number"},[s._v("14")]),n("br"),n("span",{staticClass:"line-number"},[s._v("15")]),n("br"),n("span",{staticClass:"line-number"},[s._v("16")]),n("br")])]),n("h3",{attrs:{id:"最长重复子数组-leetcode-718"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#最长重复子数组-leetcode-718"}},[s._v("#")]),s._v(" 最长重复子数组 leetcode 718")]),s._v(" "),n("p",[s._v("题目：给两个整数数组 "),n("code",[s._v("nums1")]),s._v(" 和 "),n("code",[s._v("nums2")]),s._v(" ，返回 "),n("em",[s._v("两个数组中 "),n("strong",[s._v("公共的")]),s._v(" 、长度最长的子数组的长度")]),s._v(" 。")]),s._v(" "),n("p",[n("strong",[s._v("示例 1：")])]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("输入：nums1 = [1,2,3,2,1], nums2 = [3,2,1,4,7]\n输出：3\n解释：长度最长的公共子数组是 [3,2,1] 。\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br")])]),n("p",[n("strong",[s._v("示例 2：")])]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("输入：nums1 = [0,0,0,0,0], nums2 = [0,0,0,0,0]\n输出：5\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br")])]),n("p",[n("strong",[s._v("提示：")])]),s._v(" "),n("ul",[n("li",[n("code",[s._v("1 <= nums1.length, nums2.length <= 1000")])]),s._v(" "),n("li",[n("code",[s._v("0 <= nums1[i], nums2[i] <= 100")])])]),s._v(" "),n("p",[s._v("思路：")]),s._v(" "),n("ul",[n("li",[n("p",[s._v("确定DP数组以及下标含义：以 i - 1 为结尾的nums1 和以 j - 1 为结尾的nums2的最长重复子数组的长度为dp[i] [j]  (不用i，j结尾是为了避免第一行初始化)")])]),s._v(" "),n("li",[n("p",[s._v("确定递推公式：if(nums1[i - 1] == nums2[j - 1])  dp[i] [j] = dp[i - 1] [j - 1] + 1")])]),s._v(" "),n("li",[n("p",[s._v("DP数组初始化:   dp[i] [j] = 0")])]),s._v(" "),n("li",[n("p",[s._v("确定遍历顺序:    从前往后")])]),s._v(" "),n("li",[n("p",[s._v("打印DP数组： 用于debug")]),s._v(" "),n("img",{staticStyle:{zoom:"50%"},attrs:{src:"https://code-thinking-1253855093.file.myqcloud.com/pics/2021011215282060.jpg"}})])]),s._v(" "),n("div",{staticClass:"language-C++ line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("class Solution {\npublic:\n    int findLength(vector<int>& nums1, vector<int>& nums2) {\n        vector<vector<int>> dp (nums1.size() + 1, vector<int>(nums2.size() + 1, 0));\n        int res = 0;\n\n        for (int i = 1; i <= nums1.size(); ++i)\n        {\n            for (int j = 1; j <= nums2.size(); ++j)\n            {\n                if (nums1[i - 1] == nums2[j - 1])\n                {\n                    dp[i][j] = dp[i - 1][j - 1] + 1;\n                }\n                if (dp[i][j] > res) res = dp[i][j];\n            }\n        }\n        return res;\n    }\n};\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br"),n("span",{staticClass:"line-number"},[s._v("13")]),n("br"),n("span",{staticClass:"line-number"},[s._v("14")]),n("br"),n("span",{staticClass:"line-number"},[s._v("15")]),n("br"),n("span",{staticClass:"line-number"},[s._v("16")]),n("br"),n("span",{staticClass:"line-number"},[s._v("17")]),n("br"),n("span",{staticClass:"line-number"},[s._v("18")]),n("br"),n("span",{staticClass:"line-number"},[s._v("19")]),n("br"),n("span",{staticClass:"line-number"},[s._v("20")]),n("br")])])])}),[],!1,null,null,null);n.default=t.exports}}]);