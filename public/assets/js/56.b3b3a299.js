(window.webpackJsonp=window.webpackJsonp||[]).push([[56],{462:function(s,n,e){"use strict";e.r(n);var t=e(2),a=Object(t.a)({},(function(){var s=this,n=s._self._c;return n("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[n("h1",{attrs:{id:"day53-动态规划part14"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#day53-动态规划part14"}},[s._v("#")]),s._v(" Day53 动态规划part14")]),s._v(" "),n("h3",{attrs:{id:"最长公共子序列-leetcode-1143"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#最长公共子序列-leetcode-1143"}},[s._v("#")]),s._v(" 最长公共子序列 leetcode 1143")]),s._v(" "),n("p",[s._v("题目：给定两个字符串 "),n("code",[s._v("text1")]),s._v(" 和 "),n("code",[s._v("text2")]),s._v("，返回这两个字符串的最长 "),n("strong",[s._v("公共子序列")]),s._v(" 的长度。如果不存在 "),n("strong",[s._v("公共子序列")]),s._v(" ，返回 "),n("code",[s._v("0")]),s._v(" 。")]),s._v(" "),n("p",[s._v("一个字符串的 "),n("strong",[s._v("子序列")]),s._v(" 是指这样一个新的字符串：它是由原字符串在不改变字符的相对顺序的情况下删除某些字符（也可以不删除任何字符）后组成的新字符串。")]),s._v(" "),n("ul",[n("li",[s._v("例如，"),n("code",[s._v('"ace"')]),s._v(" 是 "),n("code",[s._v('"abcde"')]),s._v(" 的子序列，但 "),n("code",[s._v('"aec"')]),s._v(" 不是 "),n("code",[s._v('"abcde"')]),s._v(" 的子序列。")])]),s._v(" "),n("p",[s._v("两个字符串的 "),n("strong",[s._v("公共子序列")]),s._v(" 是这两个字符串所共同拥有的子序列。")]),s._v(" "),n("p",[n("strong",[s._v("示例 1：")])]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v('输入：text1 = "abcde", text2 = "ace" \n输出：3  \n解释：最长公共子序列是 "ace" ，它的长度为 3 。\n')])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br")])]),n("p",[n("strong",[s._v("示例 2：")])]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v('输入：text1 = "abc", text2 = "abc"\n输出：3\n解释：最长公共子序列是 "abc" ，它的长度为 3 。\n')])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br")])]),n("p",[n("strong",[s._v("示例 3：")])]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v('输入：text1 = "abc", text2 = "def"\n输出：0\n解释：两个字符串没有公共子序列，返回 0 。 \n')])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br")])]),n("p",[n("strong",[s._v("提示：")])]),s._v(" "),n("ul",[n("li",[n("code",[s._v("1 <= text1.length, text2.length <= 1000")])]),s._v(" "),n("li",[n("code",[s._v("text1")]),s._v(" 和 "),n("code",[s._v("text2")]),s._v(" 仅由小写英文字符组成。")])]),s._v(" "),n("p",[s._v("思路：")]),s._v(" "),n("ul",[n("li",[n("p",[s._v("确定DP数组以及下标含义: [0, i-1]的序列text1 与[0,j-1]的序列text2的最长公共子序列的长度为dp[i] [j]")])]),s._v(" "),n("li",[n("p",[s._v("确定递推公式：")])]),s._v(" "),n("li",[n("div",{staticClass:"language-C++ line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("  if(text1[i - 1] == text2[j - 1])   \n    dp[i] [j] =  dp[i - 1] [j - 1] + 1;\n  else\n    dp[i][j] = max(dp[i][j - 1], dp[i - 1][j]);\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br")])])]),s._v(" "),n("li",[n("p",[s._v("DP数组初始化:   dp[i] [j] = 0 //其实只要初始化第一行与第一列即可")])]),s._v(" "),n("li",[n("p",[s._v("确定遍历顺序:    从左往右，从上往下")])]),s._v(" "),n("li",[n("p",[s._v("打印DP数组： 用于debug")])]),s._v(" "),n("li",[n("img",{staticStyle:{zoom:"50%"},attrs:{src:"https://code-thinking-1253855093.file.myqcloud.com/pics/20210210150215918.jpg"}})])]),s._v(" "),n("div",{staticClass:"language-C++ line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("class Solution {\npublic:\n    int longestCommonSubsequence(string text1, string text2) {\n        vector<vector<int>> dp(text1.size() + 1, vector<int> (text2.size() + 1, 0));\n        int res = 0;\n        for (int i = 1; i <= text1.size(); ++i)\n        {\n            for (int j = 1; j <= text2.size(); ++j)\n            {\n                if(text1[i - 1] == text2[j - 1])   \n                    dp[i] [j] =  dp[i - 1] [j - 1] + 1;\n                else\n                    dp[i][j] = max(dp[i][j - 1], dp[i - 1][j]);\n            }\n        }\n        return dp[text1.size()][text2.size()];\n    }\n};\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br"),n("span",{staticClass:"line-number"},[s._v("13")]),n("br"),n("span",{staticClass:"line-number"},[s._v("14")]),n("br"),n("span",{staticClass:"line-number"},[s._v("15")]),n("br"),n("span",{staticClass:"line-number"},[s._v("16")]),n("br"),n("span",{staticClass:"line-number"},[s._v("17")]),n("br"),n("span",{staticClass:"line-number"},[s._v("18")]),n("br")])]),n("h3",{attrs:{id:"不相交的线-leetcode-1035"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#不相交的线-leetcode-1035"}},[s._v("#")]),s._v(" 不相交的线 leetcode 1035")]),s._v(" "),n("p",[s._v("题目：在两条独立的水平线上按给定的顺序写下 "),n("code",[s._v("nums1")]),s._v(" 和 "),n("code",[s._v("nums2")]),s._v(" 中的整数。")]),s._v(" "),n("p",[s._v("现在，可以绘制一些连接两个数字 "),n("code",[s._v("nums1[i]")]),s._v(" 和 "),n("code",[s._v("nums2[j]")]),s._v(" 的直线，这些直线需要同时满足满足：")]),s._v(" "),n("ul",[n("li",[n("code",[s._v("nums1[i] == nums2[j]")])]),s._v(" "),n("li",[s._v("且绘制的直线不与任何其他连线（非水平线）相交。")])]),s._v(" "),n("p",[s._v("请注意，连线即使在端点也不能相交：每个数字只能属于一条连线。")]),s._v(" "),n("p",[s._v("以这种方法绘制线条，并返回可以绘制的最大连线数。")]),s._v(" "),n("p",[n("strong",[s._v("示例 1：")])]),s._v(" "),n("img",{staticStyle:{zoom:"25%"},attrs:{src:"https://assets.leetcode.com/uploads/2019/04/26/142.png",alt:"img"}}),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("输入：nums1 = [1,4,2], nums2 = [1,2,4]\n输出：2\n解释：可以画出两条不交叉的线，如上图所示。 \n但无法画出第三条不相交的直线，因为从 nums1[1]=4 到 nums2[2]=4 的直线将与从 nums1[2]=2 到 nums2[1]=2 的直线相交。\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br")])]),n("p",[n("strong",[s._v("示例 2：")])]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("输入：nums1 = [2,5,1,2,5], nums2 = [10,5,2,1,5,2]\n输出：3\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br")])]),n("p",[n("strong",[s._v("示例 3：")])]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("输入：nums1 = [1,3,7,1,7,5], nums2 = [1,9,2,5,1]\n输出：2\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br")])]),n("p",[n("strong",[s._v("提示：")])]),s._v(" "),n("ul",[n("li",[n("code",[s._v("1 <= nums1.length, nums2.length <= 500")])]),s._v(" "),n("li",[n("code",[s._v("1 <= nums1[i], nums2[j] <= 2000")])])]),s._v(" "),n("p",[s._v("思路：秒了，和上题一样求子序列")]),s._v(" "),n("div",{staticClass:"language-C++ line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("class Solution {\npublic:\n    int maxUncrossedLines(vector<int>& nums1, vector<int>& nums2) {\n        vector<vector<int>> dp(nums1.size() + 1, vector<int>(nums2.size() + 1, 0));\n        for (int i = 1; i <= nums1.size(); ++i)\n        {\n            for (int j = 1; j <= nums2.size(); ++j)\n            {\n                if (nums1[i - 1] == nums2[j - 1])\n                    dp[i][j] = dp[i - 1][j - 1] + 1;\n                else\n                    dp[i][j] = max(dp[i - 1][j], dp[i][j - 1]);\n            }\n        }\n        return dp[nums1.size()][nums2.size()];\n    }\n};\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br"),n("span",{staticClass:"line-number"},[s._v("13")]),n("br"),n("span",{staticClass:"line-number"},[s._v("14")]),n("br"),n("span",{staticClass:"line-number"},[s._v("15")]),n("br"),n("span",{staticClass:"line-number"},[s._v("16")]),n("br"),n("span",{staticClass:"line-number"},[s._v("17")]),n("br")])]),n("h3",{attrs:{id:"最大子数组和-leetcode-53"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#最大子数组和-leetcode-53"}},[s._v("#")]),s._v(" 最大子数组和 leetcode 53")]),s._v(" "),n("p",[s._v("题目：给你一个整数数组 "),n("code",[s._v("nums")]),s._v(" ，请你找出一个具有最大和的连续子数组（子数组最少包含一个元素），返回其最大和。")]),s._v(" "),n("p",[n("strong",[s._v("子数组")]),s._v(" 是数组中的一个连续部分。")]),s._v(" "),n("p",[n("strong",[s._v("示例 1：")])]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("输入：nums = [-2,1,-3,4,-1,2,1,-5,4]\n输出：6\n解释：连续子数组 [4,-1,2,1] 的和最大，为 6 。\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br")])]),n("p",[n("strong",[s._v("示例 2：")])]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("输入：nums = [1]\n输出：1\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br")])]),n("p",[n("strong",[s._v("示例 3：")])]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("输入：nums = [5,4,-1,7,8]\n输出：23 \n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br")])]),n("p",[n("strong",[s._v("提示：")])]),s._v(" "),n("ul",[n("li",[n("code",[s._v("1 <= nums.length <= 105")])]),s._v(" "),n("li",[n("code",[s._v("-104 <= nums[i] <= 104")])])]),s._v(" "),n("p",[s._v("思路：")]),s._v(" "),n("ul",[n("li",[n("p",[s._v("确定DP数组以及下标含义：以nums[i]为结尾的最大连续子序列和为dp[i]")])]),s._v(" "),n("li",[n("p",[s._v("确定递推公式：dp[i] = max(dp[i - 1] + nums[i], nums[i]); //前面和小于nu ms[i]时则重新开始计算")])]),s._v(" "),n("li",[n("p",[s._v("DP数组初始化:   dp[0] = nums[0]")])]),s._v(" "),n("li",[n("p",[s._v("确定遍历顺序:    从前往后")])]),s._v(" "),n("li",[n("p",[s._v("打印DP数组： 用于debug")])])]),s._v(" "),n("div",{staticClass:"language-C++ line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("class Solution {\npublic:\n    int maxSubArray(vector<int>& nums) {\n       vector<int> dp(nums.size());\n       dp[0] = nums[0];\n       int result= dp[0];\n       for (int i = 1; i < nums.size(); ++i)\n       {\n           dp[i] = max(nums[i], dp[i - 1] + nums[i]);\n           if (result < dp[i]) result = dp[i];\n       }\n       return result;\n    }\n};\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br"),n("span",{staticClass:"line-number"},[s._v("13")]),n("br"),n("span",{staticClass:"line-number"},[s._v("14")]),n("br")])])])}),[],!1,null,null,null);n.default=a.exports}}]);