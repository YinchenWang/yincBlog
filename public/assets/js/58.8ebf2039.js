(window.webpackJsonp=window.webpackJsonp||[]).push([[58],{467:function(s,n,e){"use strict";e.r(n);var i=e(2),a=Object(i.a)({},(function(){var s=this,n=s._self._c;return n("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[n("h1",{attrs:{id:"day56-动态规划part16"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#day56-动态规划part16"}},[s._v("#")]),s._v(" Day56 动态规划part16")]),s._v(" "),n("h3",{attrs:{id:"两个字符串的删除操作-leetcode-538"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#两个字符串的删除操作-leetcode-538"}},[s._v("#")]),s._v(" 两个字符串的删除操作 leetcode 538")]),s._v(" "),n("p",[s._v("题目：给定两个单词 "),n("code",[s._v("word1")]),s._v(" 和 "),n("code",[s._v("word2")]),s._v(" ，返回使得 "),n("code",[s._v("word1")]),s._v(" 和 "),n("code",[s._v("word2")]),s._v(" "),n("strong",[s._v("相同")]),s._v("所需的"),n("strong",[s._v("最小步数")]),s._v("。")]),s._v(" "),n("p",[n("strong",[s._v("每步")]),s._v(" 可以删除任意一个字符串中的一个字符。")]),s._v(" "),n("p",[n("strong",[s._v("示例 1：")])]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v('输入: word1 = "sea", word2 = "eat"\n输出: 2\n解释: 第一步将 "sea" 变为 "ea" ，第二步将 "eat "变为 "ea"\n')])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br")])]),n("p",[n("strong",[s._v("示例  2:")])]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v('输入：word1 = "leetcode", word2 = "etco"\n输出：4\n')])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br")])]),n("p",[n("strong",[s._v("提示：")])]),s._v(" "),n("ul",[n("li",[n("code",[s._v("1 <= word1.length, word2.length <= 500")])]),s._v(" "),n("li",[n("code",[s._v("word1")]),s._v(" 和 "),n("code",[s._v("word2")]),s._v(" 只包含小写英文字母")])]),s._v(" "),n("p",[s._v("思路1：")]),s._v(" "),n("ul",[n("li",[n("p",[s._v("确定DP数组以及下标含义: 以i-1为结尾的word1 与以j-1为结尾的word2使其相等的最小操作次数为dp[i] [j]")])]),s._v(" "),n("li",[n("p",[s._v("确定递推公式：")])]),s._v(" "),n("li",[n("div",{staticClass:"language-C++ line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("  if(word1[i - 1] == word2[j - 1])   \n    dp[i] [j] =  dp[i - 1] [j - 1];\n  else\n    dp[i][j] = min(dp[i][j - 1] + 1, dp[i - 1][j] + 1， dp[i - 1][j - 1] + 2); //删一个和删两个\n  \n  //优化：\n  dp[i][j] = min(dp[i][j - 1] + 1, dp[i - 1][j] + 1);\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br")])])]),s._v(" "),n("li",[n("p",[s._v("DP数组初始化:   dp[0] [j] = j ， dp[i] [0] = i")]),s._v(" "),n("ul",[n("li",[n("p",[s._v("dp[i] [0]：word2为空字符串，以i-1为结尾的字符串word1要删除多少个元素，才能和word2相同呢，很明显dp[i][0] = i。")]),s._v(" "),n("p",[s._v("dp[0] [j]同理")])])])]),s._v(" "),n("li",[n("p",[s._v("确定遍历顺序:    从左往右，从上往下")])]),s._v(" "),n("li",[n("p",[s._v("打印DP数组： 用于debug")])])]),s._v(" "),n("div",{staticClass:"language-C++ line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("class Solution {\npublic:\n    int minDistance(string word1, string word2) {\n        vector<vector<int>> dp(word1.size() + 1, vector<int>(word2.size() + 1));\n\n        for (int i = 0; i <= word1.size(); ++i)  dp[i][0] = i;\n        for (int j = 0; j <= word2.size(); ++j)  dp[0][j] = j;\n\n        for (int i = 1; i <= word1.size(); ++i)\n        {\n            for (int j = 1; j <= word2.size(); ++j)\n            {\n                if (word1[i - 1] == word2[j - 1])\n                {\n                    dp[i][j] = dp[i - 1][j - 1];\n                }\n                else\n                {\n                    dp[i][j] = min(dp[i - 1][j] + 1, dp[i][j - 1] + 1);\n                }\n            }\n        }\n        return dp[word1.size()][word2.size()];\n    }\n};\n\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br"),n("span",{staticClass:"line-number"},[s._v("13")]),n("br"),n("span",{staticClass:"line-number"},[s._v("14")]),n("br"),n("span",{staticClass:"line-number"},[s._v("15")]),n("br"),n("span",{staticClass:"line-number"},[s._v("16")]),n("br"),n("span",{staticClass:"line-number"},[s._v("17")]),n("br"),n("span",{staticClass:"line-number"},[s._v("18")]),n("br"),n("span",{staticClass:"line-number"},[s._v("19")]),n("br"),n("span",{staticClass:"line-number"},[s._v("20")]),n("br"),n("span",{staticClass:"line-number"},[s._v("21")]),n("br"),n("span",{staticClass:"line-number"},[s._v("22")]),n("br"),n("span",{staticClass:"line-number"},[s._v("23")]),n("br"),n("span",{staticClass:"line-number"},[s._v("24")]),n("br"),n("span",{staticClass:"line-number"},[s._v("25")]),n("br"),n("span",{staticClass:"line-number"},[s._v("26")]),n("br")])]),n("p",[s._v("思路2：求出word1与word2的最长公共子序列，然后使用word1 + word2的长度剪去两个最长公共子序列的长度即可！！！")]),s._v(" "),n("div",{staticClass:"language-C++ line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("class Solution {\npublic:\n    int minDistance(string word1, string word2) {\n       vector<vector<int>> dp(word1.size()+1, vector<int>(word2.size()+1, 0));\n        for (int i=1; i<=word1.size(); i++){\n            for (int j=1; j<=word2.size(); j++){\n                if (word1[i-1] == word2[j-1]) dp[i][j] = dp[i-1][j-1] + 1;\n                else dp[i][j] = max(dp[i-1][j], dp[i][j-1]);\n            }\n        }\n        return word1.size()+word2.size()-dp[word1.size()][word2.size()]*2;\n    }\n};\n\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br"),n("span",{staticClass:"line-number"},[s._v("13")]),n("br"),n("span",{staticClass:"line-number"},[s._v("14")]),n("br")])]),n("h3",{attrs:{id:"编辑距离-leetcode-72"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#编辑距离-leetcode-72"}},[s._v("#")]),s._v(" 编辑距离 leetcode 72")]),s._v(" "),n("p",[s._v("题目：给你两个单词 "),n("code",[s._v("word1")]),s._v(" 和 "),n("code",[s._v("word2")]),s._v("， "),n("em",[s._v("请返回将 "),n("code",[s._v("word1")]),s._v(" 转换成 "),n("code",[s._v("word2")]),s._v(" 所使用的最少操作数")]),s._v(" 。")]),s._v(" "),n("p",[s._v("你可以对一个单词进行如下三种操作：")]),s._v(" "),n("ul",[n("li",[s._v("插入一个字符")]),s._v(" "),n("li",[s._v("删除一个字符")]),s._v(" "),n("li",[s._v("替换一个字符")])]),s._v(" "),n("p",[n("strong",[s._v("示例 1：")])]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("输入：word1 = \"horse\", word2 = \"ros\"\n输出：3\n解释：\nhorse -> rorse (将 'h' 替换为 'r')\nrorse -> rose (删除 'r')\nrose -> ros (删除 'e')\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br")])]),n("p",[n("strong",[s._v("示例 2：")])]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("输入：word1 = \"intention\", word2 = \"execution\"\n输出：5\n解释：\nintention -> inention (删除 't')\ninention -> enention (将 'i' 替换为 'e')\nenention -> exention (将 'n' 替换为 'x')\nexention -> exection (将 'n' 替换为 'c')\nexection -> execution (插入 'u')\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br")])]),n("p",[n("strong",[s._v("提示：")])]),s._v(" "),n("ul",[n("li",[n("code",[s._v("0 <= word1.length, word2.length <= 500")])]),s._v(" "),n("li",[n("code",[s._v("word1")]),s._v(" 和 "),n("code",[s._v("word2")]),s._v(" 由小写英文字母组成")])]),s._v(" "),n("p",[s._v("思路：")]),s._v(" "),n("ul",[n("li",[n("p",[s._v("确定DP数组以及下标含义: 以i-1为结尾的word1 与以j-1]为结尾的word2将 "),n("code",[s._v("word1")]),s._v(" 转换成 "),n("code",[s._v("word2")]),s._v(" 所使用的最小操作次数为dp[i] [j]")])]),s._v(" "),n("li",[n("p",[s._v("确定递推公式：")])]),s._v(" "),n("li",[n("div",{staticClass:"language-C++ line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("  if (word1[i - 1] == word2[j - 1]) {\n    dp[i][j] = dp[i - 1][j - 1];\n  } else { //增删换\n    dp[i][j] = min (\t//删除一个元素与增加一个元素相同\n      dp[i - 1][j] + 1,\t\t//删word1中\n      dp[i][j - 1] + 1,\t\t//删word2中\n      dp[i - 1][j - 1] + 1）\t//替换元素\n  }\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br")])])]),s._v(" "),n("li",[n("p",[s._v("DP数组初始化:")]),s._v(" "),n("ul",[n("li",[n("p",[s._v("dp[i] [0] = i \t//word2为空串，word1操作i次成为空串")])]),s._v(" "),n("li",[n("p",[s._v("dp[0] [j] = j       //word1为空串，word2操作j次成为空串")])])])]),s._v(" "),n("li",[n("p",[s._v("确定遍历顺序:    从左往右，从上往下")])]),s._v(" "),n("li",[n("p",[s._v("打印DP数组： 用于debug")])]),s._v(" "),n("li",[n("img",{staticStyle:{zoom:"40%"},attrs:{src:"https://code-thinking.cdn.bcebos.com/pics/115.%E4%B8%8D%E5%90%8C%E7%9A%84%E5%AD%90%E5%BA%8F%E5%88%97.jpg"}})])]),s._v(" "),n("div",{staticClass:"language-C++ line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("class Solution {\npublic:\n    int minDistance(string word1, string word2) {\n        vector<vector<int>> dp(word1.size() + 1, vector<int>(word2.size() + 1));\n\n        for (int i = 0; i <= word1.size(); ++i)  dp[i][0] = i;\n        for (int j = 0; j <= word2.size(); ++j)  dp[0][j] = j;\n\n        for (int i = 1; i <= word1.size(); ++i)\n        {\n            for (int j = 1; j <= word2.size(); ++j)\n            {\n                if (word1[i - 1] == word2[j - 1])\n                {\n                    dp[i][j] = dp[i - 1][j - 1];\n                }\n                else\n                {\n                    dp[i][j] = min({dp[i - 1][j - 1], dp[i - 1][j], dp[i][j - 1]}) + 1;\n                }\n            }\n        }\n        return dp[word1.size()][word2.size()];\n    }\n};\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br"),n("span",{staticClass:"line-number"},[s._v("13")]),n("br"),n("span",{staticClass:"line-number"},[s._v("14")]),n("br"),n("span",{staticClass:"line-number"},[s._v("15")]),n("br"),n("span",{staticClass:"line-number"},[s._v("16")]),n("br"),n("span",{staticClass:"line-number"},[s._v("17")]),n("br"),n("span",{staticClass:"line-number"},[s._v("18")]),n("br"),n("span",{staticClass:"line-number"},[s._v("19")]),n("br"),n("span",{staticClass:"line-number"},[s._v("20")]),n("br"),n("span",{staticClass:"line-number"},[s._v("21")]),n("br"),n("span",{staticClass:"line-number"},[s._v("22")]),n("br"),n("span",{staticClass:"line-number"},[s._v("23")]),n("br"),n("span",{staticClass:"line-number"},[s._v("24")]),n("br"),n("span",{staticClass:"line-number"},[s._v("25")]),n("br")])])])}),[],!1,null,null,null);n.default=a.exports}}]);